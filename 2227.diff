diff --git a/grails-app/controllers/org/bbop/apollo/OrganismController.groovy b/grails-app/controllers/org/bbop/apollo/OrganismController.groovy
index ecb945712..742e353bc 100644
--- a/grails-app/controllers/org/bbop/apollo/OrganismController.groovy
+++ b/grails-app/controllers/org/bbop/apollo/OrganismController.groovy
@@ -3,9 +3,7 @@ package org.bbop.apollo
 import grails.converters.JSON
 import grails.transaction.NotTransactional
 import grails.transaction.Transactional
-import groovy.io.FileType
 import htsjdk.samtools.reference.FastaSequenceIndexCreator
-import org.apache.commons.io.FileUtils
 import org.bbop.apollo.gwt.shared.FeatureStringEnum
 import org.bbop.apollo.gwt.shared.GlobalPermissionEnum
 import org.bbop.apollo.gwt.shared.PermissionEnum
@@ -27,7 +25,6 @@ import org.springframework.web.multipart.commons.CommonsMultipartFile
 import javax.servlet.http.HttpServletResponse
 import java.nio.file.FileSystems
 import java.nio.file.Path
-import java.util.zip.GZIPOutputStream
 
 import static org.springframework.http.HttpStatus.NOT_FOUND
 
@@ -35,686 +32,686 @@ import static org.springframework.http.HttpStatus.NOT_FOUND
 @Transactional(readOnly = true)
 class OrganismController {
 
-    static allowedMethods = [save: "POST", update: "PUT", delete: "DELETE"]
-
-    def sequenceService
-    def permissionService
-    def requestHandlingService
-    def preferenceService
-    def organismService
-    def reportService
-    def configWrapperService
-    def trackService
-    def fileService
-
-
-    @RestApiMethod(description = "Remove an organism", path = "/organism/deleteOrganism", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "organism", type = "json", paramType = RestApiParamType.QUERY, description = "Pass an Organism JSON object with an 'id' that corresponds to the organism to be removed")
-    ])
-    @Transactional
-    def deleteOrganism() {
-
-        try {
-            JSONObject organismJson = permissionService.handleInput(request, params)
-            log.debug "deleteOrganism ${organismJson}"
-            //if (permissionService.isUserBetterOrEqualRank(currentUser, GlobalPermissionEnum.INSTRUCTOR)){
-            log.debug "organism ID: ${organismJson.id} vs ${organismJson.organism}"
-            Organism organism = Organism.findById(organismJson.id as Long) ?: Organism.findByCommonName(organismJson.organism)
-            if (!organism) {
-                def error = [error: "Organism ${organismJson.organism} not found"]
-                log.error(error.error)
-                render error as JSON
-                return
-            }
-            // to support webservice, get current user from session or input object
-            def currentUser = permissionService.getCurrentUser(organismJson)
-            String creatorMetaData = organism.getMetaData(FeatureStringEnum.CREATOR.value)
-            // only allow global admin or organism creator or organism administrative to delete the organism
-            if (!permissionService.hasGlobalPermissions(organismJson, GlobalPermissionEnum.ADMIN) && !(creatorMetaData && currentUser.id.toString() == creatorMetaData) && !permissionService.checkPermissions(organismJson, organism, PermissionEnum.ADMINISTRATE)) {
-                def error = [error: 'not authorized to delete organism']
-                log.error(error.error)
-                render error as JSON
-                return
-            }
+  static allowedMethods = [save: "POST", update: "PUT", delete: "DELETE"]
+
+  def sequenceService
+  def permissionService
+  def requestHandlingService
+  def preferenceService
+  def organismService
+  def reportService
+  def configWrapperService
+  def trackService
+  def fileService
+
+
+  @RestApiMethod(description = "Remove an organism", path = "/organism/deleteOrganism", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "organism", type = "json", paramType = RestApiParamType.QUERY, description = "Pass an Organism JSON object with an 'id' that corresponds to the organism to be removed")
+  ])
+  @Transactional
+  def deleteOrganism() {
+
+    try {
+      JSONObject organismJson = permissionService.handleInput(request, params)
+      log.debug "deleteOrganism ${organismJson}"
+      //if (permissionService.isUserBetterOrEqualRank(currentUser, GlobalPermissionEnum.INSTRUCTOR)){
+      log.debug "organism ID: ${organismJson.id} vs ${organismJson.organism}"
+      Organism organism = Organism.findById(organismJson.id as Long) ?: Organism.findByCommonName(organismJson.organism)
+      if (!organism) {
+        def error = [error: "Organism ${organismJson.organism} not found"]
+        log.error(error.error)
+        render error as JSON
+        return
+      }
+      // to support webservice, get current user from session or input object
+      def currentUser = permissionService.getCurrentUser(organismJson)
+      String creatorMetaData = organism.getMetaData(FeatureStringEnum.CREATOR.value)
+      // only allow global admin or organism creator or organism administrative to delete the organism
+      if (!permissionService.hasGlobalPermissions(organismJson, GlobalPermissionEnum.ADMIN) && !(creatorMetaData && currentUser.id.toString() == creatorMetaData) && !permissionService.checkPermissions(organismJson, organism, PermissionEnum.ADMINISTRATE)) {
+        def error = [error: 'not authorized to delete organism']
+        log.error(error.error)
+        render error as JSON
+        return
+      }
+
+      UserOrganismPreference.deleteAll(UserOrganismPreference.findAllByOrganism(organism))
+      OrganismFilter.deleteAll(OrganismFilter.findAllByOrganism(organism))
+      organism.delete()
+      log.info "Success deleting organism: ${organismJson.organism}"
+
+      if (organism.directory.startsWith(trackService.commonDataDirectory)) {
+        log.info "Directoy is part of the common data directory ${trackService.commonDataDirectory}, so deleting ${organism.directory}"
+        File directoryToRemove = new File(organism.directory)
+        assert directoryToRemove.deleteDir()
+      }
+
+      render findAllOrganisms()
 
-            UserOrganismPreference.deleteAll(UserOrganismPreference.findAllByOrganism(organism))
-            OrganismFilter.deleteAll(OrganismFilter.findAllByOrganism(organism))
-            organism.delete()
-            log.info "Success deleting organism: ${organismJson.organism}"
-
-            if (organism.directory.startsWith(trackService.commonDataDirectory)) {
-                log.info "Directoy is part of the common data directory ${trackService.commonDataDirectory}, so deleting ${organism.directory}"
-                File directoryToRemove = new File(organism.directory)
-                assert directoryToRemove.deleteDir()
-            }
-
-            render findAllOrganisms()
-
-        }
-        catch (Exception e) {
-            def error = [error: 'problem deleting organism: ' + e]
-            log.error(error.error)
-            render error as JSON
-        }
     }
-
-    @RestApiMethod(description = "Delete an organism along with its data directory and returns a JSON object containing properties of the deleted organism", path = "/organism/deleteOrganismWithSequence", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
-    ])
-    @Transactional
-    def deleteOrganismWithSequence() {
-
-        JSONObject requestObject = permissionService.handleInput(request, params)
-        JSONObject responseObject = new JSONObject()
-        log.debug "deleteOrganism ${requestObject}"
-
-        try {
-            //if (permissionService.isUserGlobalAdmin(permissionService.getCurrentUser(requestObject))) {
-            // use hasGolbalPermssions instead, which can validate the authentication
-            if (permissionService.hasGlobalPermissions(requestObject, GlobalPermissionEnum.ADMIN)) {
-                Organism organism = preferenceService.getOrganismForTokenInDB(requestObject.organism)
-                if (organism) {
-                    boolean dataAddedViaWebServices = organism.dataAddedViaWebServices == null ? false : organism.dataAddedViaWebServices
-                    String organismDirectory = organism.directory
-                    def organismAsJSON = organism as JSON
-                    UserOrganismPreference.deleteAll(UserOrganismPreference.findAllByOrganism(organism))
-                    OrganismFilter.deleteAll(OrganismFilter.findAllByOrganism(organism))
-                    organism.delete()
-
-                    if (dataAddedViaWebServices) {
-                        log.debug "organism ${organism.id} was added via web services;"
-                        File dataDirectory = new File(organismDirectory)
-                        if (dataDirectory.deleteDir()) {
-                            log.info "dataDirectory: ${organismDirectory} deleted successfully."
-                        } else {
-                            log.error "Could not delete data directory: ${organismDirectory}."
-                            responseObject.put("warn", "Could not delete data directory: ${organismDirectory}")
-                        }
-                    } else {
-                        log.warn "organism ${organism.id} was not added via web services; Organism deleted but cannot delete data directory ${organismDirectory}"
-                        responseObject.put("warn", "Organism ${organism.id} was not added via web services; Organism deleted but cannot delete data directory ${organismDirectory}.")
-                        File extendedDataDirectory = trackService.getExtendedDataDirectory(organism)
-                        if (extendedDataDirectory.exists()) {
-                            log.info "Extended data directory found: ${extendedDataDirectory.absolutePath}"
-                            if (extendedDataDirectory.deleteDir()) {
-                                log.info "extended data directory found and deleted"
-                            } else {
-                                log.error "Extended data directory found but could not be deleted"
-                                responseObject.put("warn", responseObject.get("warn") + " Extended data directory found but could not be deleted.")
-                            }
-                        }
-                    }
-                    //render organismAsJSON
-                    responseObject.put("organism", JSON.parse(organismAsJSON.toString()) as JSONObject)
-                    log.info "Success deleting organism: ${requestObject.organism}"
-                } else {
-                    log.error "Organism: ${requestObject.organism} not found"
-                    responseObject.put("error", "Organism: ${requestObject.organism} not found.")
-                }
+    catch (Exception e) {
+      def error = [error: 'problem deleting organism: ' + e]
+      log.error(error.error)
+      render error as JSON
+    }
+  }
+
+  @RestApiMethod(description = "Delete an organism along with its data directory and returns a JSON object containing properties of the deleted organism", path = "/organism/deleteOrganismWithSequence", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
+  ])
+  @Transactional
+  def deleteOrganismWithSequence() {
+
+    JSONObject requestObject = permissionService.handleInput(request, params)
+    JSONObject responseObject = new JSONObject()
+    log.debug "deleteOrganism ${requestObject}"
+
+    try {
+      //if (permissionService.isUserGlobalAdmin(permissionService.getCurrentUser(requestObject))) {
+      // use hasGolbalPermssions instead, which can validate the authentication
+      if (permissionService.hasGlobalPermissions(requestObject, GlobalPermissionEnum.ADMIN)) {
+        Organism organism = preferenceService.getOrganismForTokenInDB(requestObject.organism)
+        if (organism) {
+          boolean dataAddedViaWebServices = organism.dataAddedViaWebServices == null ? false : organism.dataAddedViaWebServices
+          String organismDirectory = organism.directory
+          def organismAsJSON = organism as JSON
+          UserOrganismPreference.deleteAll(UserOrganismPreference.findAllByOrganism(organism))
+          OrganismFilter.deleteAll(OrganismFilter.findAllByOrganism(organism))
+          organism.delete()
+
+          if (dataAddedViaWebServices) {
+            log.debug "organism ${organism.id} was added via web services;"
+            File dataDirectory = new File(organismDirectory)
+            if (dataDirectory.deleteDir()) {
+              log.info "dataDirectory: ${organismDirectory} deleted successfully."
             } else {
-                log.error "username not authorized to delete organism"
-                responseObject.put("error", "username not authorized to delete organism.")
+              log.error "Could not delete data directory: ${organismDirectory}."
+              responseObject.put("warn", "Could not delete data directory: ${organismDirectory}")
+            }
+          } else {
+            log.warn "organism ${organism.id} was not added via web services; Organism deleted but cannot delete data directory ${organismDirectory}"
+            responseObject.put("warn", "Organism ${organism.id} was not added via web services; Organism deleted but cannot delete data directory ${organismDirectory}.")
+            File extendedDataDirectory = trackService.getExtendedDataDirectory(organism)
+            if (extendedDataDirectory.exists()) {
+              log.info "Extended data directory found: ${extendedDataDirectory.absolutePath}"
+              if (extendedDataDirectory.deleteDir()) {
+                log.info "extended data directory found and deleted"
+              } else {
+                log.error "Extended data directory found but could not be deleted"
+                responseObject.put("warn", responseObject.get("warn") + " Extended data directory found but could not be deleted.")
+              }
             }
-        } catch (Exception e) {
-            log.error(e.message)
-            responseObject.put("error", e.message)
+          }
+          //render organismAsJSON
+          responseObject.put("organism", JSON.parse(organismAsJSON.toString()) as JSONObject)
+          log.info "Success deleting organism: ${requestObject.organism}"
+        } else {
+          log.error "Organism: ${requestObject.organism} not found"
+          responseObject.put("error", "Organism: ${requestObject.organism} not found.")
         }
+      } else {
+        log.error "username not authorized to delete organism"
+        responseObject.put("error", "username not authorized to delete organism.")
+      }
+    } catch (Exception e) {
+      log.error(e.message)
+      responseObject.put("error", e.message)
+    }
 
-        render responseObject as JSON
+    render responseObject as JSON
+  }
+
+  @RestApiMethod(description = "Remove features from an organism", path = "/organism/deleteOrganismFeatures", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism.")
+    , @RestApiParam(name = "sequences", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) Comma-delimited sequence names on that organism if only certain sequences should be deleted.")
+  ])
+  @NotTransactional
+  def deleteOrganismFeatures() {
+    JSONObject organismJson = permissionService.handleInput(request, params)
+    if (organismJson.username == "" || organismJson.organism == "" || organismJson.password == "") {
+      def error = ['error': 'Empty fields in request JSON']
+      render error as JSON
+      log.error(error.error)
+      return
+    }
+    try {
+      if (!permissionService.hasPermissions(organismJson, PermissionEnum.ADMINISTRATE)) {
+        def error = [error: 'not authorized to delete all features from organism']
+        log.error(error.error)
+        render error as JSON
+        return
+      }
+
+      Organism organism = Organism.findByCommonName(organismJson.organism)
+
+      if (!organism) {
+        organism = Organism.findById(organismJson.organism)
+      }
+
+      if (!organism) {
+        throw new Exception("Can not find organism for ${organismJson.organism} to remove features of")
+      }
+
+      if (organismJson.sequences) {
+        List<String> sequenceNames = organismJson.sequences.toString().split(",")
+        List<Sequence> sequences = Sequence.findAllByOrganismAndNameInList(organism, sequenceNames)
+        organismService.deleteAllFeaturesForSequences(sequences)
+      } else {
+        organismService.deleteAllFeaturesForOrganism(organism)
+      }
+
+      render [:] as JSON
+    }
+    catch (e) {
+      def error = [error: 'problem removing organism features for organism: ' + e]
+      render error as JSON
+      e.printStackTrace()
+      log.error(error.error)
+    }
+  }
+
+
+  @RestApiMethod(description = "Adds an organism returning a JSON array of all organisms", path = "/organism/addOrganismWithSequence", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "species", type = "string", paramType = RestApiParamType.QUERY, description = "species name")
+    , @RestApiParam(name = "genus", type = "string", paramType = RestApiParamType.QUERY, description = "species genus")
+    , @RestApiParam(name = "blatdb", type = "string", paramType = RestApiParamType.QUERY, description = "filesystem path for a BLAT database (e.g. a .2bit file) if not uploaded")
+    , @RestApiParam(name = "publicMode", type = "boolean", paramType = RestApiParamType.QUERY, description = "a flag for whether the organism appears as in the public genomes list")
+    , @RestApiParam(name = "commonName", type = "string", paramType = RestApiParamType.QUERY, description = "commonName for an organism")
+    , @RestApiParam(name = "nonDefaultTranslationTable", type = "string", paramType = RestApiParamType.QUERY, description = "non-default translation table")
+    , @RestApiParam(name = "metadata", type = "string", paramType = RestApiParamType.QUERY, description = "organism metadata")
+    , @RestApiParam(name = "organismData", type = "file", paramType = RestApiParamType.QUERY, description = "zip or tar.gz compressed data directory (if other options not used).  Blat data should include a .2bit suffix and be in a directory 'searchDatabaseData'")
+    , @RestApiParam(name = "sequenceData", type = "file", paramType = RestApiParamType.QUERY, description = "FASTA file (optionally compressed) to automatically upload with")
+    , @RestApiParam(name = "searchDatabaseData", type = "file", paramType = RestApiParamType.QUERY, description = "2bit file for blat search (optional)")
+  ])
+  @Transactional
+  def addOrganismWithSequence() {
+
+
+    JSONObject returnObject = new JSONObject()
+    JSONObject requestObject = permissionService.handleInput(request, params)
+    log.info "adding organismwith SEQUENDE ${requestObject as String}"
+    String clientToken = requestObject.getString(FeatureStringEnum.CLIENT_TOKEN.value)
+    CommonsMultipartFile organismDataFile = request.getFile(FeatureStringEnum.ORGANISM_DATA.value)
+    CommonsMultipartFile sequenceDataFile = request.getFile(FeatureStringEnum.SEQUENCE_DATA.value)
+    CommonsMultipartFile searchDatabaseDataFile = request.getFile(FeatureStringEnum.SEARCH_DATABASE_DATA.value)
+
+    if (!requestObject.containsKey(FeatureStringEnum.ORGANISM_NAME.value)) {
+      returnObject.put("error", "/addOrganismWithSequence requires '${FeatureStringEnum.ORGANISM_NAME.value}'.")
+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+      render returnObject as JSON
+      return
     }
 
-    @RestApiMethod(description = "Remove features from an organism", path = "/organism/deleteOrganismFeatures", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism.")
-            , @RestApiParam(name = "sequences", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) Comma-delimited sequence names on that organism if only certain sequences should be deleted.")
-    ])
-    @NotTransactional
-    def deleteOrganismFeatures() {
-        JSONObject organismJson = permissionService.handleInput(request, params)
-        if (organismJson.username == "" || organismJson.organism == "" || organismJson.password == "") {
-            def error = ['error': 'Empty fields in request JSON']
-            render error as JSON
-            log.error(error.error)
-            return
-        }
-        try {
-            if (!permissionService.hasPermissions(organismJson, PermissionEnum.ADMINISTRATE)) {
-                def error = [error: 'not authorized to delete all features from organism']
-                log.error(error.error)
-                render error as JSON
-                return
-            }
+    if (organismDataFile == null && sequenceDataFile == null) {
+      returnObject.put("error", "/addOrganismWithSequence requires '${FeatureStringEnum.ORGANISM_DATA.value}' or ${FeatureStringEnum.SEQUENCE_DATA.value}.")
+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+      render returnObject as JSON
+      return
+    }
 
-            Organism organism = Organism.findByCommonName(organismJson.organism)
+    if (organismDataFile != null && sequenceDataFile != null) {
+      returnObject.put("error", "/addOrganismWithSequence requires ONLY one (not both) of '${FeatureStringEnum.ORGANISM_DATA.value}' or ${FeatureStringEnum.SEQUENCE_DATA.value}.")
+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+      render returnObject as JSON
+      return
+    }
 
-            if (!organism) {
-                organism = Organism.findById(organismJson.organism)
+    try {
+      if (permissionService.isUserGlobalAdmin(permissionService.getCurrentUser(requestObject))) {
+        String organismName = requestObject.get(FeatureStringEnum.ORGANISM_NAME.value)
+        def organism = new Organism(
+          commonName: organismName,
+          directory: trackService.commonDataDirectory,
+          blatdb: requestObject.blatdb ?: "",
+          genus: requestObject.genus ?: "",
+          obsolete: false,
+          valid: true,
+          species: requestObject.species ?: "",
+          metadata: requestObject.metadata ?: "",
+          publicMode: requestObject.publicMode ?: false,
+          nonDefaultTranslationTable: requestObject.nonDefaultTranslationTable ?: null,
+          dataAddedViaWebServices: true
+        ).save(failOnError: true, flush: true, insert: true)
+        def currentUser = permissionService.currentUser
+        organism.addMetaData("creator", currentUser.id.toString())
+        File directory = trackService.getExtendedDataDirectory(organism)
+
+        if (directory.mkdirs() && directory.setWritable(true)) {
+
+          if (organismDataFile) {
+            log.debug "Successfully created directory ${directory.absolutePath}"
+            File archiveFile = new File(organismDataFile.getOriginalFilename())
+            organismDataFile.transferTo(archiveFile)
+            try {
+              fileService.decompress(archiveFile, directory.absolutePath, null, false)
+              log.debug "Adding ${organismName} with directory: ${directory.absolutePath}"
+              organism.directory = directory.absolutePath
+
+              // if directory has a "searchDatabaseData" directory then any file in that that is a 2bit is the blatdb
+              String blatdb = organismService.findBlatDB(directory.absolutePath)
+              if (blatdb) {
+                organism.blatdb = blatdb
+              }
+              organism.save()
+              sequenceService.loadRefSeqs(organism)
+              preferenceService.setCurrentOrganism(permissionService.getCurrentUser(requestObject), organism, clientToken)
+              findAllOrganisms()
+            }
+            catch (IOException e) {
+              log.error e.printStackTrace()
+              returnObject.put("error", e.message)
+              organism.delete()
+              render returnObject
+              return
             }
+          } else if (sequenceDataFile) {
 
-            if (!organism) {
-                throw new Exception("Can not find organism for ${organismJson.organism} to remove features of")
+            SequenceTypeEnum sequenceTypeEnum = SequenceTypeEnum.getSequenceTypeForFile(sequenceDataFile.getOriginalFilename())
+            if (sequenceTypeEnum == null) {
+              returnObject.put("error", "Bad file input: " + sequenceDataFile.originalFilename)
+              render returnObject
+              return
             }
 
-            if (organismJson.sequences) {
-                List<String> sequenceNames = organismJson.sequences.toString().split(",")
-                List<Sequence> sequences = Sequence.findAllByOrganismAndNameInList(organism, sequenceNames)
-                organismService.deleteAllFeaturesForSequences(sequences)
-            } else {
-                organismService.deleteAllFeaturesForOrganism(organism)
+            // TODO: put this in a temp directory? ? ?
+            try {
+              File rawDirectory = new File(directory.absolutePath + "/seq")
+              assert rawDirectory.mkdir()
+              assert rawDirectory.setWritable(true)
+              File archiveFile = new File(rawDirectory.absolutePath + File.separator + organismName + "." + sequenceTypeEnum.suffix)
+              sequenceDataFile.transferTo(archiveFile)
+              organism.directory = directory.absolutePath
+
+              // decompress if need be
+              if (sequenceTypeEnum.compression != null) {
+                List<String> fileNames = fileService.decompress(archiveFile, rawDirectory.absolutePath)
+                // move the filenames to the same original name, let's assume there is one
+                File oldFile = new File(fileNames[0])
+                assert oldFile.exists()
+//                                assert oldFile.absolutePath.endsWith(".fa")
+                File newFile = new File(rawDirectory.absolutePath + File.separator + organismName + ".fa")
+                oldFile.renameTo(newFile)
+              }
+
+              println "search db file : ${searchDatabaseDataFile.name} ${searchDatabaseDataFile.size} ${searchDatabaseDataFile.originalFilename} ${searchDatabaseDataFile.contentType}"
+              if (searchDatabaseDataFile != null) {
+                File searchDirectory = new File(directory.absolutePath + "/search")
+                assert searchDirectory.mkdir()
+                assert searchDirectory.setWritable(true)
+                File searchFile = new File(searchDirectory.absolutePath + File.separator + searchDatabaseDataFile.originalFilename)
+                println "search file: ${searchFile.absolutePath}"
+                searchDatabaseDataFile.transferTo(searchFile)
+                organism.blatdb = searchFile.absolutePath
+              }
+
+              organism.save()
+
+
+              String trackListJson = TrackDefaults.getIndexedFastaConfig(organismName)
+              File trackListFile = new File(directory.absolutePath + File.separator + "trackList.json")
+              trackListFile.write(trackListJson)
+
+              // create an index
+              Path path = FileSystems.getDefault().getPath(rawDirectory.absolutePath + File.separator + organismName + ".fa")
+              FastaSequenceIndexCreator.create(path, true)
+
+              sequenceService.loadRefSeqs(organism)
+              preferenceService.setCurrentOrganism(permissionService.getCurrentUser(requestObject), organism, clientToken)
+              findAllOrganisms()
+            }
+            catch (IOException e) {
+              log.error e.printStackTrace()
+              returnObject.put("error", e.message)
+              organism.delete()
             }
 
-            render [:] as JSON
-        }
-        catch (e) {
-            def error = [error: 'problem removing organism features for organism: ' + e]
-            render error as JSON
-            e.printStackTrace()
-            log.error(error.error)
+          } else {
+            throw new RuntimeException("Not sure how we got here ")
+          }
+        } else {
+          log.error "Could not create ${directory.absolutePath}"
+          returnObject.put("error", "Could not create ${directory.absolutePath}.")
+          organism.delete()
         }
+      } else {
+        log.error "username ${requestObject.get(FeatureStringEnum.USERNAME.value)} is not authorized to add organisms"
+        returnObject.put("error", "username ${requestObject.get(FeatureStringEnum.USERNAME.value)} is not authorized to add organisms.")
+      }
+    }
+    catch (e) {
+      log.error e.printStackTrace()
+      returnObject.put("error", e.message)
     }
 
+    render returnObject as JSON
+  }
+
+  @RestApiMethod(description = "Removes an added track from an existing organism returning a JSON object containing all tracks for the current organism.", path = "/organism/removeTrackFromOrganism", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
+    , @RestApiParam(name = "trackLabel", type = "string", paramType = RestApiParamType.QUERY, description = "Name of track")
+  ])
+  @Transactional
+  def removeTrackFromOrganism() {
+    JSONObject returnObject = new JSONObject()
+    JSONObject requestObject = permissionService.handleInput(request, params)
+    log.info "removing track from organism with ${requestObject}"
+
+    if (!requestObject.containsKey(FeatureStringEnum.ORGANISM.value)) {
+      returnObject.put("error", "/removeTrackFromOrganism requires '${FeatureStringEnum.ORGANISM.value}'.")
+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+      render returnObject as JSON
+      return
+    }
 
-    @RestApiMethod(description = "Adds an organism returning a JSON array of all organisms", path = "/organism/addOrganismWithSequence", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "species", type = "string", paramType = RestApiParamType.QUERY, description = "species name")
-            , @RestApiParam(name = "genus", type = "string", paramType = RestApiParamType.QUERY, description = "species genus")
-            , @RestApiParam(name = "blatdb", type = "string", paramType = RestApiParamType.QUERY, description = "filesystem path for a BLAT database (e.g. a .2bit file) if not uploaded")
-            , @RestApiParam(name = "publicMode", type = "boolean", paramType = RestApiParamType.QUERY, description = "a flag for whether the organism appears as in the public genomes list")
-            , @RestApiParam(name = "commonName", type = "string", paramType = RestApiParamType.QUERY, description = "commonName for an organism")
-            , @RestApiParam(name = "nonDefaultTranslationTable", type = "string", paramType = RestApiParamType.QUERY, description = "non-default translation table")
-            , @RestApiParam(name = "metadata", type = "string", paramType = RestApiParamType.QUERY, description = "organism metadata")
-            , @RestApiParam(name = "organismData", type = "file", paramType = RestApiParamType.QUERY, description = "zip or tar.gz compressed data directory (if other options not used).  Blat data should include a .2bit suffix and be in a directory 'searchDatabaseData'")
-            , @RestApiParam(name = "sequenceData", type = "file", paramType = RestApiParamType.QUERY, description = "FASTA file (optionally compressed) to automatically upload with")
-            , @RestApiParam(name = "searchDatabaseData", type = "file", paramType = RestApiParamType.QUERY, description = "2bit file for blat search (optional)")
-    ])
-    @Transactional
-    def addOrganismWithSequence() {
-
-
-        JSONObject returnObject = new JSONObject()
-        JSONObject requestObject = permissionService.handleInput(request, params)
-        log.info "adding organismwith SEQUENDE ${requestObject as String}"
-        String clientToken = requestObject.getString(FeatureStringEnum.CLIENT_TOKEN.value)
-        CommonsMultipartFile organismDataFile = request.getFile(FeatureStringEnum.ORGANISM_DATA.value)
-        CommonsMultipartFile sequenceDataFile = request.getFile(FeatureStringEnum.SEQUENCE_DATA.value)
-        CommonsMultipartFile searchDatabaseDataFile = request.getFile(FeatureStringEnum.SEARCH_DATABASE_DATA.value)
-
-        if (!requestObject.containsKey(FeatureStringEnum.ORGANISM_NAME.value)) {
-            returnObject.put("error", "/addOrganismWithSequence requires '${FeatureStringEnum.ORGANISM_NAME.value}'.")
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-            render returnObject as JSON
-            return
-        }
-
-        if (organismDataFile == null && sequenceDataFile == null) {
-            returnObject.put("error", "/addOrganismWithSequence requires '${FeatureStringEnum.ORGANISM_DATA.value}' or ${FeatureStringEnum.SEQUENCE_DATA.value}.")
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-            render returnObject as JSON
-            return
-        }
-
-        if (organismDataFile != null && sequenceDataFile != null) {
-            returnObject.put("error", "/addOrganismWithSequence requires ONLY one (not both) of '${FeatureStringEnum.ORGANISM_DATA.value}' or ${FeatureStringEnum.SEQUENCE_DATA.value}.")
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-            render returnObject as JSON
-            return
-        }
-
-        try {
-            if (permissionService.isUserGlobalAdmin(permissionService.getCurrentUser(requestObject))) {
-                String organismName = requestObject.get(FeatureStringEnum.ORGANISM_NAME.value)
-                def organism = new Organism(
-                        commonName: organismName,
-                        directory: trackService.commonDataDirectory,
-                        blatdb: requestObject.blatdb ?: "",
-                        genus: requestObject.genus ?: "",
-                        obsolete: false,
-                        valid: true,
-                        species: requestObject.species ?: "",
-                        metadata: requestObject.metadata ?: "",
-                        publicMode: requestObject.publicMode ?: false,
-                        nonDefaultTranslationTable: requestObject.nonDefaultTranslationTable ?: null,
-                        dataAddedViaWebServices: true
-                ).save(failOnError: true, flush: true, insert: true)
-                def currentUser = permissionService.currentUser
-                organism.addMetaData("creator", currentUser.id.toString())
-                File directory = trackService.getExtendedDataDirectory(organism)
-
-                if (directory.mkdirs() && directory.setWritable(true)) {
-
-                    if (organismDataFile) {
-                        log.debug "Successfully created directory ${directory.absolutePath}"
-                        File archiveFile = new File(organismDataFile.getOriginalFilename())
-                        organismDataFile.transferTo(archiveFile)
-                        try {
-                            fileService.decompress(archiveFile, directory.absolutePath, null, false)
-                            log.debug "Adding ${organismName} with directory: ${directory.absolutePath}"
-                            organism.directory = directory.absolutePath
-
-                            // if directory has a "searchDatabaseData" directory then any file in that that is a 2bit is the blatdb
-                            String blatdb = organismService.findBlatDB(directory.absolutePath)
-                            if(blatdb){
-                                organism.blatdb = blatdb
-                            }
-                            organism.save()
-                            sequenceService.loadRefSeqs(organism)
-                            preferenceService.setCurrentOrganism(permissionService.getCurrentUser(requestObject), organism, clientToken)
-                            findAllOrganisms()
-                        }
-                        catch (IOException e) {
-                            log.error e.printStackTrace()
-                            returnObject.put("error", e.message)
-                            organism.delete()
-                            render returnObject
-                            return
-                        }
-                    } else if (sequenceDataFile) {
-
-                        SequenceTypeEnum sequenceTypeEnum = SequenceTypeEnum.getSequenceTypeForFile(sequenceDataFile.getOriginalFilename())
-                        if (sequenceTypeEnum == null) {
-                            returnObject.put("error", "Bad file input: " + sequenceDataFile.originalFilename)
-                            render returnObject
-                            return
-                        }
-
-                        // TODO: put this in a temp directory? ? ?
-                        try {
-                            File rawDirectory = new File(directory.absolutePath + "/seq")
-                            assert rawDirectory.mkdir()
-                            assert rawDirectory.setWritable(true)
-                            File archiveFile = new File(rawDirectory.absolutePath + File.separator + organismName + "." + sequenceTypeEnum.suffix)
-                            sequenceDataFile.transferTo(archiveFile)
-                            organism.directory = directory.absolutePath
-
-                            // decompress if need be
-                            if (sequenceTypeEnum.compression != null) {
-                                List<String> fileNames = fileService.decompress(archiveFile, rawDirectory.absolutePath)
-                                // move the filenames to the same original name, let's assume there is one
-                                File oldFile = new File(fileNames[0])
-                                assert oldFile.exists()
-//                                assert oldFile.absolutePath.endsWith(".fa")
-                                File newFile = new File(rawDirectory.absolutePath + File.separator + organismName + ".fa")
-                                oldFile.renameTo(newFile)
-                            }
-
-                            println "search db file : ${searchDatabaseDataFile.name} ${searchDatabaseDataFile.size} ${searchDatabaseDataFile.originalFilename} ${searchDatabaseDataFile.contentType}"
-                            if(searchDatabaseDataFile!=null){
-                                File searchDirectory = new File(directory.absolutePath + "/search")
-                                assert searchDirectory.mkdir()
-                                assert searchDirectory.setWritable(true)
-                                File searchFile = new File(searchDirectory.absolutePath + File.separator + searchDatabaseDataFile.originalFilename)
-                                println "search file: ${searchFile.absolutePath}"
-                                searchDatabaseDataFile.transferTo(searchFile)
-                                organism.blatdb = searchFile.absolutePath
-                            }
-
-                            organism.save()
-
-
-                            String trackListJson = TrackDefaults.getIndexedFastaConfig(organismName)
-                            File trackListFile = new File(directory.absolutePath + File.separator + "trackList.json")
-                            trackListFile.write(trackListJson)
-
-                            // create an index
-                            Path path = FileSystems.getDefault().getPath(rawDirectory.absolutePath + File.separator + organismName + ".fa")
-                            FastaSequenceIndexCreator.create(path, true)
-
-                            sequenceService.loadRefSeqs(organism)
-                            preferenceService.setCurrentOrganism(permissionService.getCurrentUser(requestObject), organism, clientToken)
-                            findAllOrganisms()
-                        }
-                        catch (IOException e) {
-                            log.error e.printStackTrace()
-                            returnObject.put("error", e.message)
-                            organism.delete()
-                        }
-
-                    } else {
-                        throw new RuntimeException("Not sure how we got here ")
-                    }
-                } else {
-                    log.error "Could not create ${directory.absolutePath}"
-                    returnObject.put("error", "Could not create ${directory.absolutePath}.")
-                    organism.delete()
-                }
-            } else {
-                log.error "username ${requestObject.get(FeatureStringEnum.USERNAME.value)} is not authorized to add organisms"
-                returnObject.put("error", "username ${requestObject.get(FeatureStringEnum.USERNAME.value)} is not authorized to add organisms.")
-            }
-        }
-        catch (e) {
-            log.error e.printStackTrace()
-            returnObject.put("error", e.message)
-        }
-
-        render returnObject as JSON
+    if (!requestObject.containsKey(FeatureStringEnum.TRACK_LABEL.value)) {
+      returnObject.put("error", "/removeTrackFromOrganism requires '${FeatureStringEnum.TRACK_LABEL.value}'.")
+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+      render returnObject as JSON
+      return
     }
 
-    @RestApiMethod(description = "Removes an added track from an existing organism returning a JSON object containing all tracks for the current organism.", path = "/organism/removeTrackFromOrganism", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
-            , @RestApiParam(name = "trackLabel", type = "string", paramType = RestApiParamType.QUERY, description = "Name of track")
-    ])
-    @Transactional
-    def removeTrackFromOrganism() {
-        JSONObject returnObject = new JSONObject()
-        JSONObject requestObject = permissionService.handleInput(request, params)
-        log.info "removing track from organism with ${requestObject}"
-
-        if (!requestObject.containsKey(FeatureStringEnum.ORGANISM.value)) {
-            returnObject.put("error", "/removeTrackFromOrganism requires '${FeatureStringEnum.ORGANISM.value}'.")
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-            render returnObject as JSON
-            return
+    try {
+      permissionService.checkPermissions(requestObject, PermissionEnum.ADMINISTRATE)
+      Organism organism = preferenceService.getOrganismForTokenInDB(requestObject.get(FeatureStringEnum.ORGANISM.value)?.id)
+      // find in the extended track list and remove
+      File extendedDirectory = trackService.getExtendedDataDirectory(organism)
+      if (!extendedDirectory.exists()) {
+        returnObject.put("error", "No temporary directory found to remove tracks from ${extendedDirectory.absolutePath}")
+        render returnObject as JSON
+        return
+      }
+      File extendedTrackListJsonFile
+      if (new File(extendedDirectory.absolutePath + File.separator + TrackService.EXTENDED_TRACKLIST).exists()) {
+        extendedTrackListJsonFile = new File(extendedDirectory.absolutePath + File.separator + TrackService.EXTENDED_TRACKLIST)
+      } else {
+        if (organism.directory.contains(trackService.commonDataDirectory)) {
+          extendedTrackListJsonFile = new File(organism.directory + File.separator + trackService.TRACKLIST)
+        } else {
+          throw new RuntimeException("Can not delete tracks from a non-temporary directory: ${extendedTrackListJsonFile.absolutePath}")
         }
+      }
 
-        if (!requestObject.containsKey(FeatureStringEnum.TRACK_LABEL.value)) {
-            returnObject.put("error", "/removeTrackFromOrganism requires '${FeatureStringEnum.TRACK_LABEL.value}'.")
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-            render returnObject as JSON
-            return
-        }
+      JSONObject extendedTrackListObject = JSON.parse(extendedTrackListJsonFile.text)
+      JSONArray extendedTracksArray = extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
 
-        try {
-            permissionService.checkPermissions(requestObject, PermissionEnum.ADMINISTRATE)
-            Organism organism = preferenceService.getOrganismForTokenInDB(requestObject.get(FeatureStringEnum.ORGANISM.value)?.id)
-            // find in the extended track list and remove
-            File extendedDirectory = trackService.getExtendedDataDirectory(organism)
-            if (!extendedDirectory.exists()) {
-                returnObject.put("error", "No temporary directory found to remove tracks from ${extendedDirectory.absolutePath}")
-                render returnObject as JSON
-                return
-            }
-            File extendedTrackListJsonFile
-            if (new File(extendedDirectory.absolutePath + File.separator + TrackService.EXTENDED_TRACKLIST).exists()) {
-                extendedTrackListJsonFile = new File(extendedDirectory.absolutePath + File.separator + TrackService.EXTENDED_TRACKLIST)
-            } else {
-                if (organism.directory.contains(trackService.commonDataDirectory)) {
-                    extendedTrackListJsonFile = new File(organism.directory + File.separator + trackService.TRACKLIST)
-                } else {
-                    throw new RuntimeException("Can not delete tracks from a non-temporary directory: ${extendedTrackListJsonFile.absolutePath}")
-                }
-            }
-
-            JSONObject extendedTrackListObject = JSON.parse(extendedTrackListJsonFile.text)
-            JSONArray extendedTracksArray = extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
-
-            String trackLabel = requestObject.getString(FeatureStringEnum.TRACK_LABEL.value)
-            JSONObject trackObject = trackService.findTrackFromArray(extendedTracksArray, trackLabel)
-            extendedTracksArray = trackService.removeTrackFromArray(extendedTracksArray, trackLabel)
-            extendedTrackListObject.put(FeatureStringEnum.TRACKS.value, extendedTracksArray)
-            extendedTrackListJsonFile.write(extendedTrackListObject.toString())
+      String trackLabel = requestObject.getString(FeatureStringEnum.TRACK_LABEL.value)
+      JSONObject trackObject = trackService.findTrackFromArray(extendedTracksArray, trackLabel)
+      extendedTracksArray = trackService.removeTrackFromArray(extendedTracksArray, trackLabel)
+      extendedTrackListObject.put(FeatureStringEnum.TRACKS.value, extendedTracksArray)
+      extendedTrackListJsonFile.write(extendedTrackListObject.toString())
 
-            TrackTypeEnum trackTypeEnum = TrackTypeEnum.valueOf(trackObject.apollo.type)
-            // delete any files with the patterns of key.suffix and key.suffixIndex
+      TrackTypeEnum trackTypeEnum = TrackTypeEnum.valueOf(trackObject.apollo.type)
+      // delete any files with the patterns of key.suffix and key.suffixIndex
 
-            for (def suffix in trackTypeEnum.suffix) {
-                File fileToDelete = new File(extendedDirectory.absolutePath + File.separator + "raw/" + trackObject.label.replaceAll(" ", "_") + ".${suffix}")
-                if (fileToDelete.exists()) {
-                    assert fileToDelete.delete()
-                }
-            }
-            for (def suffix in trackTypeEnum.suffixIndex) {
-                File fileToDelete = new File(extendedDirectory.absolutePath + File.separator + "raw/" + trackObject.label.replaceAll(" ", "_") + ".${suffix}")
-                if (fileToDelete.exists()) {
-                    assert fileToDelete.delete()
-                }
-            }
-            render returnObject as JSON
-        } catch (Exception ce) {
-            log.error ce.message
-            returnObject.put("error", ce.message)
-            render returnObject as JSON
-            return
+      for (def suffix in trackTypeEnum.suffix) {
+        File fileToDelete = new File(extendedDirectory.absolutePath + File.separator + "raw/" + trackObject.label.replaceAll(" ", "_") + ".${suffix}")
+        if (fileToDelete.exists()) {
+          assert fileToDelete.delete()
         }
-
+      }
+      for (def suffix in trackTypeEnum.suffixIndex) {
+        File fileToDelete = new File(extendedDirectory.absolutePath + File.separator + "raw/" + trackObject.label.replaceAll(" ", "_") + ".${suffix}")
+        if (fileToDelete.exists()) {
+          assert fileToDelete.delete()
+        }
+      }
+      render returnObject as JSON
+    } catch (Exception ce) {
+      log.error ce.message
+      returnObject.put("error", ce.message)
+      render returnObject as JSON
+      return
     }
 
+  }
+
+
+  @RestApiMethod(description = "Adds a track to an existing organism returning a JSON object containing all tracks for the current organism.", path = "/organism/addTrackToOrganism", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
+    , @RestApiParam(name = "trackData", type = "string", paramType = RestApiParamType.QUERY, description = "zip or tar.gz compressed track data")
+    , @RestApiParam(name = "trackFile", type = "string", paramType = RestApiParamType.QUERY, description = "track file (*.bam, *.vcf, *.bw, *gff)")
+    , @RestApiParam(name = "trackFileIndex", type = "string", paramType = RestApiParamType.QUERY, description = "index (*.bai, *.tbi)")
+    , @RestApiParam(name = "trackConfig", type = "string", paramType = RestApiParamType.QUERY, description = "Track configuration (JBrowse JSON)")
+  ])
+  @Transactional
+  def addTrackToOrganism() {
+
+    JSONObject returnObject = new JSONObject()
+    JSONObject requestObject = permissionService.handleInput(request, params)
+    String pathToJBrowseBinaries = servletContext.getRealPath("/jbrowse/bin")
+    log.debug "path to JBrowse binaries ${pathToJBrowseBinaries}"
+
+    if (!requestObject.containsKey(FeatureStringEnum.ORGANISM.value)) {
+      returnObject.put("error", "/addTrackToOrganism requires '${FeatureStringEnum.ORGANISM.value}'.")
+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+      render returnObject as JSON
+      return
+    }
 
-    @RestApiMethod(description = "Adds a track to an existing organism returning a JSON object containing all tracks for the current organism.", path = "/organism/addTrackToOrganism", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
-            , @RestApiParam(name = "trackData", type = "string", paramType = RestApiParamType.QUERY, description = "zip or tar.gz compressed track data")
-            , @RestApiParam(name = "trackFile", type = "string", paramType = RestApiParamType.QUERY, description = "track file (*.bam, *.vcf, *.bw, *gff)")
-            , @RestApiParam(name = "trackFileIndex", type = "string", paramType = RestApiParamType.QUERY, description = "index (*.bai, *.tbi)")
-            , @RestApiParam(name = "trackConfig", type = "string", paramType = RestApiParamType.QUERY, description = "Track configuration (JBrowse JSON)")
-    ])
-    @Transactional
-    def addTrackToOrganism() {
-
-        JSONObject returnObject = new JSONObject()
-        JSONObject requestObject = permissionService.handleInput(request, params)
-        String pathToJBrowseBinaries = servletContext.getRealPath("/jbrowse/bin")
-        log.debug "path to JBrowse binaries ${pathToJBrowseBinaries}"
-
-        if (!requestObject.containsKey(FeatureStringEnum.ORGANISM.value)) {
-            returnObject.put("error", "/addTrackToOrganism requires '${FeatureStringEnum.ORGANISM.value}'.")
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-            render returnObject as JSON
-            return
-        }
-
-        if (requestObject.containsKey(FeatureStringEnum.TRACK_DATA.value) && requestObject.containsKey("trackFile")) {
-            returnObject.put("error", "Both 'trackData' and 'trackFile' specified; /addTrackToOrganism requires either '${FeatureStringEnum.TRACK_DATA.value}' or 'trackFile'.")
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-            render returnObject as JSON
-            return
-        }
+    if (requestObject.containsKey(FeatureStringEnum.TRACK_DATA.value) && requestObject.containsKey("trackFile")) {
+      returnObject.put("error", "Both 'trackData' and 'trackFile' specified; /addTrackToOrganism requires either '${FeatureStringEnum.TRACK_DATA.value}' or 'trackFile'.")
+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+      render returnObject as JSON
+      return
+    }
 
-        if (!requestObject.containsKey(FeatureStringEnum.TRACK_DATA.value) && !requestObject.containsKey("trackFile")) {
-            returnObject.put("error", "/addTrackToOrganism requires either '${FeatureStringEnum.TRACK_DATA.value}' or 'trackFile'.")
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-            render returnObject as JSON
-            return
-        }
+    if (!requestObject.containsKey(FeatureStringEnum.TRACK_DATA.value) && !requestObject.containsKey("trackFile")) {
+      returnObject.put("error", "/addTrackToOrganism requires either '${FeatureStringEnum.TRACK_DATA.value}' or 'trackFile'.")
+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+      render returnObject as JSON
+      return
+    }
 
-        if (!requestObject.containsKey(FeatureStringEnum.TRACK_CONFIG.value)) {
-            returnObject.put("error", "/addTrackToOrganism requires '${FeatureStringEnum.TRACK_CONFIG.value}'.")
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-            render returnObject as JSON
-            return
-        }
+    if (!requestObject.containsKey(FeatureStringEnum.TRACK_CONFIG.value)) {
+      returnObject.put("error", "/addTrackToOrganism requires '${FeatureStringEnum.TRACK_CONFIG.value}'.")
+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+      render returnObject as JSON
+      return
+    }
 
-        JSONObject trackConfigObject
-        try {
-            trackConfigObject = JSON.parse(params.get(FeatureStringEnum.TRACK_CONFIG.value) as String) as JSONObject
-        } catch (ConverterException ce) {
-            log.error ce.message
-            returnObject.put("error", ce.message)
-            render returnObject as JSON
-            return
-        }
+    JSONObject trackConfigObject
+    try {
+      trackConfigObject = JSON.parse(params.get(FeatureStringEnum.TRACK_CONFIG.value) as String) as JSONObject
+    } catch (ConverterException ce) {
+      log.error ce.message
+      returnObject.put("error", ce.message)
+      render returnObject as JSON
+      return
+    }
 
-        if (!trackConfigObject.containsKey(FeatureStringEnum.LABEL.value) || !trackConfigObject.containsKey(FeatureStringEnum.URL_TEMPLATE.value)) {
-            log.error "trackConfig requires '${FeatureStringEnum.LABEL.value}' and '${FeatureStringEnum.URL_TEMPLATE.value}'"
-            returnObject.put("error", "trackConfig requires '${FeatureStringEnum.LABEL.value}' and '${FeatureStringEnum.URL_TEMPLATE.value}'.")
-            render returnObject as JSON
-            return
-        }
+    if (!trackConfigObject.containsKey(FeatureStringEnum.LABEL.value) || !trackConfigObject.containsKey(FeatureStringEnum.URL_TEMPLATE.value)) {
+      log.error "trackConfig requires '${FeatureStringEnum.LABEL.value}' and '${FeatureStringEnum.URL_TEMPLATE.value}'"
+      returnObject.put("error", "trackConfig requires '${FeatureStringEnum.LABEL.value}' and '${FeatureStringEnum.URL_TEMPLATE.value}'.")
+      render returnObject as JSON
+      return
+    }
 
-        try {
-            permissionService.checkPermissions(requestObject, PermissionEnum.ADMINISTRATE)
+    try {
+      permissionService.checkPermissions(requestObject, PermissionEnum.ADMINISTRATE)
 //            log.debug "user ${requestObject.get(FeatureStringEnum.USERNAME.value)} is admin"
-            Organism organism = preferenceService.getOrganismForTokenInDB(requestObject.get(FeatureStringEnum.ORGANISM.value))
-
-            if (organism) {
-                log.debug "Adding track to organism: ${organism.commonName}"
-                String organismDirectoryName = organism.directory
-                File organismDirectory = new File(organismDirectoryName)
-                File commonDataDirectory = new File(trackService.commonDataDirectory)
-
-                CommonsMultipartFile trackDataFile = request.getFile(FeatureStringEnum.TRACK_DATA.value)
-                CommonsMultipartFile trackFile = request.getFile(FeatureStringEnum.TRACK_FILE.value)
-                CommonsMultipartFile trackFileIndex = request.getFile(FeatureStringEnum.TRACK_FILE_INDEX.value)
-
-                if (organismDirectory.getParentFile().getCanonicalPath() == commonDataDirectory.getCanonicalPath()) {
-                    // organism data is in common data directory
-                    log.info "organism data is in common data directory"
-                    File trackListJsonFile = new File(organism.directory + File.separator + trackService.TRACKLIST)
-                    JSONObject trackListObject = JSON.parse(trackListJsonFile.text)
-                    JSONArray tracksArray = trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
-
-                    if (trackDataFile) {
-                        // check if track exists in trackList.json
-                        if (trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) == null) {
-                            // add track config to trackList.json
-                            tracksArray.add(trackConfigObject)
-                            // unpack track data into organism directory
-                            File archiveFile = new File(trackDataFile.getOriginalFilename())
-                            trackDataFile.transferTo(archiveFile)
-                            try {
-                                String urlTemplate = trackConfigObject.get(FeatureStringEnum.URL_TEMPLATE.value)
-                                String trackDirectoryName = urlTemplate.split("/").first()
-                                String path = organismDirectoryName + File.separator + trackDirectoryName
-                                fileService.decompress(archiveFile, path, trackConfigObject.get(FeatureStringEnum.LABEL.value), true)
-
-                                // write to trackList.json
-                                def trackListJsonWriter = trackListJsonFile.newWriter()
-                                trackListJsonWriter << trackListObject.toString(4)
-                                trackListJsonWriter.close()
-                                returnObject.put(FeatureStringEnum.TRACKS.value, tracksArray)
-                            }
-                            catch (IOException e) {
-                                log.error e.printStackTrace()
-                                returnObject.put("error", e.message)
-                            }
-                        } else {
-                            log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}"
-                            returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}.")
-                        }
-                    } else {
-                        // trackDataFile is null; use data from trackFile and trackFileIndex, if available
-                        if (trackFile) {
-                            if (trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) == null) {
-                                // add track config to trackList.json
-                                tracksArray.add(trackConfigObject)
-                                try {
-                                    String urlTemplate = trackConfigObject.get(FeatureStringEnum.URL_TEMPLATE.value)
-                                    String trackDirectoryName = urlTemplate.split("/").first()
-                                    String path = organismDirectoryName + File.separator + trackDirectoryName
+      Organism organism = preferenceService.getOrganismForTokenInDB(requestObject.get(FeatureStringEnum.ORGANISM.value))
+
+      if (organism) {
+        log.debug "Adding track to organism: ${organism.commonName}"
+        String organismDirectoryName = organism.directory
+        File organismDirectory = new File(organismDirectoryName)
+        File commonDataDirectory = new File(trackService.commonDataDirectory)
+
+        CommonsMultipartFile trackDataFile = request.getFile(FeatureStringEnum.TRACK_DATA.value)
+        CommonsMultipartFile trackFile = request.getFile(FeatureStringEnum.TRACK_FILE.value)
+        CommonsMultipartFile trackFileIndex = request.getFile(FeatureStringEnum.TRACK_FILE_INDEX.value)
+
+        if (organismDirectory.getParentFile().getCanonicalPath() == commonDataDirectory.getCanonicalPath()) {
+          // organism data is in common data directory
+          log.info "organism data is in common data directory"
+          File trackListJsonFile = new File(organism.directory + File.separator + trackService.TRACKLIST)
+          JSONObject trackListObject = JSON.parse(trackListJsonFile.text)
+          JSONArray tracksArray = trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
+
+          if (trackDataFile) {
+            // check if track exists in trackList.json
+            if (trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) == null) {
+              // add track config to trackList.json
+              tracksArray.add(trackConfigObject)
+              // unpack track data into organism directory
+              File archiveFile = new File(trackDataFile.getOriginalFilename())
+              trackDataFile.transferTo(archiveFile)
+              try {
+                String urlTemplate = trackConfigObject.get(FeatureStringEnum.URL_TEMPLATE.value)
+                String trackDirectoryName = urlTemplate.split("/").first()
+                String path = organismDirectoryName + File.separator + trackDirectoryName
+                fileService.decompress(archiveFile, path, trackConfigObject.get(FeatureStringEnum.LABEL.value), true)
+
+                // write to trackList.json
+                def trackListJsonWriter = trackListJsonFile.newWriter()
+                trackListJsonWriter << trackListObject.toString(4)
+                trackListJsonWriter.close()
+                returnObject.put(FeatureStringEnum.TRACKS.value, tracksArray)
+              }
+              catch (IOException e) {
+                log.error e.printStackTrace()
+                returnObject.put("error", e.message)
+              }
+            } else {
+              log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}"
+              returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}.")
+            }
+          } else {
+            // trackDataFile is null; use data from trackFile and trackFileIndex, if available
+            if (trackFile) {
+              if (trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) == null) {
+                // add track config to trackList.json
+                tracksArray.add(trackConfigObject)
+                try {
+                  String urlTemplate = trackConfigObject.get(FeatureStringEnum.URL_TEMPLATE.value)
+                  String trackDirectoryName = urlTemplate.split("/").first()
+                  String path = organismDirectoryName + File.separator + trackDirectoryName
 //                                    fileService.store(trackFile, path)
-                                    TrackTypeEnum trackTypeEnum = org.bbop.apollo.gwt.shared.track.TrackTypeEnum.valueOf(trackConfigObject.apollo.type)
-                                    String newFileName = trackTypeEnum ? trackConfigObject.key + "." + trackTypeEnum.suffix[0] : trackFile.originalFilename
-                                    File destinationFile = fileService.storeWithNewName(trackFile, path, trackConfigObject.key, newFileName)
-                                    if (trackFileIndex.originalFilename) {
-                                        String newFileNameIndex = trackTypeEnum ? trackConfigObject.key + "." + trackTypeEnum.suffixIndex[0] : trackFileIndex.originalFilename
+                  TrackTypeEnum trackTypeEnum = org.bbop.apollo.gwt.shared.track.TrackTypeEnum.valueOf(trackConfigObject.apollo.type)
+                  String newFileName = trackTypeEnum ? trackConfigObject.key + "." + trackTypeEnum.suffix[0] : trackFile.originalFilename
+                  File destinationFile = fileService.storeWithNewName(trackFile, path, trackConfigObject.key, newFileName)
+                  if (trackFileIndex.originalFilename) {
+                    String newFileNameIndex = trackTypeEnum ? trackConfigObject.key + "." + trackTypeEnum.suffixIndex[0] : trackFileIndex.originalFilename
 //                                        fileService.store(trackFileIndex, path)
-                                        fileService.storeWithNewName(trackFileIndex, path, trackConfigObject.key, newFileNameIndex)
-                                    }
-
-                                    if (trackTypeEnum == TrackTypeEnum.GFF3_JSON || trackTypeEnum == TrackTypeEnum.GFF3_JSON_CANVAS) {
-                                        trackService.generateJSONForGff3(destinationFile, organismDirectoryName, pathToJBrowseBinaries,trackConfigObject.apollo.topType)
-                                    }
-
-                                    // write to trackList.json
-                                    def trackListJsonWriter = trackListJsonFile.newWriter()
-                                    trackListJsonWriter << trackListObject.toString(4)
-                                    trackListJsonWriter.close()
-                                    returnObject.put(FeatureStringEnum.TRACKS.value, tracksArray)
-                                }
-                                catch (IOException e) {
-                                    log.error e.printStackTrace()
-                                    returnObject.put("error", e.message)
-                                }
-                            } else {
-                                log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}"
-                                returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}.")
-                            }
-                        }
-                    }
-                } else {
-                    // organism data is somewhere on the server where we don't want to modify anything
-                    File trackListJsonFile = new File(organism.directory + File.separator + trackService.TRACKLIST)
-                    JSONObject trackListObject = JSON.parse(trackListJsonFile.text)
-                    JSONArray tracksArray = trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
-                    if (trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) != null) {
-                        log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}"
-                        returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}.")
-                    } else {
-                        File extendedDirectory = trackService.getExtendedDataDirectory(organism)
-                        if (!extendedDirectory.exists()) {
-                            // make a new extended organism directory in common data directory
-                            if (extendedDirectory.mkdirs() && extendedDirectory.setWritable(true)) {
-                                // write extendedTrackList.json
-                                File extendedTrackListJsonFile = trackService.getExtendedTrackList(organism)
-                                def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
-                                trackListJsonWriter << "{'${FeatureStringEnum.TRACKS.value}':[]}"
-                                trackListJsonWriter.close()
-                            } else {
-                                log.error "Cannot create directory ${extendedDirectory.absolutePath}"
-                                returnObject.put("error", "Cannot create directory ${extendedDirectory.absolutePath}.")
-                            }
-                        }
-
-                        if (trackDataFile) {
-                            File extendedTrackListJsonFile = trackService.getExtendedTrackList(organism)
-                            JSONObject extendedTrackListObject = JSON.parse(extendedTrackListJsonFile.text)
-                            JSONArray extendedTracksArray = extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
-                            // check if track exists in extendedTrackList.json
-                            if (trackService.findTrackFromArray(extendedTracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) != null) {
-                                log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${extendedDirectory.absolutePath}/${trackService.EXTENDED_TRACKLIST}"
-                                returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${extendedDirectory.absolutePath}/${trackService.EXTENDED_TRACKLIST}.")
-                            } else {
-                                // add track config to extendedTrackList.json
-                                extendedTracksArray.add(trackConfigObject)
-                                // unpack track data into organism directory
-                                File archiveFile = new File(trackDataFile.getOriginalFilename())
-                                trackDataFile.transferTo(archiveFile)
-                                try {
-                                    String urlTemplate = trackConfigObject.get(FeatureStringEnum.URL_TEMPLATE.value)
-                                    String trackDirectoryName = urlTemplate.split("/").first()
-                                    String path = extendedDirectory.absolutePath + File.separator + trackDirectoryName
-                                    fileService.decompress(archiveFile, path, trackConfigObject.get(FeatureStringEnum.LABEL.value), true)
-
-                                    // write to trackList.json
-                                    def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
-                                    trackListJsonWriter << extendedTrackListObject.toString(4)
-                                    trackListJsonWriter.close()
-                                    returnObject.put(FeatureStringEnum.TRACKS.value, tracksArray + extendedTracksArray)
-                                }
-                                catch (IOException e) {
-                                    log.error e.printStackTrace()
-                                    returnObject.put("error", e.message)
-                                }
-                            }
-                        } else {
-                            if (trackFile) {
-                                if (trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) == null) {
-                                    // add track config to trackList.json
-                                    File extendedTrackListJsonFile = trackService.getExtendedTrackList(organism)
-                                    if (!extendedTrackListJsonFile.exists()) {
-                                        def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
-                                        trackListJsonWriter << "{'${FeatureStringEnum.TRACKS.value}':[]}"
-                                        trackListJsonWriter.close()
-                                    } else {
-                                        log.info "FILE EXISTS, so nothing to do ${extendedTrackListJsonFile.text}"
-                                    }
-                                    JSONObject extendedTrackListObject = JSON.parse(extendedTrackListJsonFile.text)
-                                    JSONArray extendedTracksArray = extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
-                                    if (trackService.findTrackFromArray(extendedTracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) != null) {
-                                        log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}"
-                                        returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}.")
-                                    } else {
-                                        try {
-                                            String path = extendedDirectory.absolutePath + File.separator + "raw"
-                                            TrackTypeEnum trackTypeEnum = org.bbop.apollo.gwt.shared.track.TrackTypeEnum.valueOf(trackConfigObject.apollo.type)
-
-                                            // TODO: if the suffix is 0 does not end with gzip, then we need to run it through the decrompressor
-                                            String newFileName = trackTypeEnum ? trackConfigObject.key + "." + trackTypeEnum.suffix[0] : trackFile.originalFilename
+                    fileService.storeWithNewName(trackFileIndex, path, trackConfigObject.key, newFileNameIndex)
+                  }
+
+                  if (trackTypeEnum == TrackTypeEnum.GFF3_JSON || trackTypeEnum == TrackTypeEnum.GFF3_JSON_CANVAS) {
+                    trackService.generateJSONForGff3(destinationFile, organismDirectoryName, pathToJBrowseBinaries, trackConfigObject.apollo.topType)
+                  }
+
+                  // write to trackList.json
+                  def trackListJsonWriter = trackListJsonFile.newWriter()
+                  trackListJsonWriter << trackListObject.toString(4)
+                  trackListJsonWriter.close()
+                  returnObject.put(FeatureStringEnum.TRACKS.value, tracksArray)
+                }
+                catch (IOException e) {
+                  log.error e.printStackTrace()
+                  returnObject.put("error", e.message)
+                }
+              } else {
+                log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}"
+                returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}.")
+              }
+            }
+          }
+        } else {
+          // organism data is somewhere on the server where we don't want to modify anything
+          File trackListJsonFile = new File(organism.directory + File.separator + trackService.TRACKLIST)
+          JSONObject trackListObject = JSON.parse(trackListJsonFile.text)
+          JSONArray tracksArray = trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
+          if (trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) != null) {
+            log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}"
+            returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}.")
+          } else {
+            File extendedDirectory = trackService.getExtendedDataDirectory(organism)
+            if (!extendedDirectory.exists()) {
+              // make a new extended organism directory in common data directory
+              if (extendedDirectory.mkdirs() && extendedDirectory.setWritable(true)) {
+                // write extendedTrackList.json
+                File extendedTrackListJsonFile = trackService.getExtendedTrackList(organism)
+                def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
+                trackListJsonWriter << "{'${FeatureStringEnum.TRACKS.value}':[]}"
+                trackListJsonWriter.close()
+              } else {
+                log.error "Cannot create directory ${extendedDirectory.absolutePath}"
+                returnObject.put("error", "Cannot create directory ${extendedDirectory.absolutePath}.")
+              }
+            }
+
+            if (trackDataFile) {
+              File extendedTrackListJsonFile = trackService.getExtendedTrackList(organism)
+              JSONObject extendedTrackListObject = JSON.parse(extendedTrackListJsonFile.text)
+              JSONArray extendedTracksArray = extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
+              // check if track exists in extendedTrackList.json
+              if (trackService.findTrackFromArray(extendedTracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) != null) {
+                log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${extendedDirectory.absolutePath}/${trackService.EXTENDED_TRACKLIST}"
+                returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${extendedDirectory.absolutePath}/${trackService.EXTENDED_TRACKLIST}.")
+              } else {
+                // add track config to extendedTrackList.json
+                extendedTracksArray.add(trackConfigObject)
+                // unpack track data into organism directory
+                File archiveFile = new File(trackDataFile.getOriginalFilename())
+                trackDataFile.transferTo(archiveFile)
+                try {
+                  String urlTemplate = trackConfigObject.get(FeatureStringEnum.URL_TEMPLATE.value)
+                  String trackDirectoryName = urlTemplate.split("/").first()
+                  String path = extendedDirectory.absolutePath + File.separator + trackDirectoryName
+                  fileService.decompress(archiveFile, path, trackConfigObject.get(FeatureStringEnum.LABEL.value), true)
+
+                  // write to trackList.json
+                  def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
+                  trackListJsonWriter << extendedTrackListObject.toString(4)
+                  trackListJsonWriter.close()
+                  returnObject.put(FeatureStringEnum.TRACKS.value, tracksArray + extendedTracksArray)
+                }
+                catch (IOException e) {
+                  log.error e.printStackTrace()
+                  returnObject.put("error", e.message)
+                }
+              }
+            } else {
+              if (trackFile) {
+                if (trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) == null) {
+                  // add track config to trackList.json
+                  File extendedTrackListJsonFile = trackService.getExtendedTrackList(organism)
+                  if (!extendedTrackListJsonFile.exists()) {
+                    def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
+                    trackListJsonWriter << "{'${FeatureStringEnum.TRACKS.value}':[]}"
+                    trackListJsonWriter.close()
+                  } else {
+                    log.info "FILE EXISTS, so nothing to do ${extendedTrackListJsonFile.text}"
+                  }
+                  JSONObject extendedTrackListObject = JSON.parse(extendedTrackListJsonFile.text)
+                  JSONArray extendedTracksArray = extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
+                  if (trackService.findTrackFromArray(extendedTracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value)) != null) {
+                    log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}"
+                    returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}.")
+                  } else {
+                    try {
+                      String path = extendedDirectory.absolutePath + File.separator + "raw"
+                      TrackTypeEnum trackTypeEnum = org.bbop.apollo.gwt.shared.track.TrackTypeEnum.valueOf(trackConfigObject.apollo.type)
+
+                      // TODO: if the suffix is 0 does not end with gzip, then we need to run it through the decrompressor
+                      String newFileName = trackTypeEnum ? trackConfigObject.key + "." + trackTypeEnum.suffix[0] : trackFile.originalFilename
 //                                            File destinationFile
 //                                            if( (trackTypeEnum == TrackTypeEnum.GFF3_JSON || trackTypeEnum == TrackTypeEnum.GFF3_JSON_CANVAS) && trackFile.originalFilename.endsWith(".gz")){
 //                                                File archiveFile = new File(trackFile.originalFilename)
@@ -728,728 +725,743 @@ class OrganismController {
 //                                            destinationFile = fileService.storeWithNewName(trackFile, path, trackConfigObject.key, newFileName)
 //                                            }
 
-                                            File destinationFile = fileService.storeWithNewName(trackFile, path, trackConfigObject.key, newFileName)
-                                            if (trackFileIndex.getOriginalFilename()) {
-                                                String newFileNameIndex = trackTypeEnum ? trackConfigObject.key + "." + trackTypeEnum.suffixIndex[0] : trackFileIndex.originalFilename
-                                                fileService.storeWithNewName(trackFileIndex, path, trackConfigObject.key, newFileNameIndex)
-                                            }
-
-                                            if (trackTypeEnum == TrackTypeEnum.GFF3_JSON || trackTypeEnum == TrackTypeEnum.GFF3_JSON_CANVAS) {
-                                                trackService.generateJSONForGff3(destinationFile, extendedDirectory.absolutePath, pathToJBrowseBinaries,trackConfigObject.apollo.topType)
-                                            }
-
-                                            extendedTracksArray.add(trackConfigObject)
-                                            extendedTrackListObject.put(FeatureStringEnum.TRACKS.value, extendedTracksArray)
-
-                                            // write to trackList.json
-                                            def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
-                                            trackListJsonWriter << extendedTrackListObject.toString(4)
-                                            trackListJsonWriter.close()
-                                            returnObject.put(FeatureStringEnum.TRACKS.value, tracksArray)
-                                        }
-                                        catch (IOException e) {
-                                            log.error e.printStackTrace()
-                                            returnObject.put("error", e.message)
-                                        }
-                                    }
-                                    log.debug "trackJsonWriter: -> ${extendedTrackListJsonFile.absolutePath}, ${extendedTrackListJsonFile.text}"
-                                } else {
-                                    log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}"
-                                    returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}.")
-                                }
-                            }
-                        }
-                    }
-                }
-            } else {
-                log.error "Organism not found"
-                returnObject.put("error", "Organism not found.")
-            }
+                      File destinationFile = fileService.storeWithNewName(trackFile, path, trackConfigObject.key, newFileName)
+                      if (trackFileIndex.getOriginalFilename()) {
+                        String newFileNameIndex = trackTypeEnum ? trackConfigObject.key + "." + trackTypeEnum.suffixIndex[0] : trackFileIndex.originalFilename
+                        fileService.storeWithNewName(trackFileIndex, path, trackConfigObject.key, newFileNameIndex)
+                      }
 
-        } catch (e) {
-            log.error e.message
-            returnObject.put("error", e.message)
-        }
+                      if (trackTypeEnum == TrackTypeEnum.GFF3_JSON || trackTypeEnum == TrackTypeEnum.GFF3_JSON_CANVAS) {
+                        trackService.generateJSONForGff3(destinationFile, extendedDirectory.absolutePath, pathToJBrowseBinaries, trackConfigObject.apollo.topType)
+                      }
 
-        render returnObject as JSON
-    }
-
-    @RestApiMethod(description = "Deletes a track from an existing organism and returns a JSON object of the deleted track's configuration", path = "/organism/deleteTrackFromOrganism", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
-            , @RestApiParam(name = "trackLabel", type = "string", paramType = RestApiParamType.QUERY, description = "Track label corresponding to the track that is to be deleted")
-    ])
-    @Transactional
-    def deleteTrackFromOrganism() {
-
-        JSONObject returnObject = new JSONObject()
-
-        try {
-            JSONObject requestObject = permissionService.handleInput(request, params)
-            if (!requestObject.containsKey(FeatureStringEnum.ORGANISM.value)) {
-                returnObject.put("error", "/deleteTrackFromOrganism requires '${FeatureStringEnum.ORGANISM.value}'.")
-                response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-                render returnObject as JSON
-                return
-            }
-
-            if (!requestObject.containsKey(FeatureStringEnum.TRACK_LABEL.value)) {
-                returnObject.put("error", "/deleteTrackFromOrganism requires '${FeatureStringEnum.TRACK_LABEL.value}'.")
-                response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-                render returnObject as JSON
-                return
-            }
+                      extendedTracksArray.add(trackConfigObject)
+                      extendedTrackListObject.put(FeatureStringEnum.TRACKS.value, extendedTracksArray)
 
-            String trackLabel = requestObject.get(FeatureStringEnum.TRACK_LABEL.value)
-            permissionService.checkPermissions(requestObject, PermissionEnum.ADMINISTRATE)
-            log.debug "user ${requestObject.get(FeatureStringEnum.USERNAME.value)} is admin"
-            Organism organism = preferenceService.getOrganismForTokenInDB(requestObject.get(FeatureStringEnum.ORGANISM.value))
-
-            if (organism) {
-                log.debug "organism ${organism}"
-                File trackListJsonFile = new File(organism.trackList)
-                JSONObject trackListObject = JSON.parse(trackListJsonFile.text) as JSONObject
-                JSONObject trackObject = trackService.findTrackFromArray(trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value), trackLabel)
-
-                if (trackObject == null) {
-                    // track not found in trackList.json
-                    log.debug "Track with label '${trackLabel}' not found; searching in extendedTrackList.json"
-                    File extendedTrackListJsonFile = trackService.getExtendedTrackList(organism)
-                    if (extendedTrackListJsonFile.exists()) {
-                        JSONObject extendedTrackListObject = JSON.parse(extendedTrackListJsonFile.text) as JSONObject
-                        trackObject = trackService.findTrackFromArray(extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value), trackLabel)
-                        if (trackObject == null) {
-                            // track not found
-                            log.error "Track with label '${trackLabel}' not found"
-                            returnObject.put("error", "Track with label '${trackLabel}' not found.")
-                        } else {
-                            log.debug "Track with label '${trackLabel}' found; removing from extendedTrackList.json"
-                            extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value).remove(trackObject)
-                            String urlTemplate = trackObject.get(FeatureStringEnum.URL_TEMPLATE.value)
-                            String trackDirectory = urlTemplate.split("/").first()
-                            File commonDirectory = trackService.getExtendedDataDirectory(organism)
-                            File trackDir = new File(commonDirectory.absolutePath + File.separator + trackDirectory + File.separator + trackObject.get(FeatureStringEnum.LABEL.value))
-                            if (trackDir.exists()) {
-                                log.debug "Deleting ${trackDir.getAbsolutePath()}"
-                                if (trackDir.deleteDir()) {
-                                    // updating extendedTrackList.json
-                                    def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
-                                    trackListJsonWriter << extendedTrackListObject.toString(4)
-                                    trackListJsonWriter.close()
-                                }
-                            } else {
-                                log.error "track directory ${trackDir.getAbsolutePath()} not found"
-                                returnObject.put("error", "Track with label '${trackLabel}' removed from config but track directory not found.")
-                                // updating extendedTrackList.json
-                                def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
-                                trackListJsonWriter << extendedTrackListObject.toString(4)
-                                trackListJsonWriter.close()
-                            }
-                            returnObject.put("track", trackObject)
-                        }
-                    } else {
-                        log.error "Track with label '${trackLabel}' not found"
-                        returnObject.put("error", "Track with label '${trackLabel}' not found.")
+                      // write to trackList.json
+                      def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
+                      trackListJsonWriter << extendedTrackListObject.toString(4)
+                      trackListJsonWriter.close()
+                      returnObject.put(FeatureStringEnum.TRACKS.value, tracksArray)
                     }
-                } else {
-                    // track found in trackList.json
-                    log.debug "track with label '${trackLabel}' found in trackList.json"
-                    if (organism.dataAddedViaWebServices) {
-                        log.debug "organism data was added via web services; thus can remove the track"
-                        // track can be deleted since the organism and all subsequent tracks were added via web services
-                        trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value).remove(trackObject)
-                        String urlTemplate = trackObject.get(FeatureStringEnum.URL_TEMPLATE.value)
-                        String trackDirectory = urlTemplate.split("/").first()
-                        File trackDir = new File(organism.directory + File.separator + trackDirectory + File.separator + trackObject.get(FeatureStringEnum.LABEL.value))
-                        if (trackDir.exists()) {
-                            log.debug "Deleting ${trackDir.getAbsolutePath()}"
-                            if (trackDir.deleteDir()) {
-                                // updating trackList.json
-                                def trackListJsonWriter = trackListJsonFile.newWriter()
-                                trackListJsonWriter << trackListObject.toString(4)
-                                trackListJsonWriter.close()
-                            }
-                        } else {
-                            log.error "track directory ${trackDir.getAbsolutePath()} not found"
-                            returnObject.put("error", "Track with label '${trackLabel}' removed from config but track directory not found.")
-                            // updating trackList.json
-                            def trackListJsonWriter = trackListJsonFile.newWriter()
-                            trackListJsonWriter << trackListObject.toString(4)
-                            trackListJsonWriter.close()
-                        }
-                        returnObject.put("track", trackObject)
-                    } else {
-                        // cannot delete track since its part of the main data directory
-                        log.error "Track with label '${trackLabel}' found but is part of the main data directory and cannot be deleted."
-                        returnObject.put("error", "Track with label '${trackLabel}' found but is part of the main data directory and cannot be deleted.")
+                    catch (IOException e) {
+                      log.error e.printStackTrace()
+                      returnObject.put("error", e.message)
                     }
+                  }
+                  log.debug "trackJsonWriter: -> ${extendedTrackListJsonFile.absolutePath}, ${extendedTrackListJsonFile.text}"
+                } else {
+                  log.error "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}"
+                  returnObject.put("error", "an entry for track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' already exists in ${organism.directory}/${TRACKLIST}.")
                 }
-            } else {
-                log.error("Organism not found")
-                returnObject.put("error", "Organism not found.")
+              }
             }
-        } catch (Exception e) {
-            log.error(e.message)
-            returnObject.put("error", e.message)
+          }
         }
+      } else {
+        log.error "Organism not found"
+        returnObject.put("error", "Organism not found.")
+      }
+
+    } catch (e) {
+      log.error e.message
+      returnObject.put("error", e.message)
+    }
 
+    render returnObject as JSON
+  }
+
+  @RestApiMethod(description = "Deletes a track from an existing organism and returns a JSON object of the deleted track's configuration", path = "/organism/deleteTrackFromOrganism", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
+    , @RestApiParam(name = "trackLabel", type = "string", paramType = RestApiParamType.QUERY, description = "Track label corresponding to the track that is to be deleted")
+  ])
+  @Transactional
+  def deleteTrackFromOrganism() {
+
+    JSONObject returnObject = new JSONObject()
+
+    try {
+      JSONObject requestObject = permissionService.handleInput(request, params)
+      if (!requestObject.containsKey(FeatureStringEnum.ORGANISM.value)) {
+        returnObject.put("error", "/deleteTrackFromOrganism requires '${FeatureStringEnum.ORGANISM.value}'.")
+        response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
         render returnObject as JSON
-    }
+        return
+      }
 
-    @RestApiMethod(description = "Update a track in an existing organism returning a JSON object containing old and new track configurations", path = "/organism/updateTrackForOrganism", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
-            , @RestApiParam(name = "trackConfig", type = "string", paramType = RestApiParamType.QUERY, description = "Track configuration (JBrowse JSON)")
-    ])
-    @Transactional
-    def updateTrackForOrganism() {
-
-        JSONObject returnObject = new JSONObject()
-        JSONObject requestObject = permissionService.handleInput(request, params)
-
-
-        if (!requestObject.containsKey(FeatureStringEnum.ORGANISM.value)) {
-            returnObject.put("error", "/updateTrackForOrganism requires '${FeatureStringEnum.ORGANISM.value}'.")
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-            render returnObject as JSON
-            return
+      if (!requestObject.containsKey(FeatureStringEnum.TRACK_LABEL.value)) {
+        returnObject.put("error", "/deleteTrackFromOrganism requires '${FeatureStringEnum.TRACK_LABEL.value}'.")
+        response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+        render returnObject as JSON
+        return
+      }
+
+      String trackLabel = requestObject.get(FeatureStringEnum.TRACK_LABEL.value)
+      permissionService.checkPermissions(requestObject, PermissionEnum.ADMINISTRATE)
+      log.debug "user ${requestObject.get(FeatureStringEnum.USERNAME.value)} is admin"
+      Organism organism = preferenceService.getOrganismForTokenInDB(requestObject.get(FeatureStringEnum.ORGANISM.value))
+
+      if (organism) {
+        log.debug "organism ${organism}"
+        File trackListJsonFile = new File(organism.trackList)
+        JSONObject trackListObject = JSON.parse(trackListJsonFile.text) as JSONObject
+        JSONObject trackObject = trackService.findTrackFromArray(trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value), trackLabel)
+
+        if (trackObject == null) {
+          // track not found in trackList.json
+          log.debug "Track with label '${trackLabel}' not found; searching in extendedTrackList.json"
+          File extendedTrackListJsonFile = trackService.getExtendedTrackList(organism)
+          if (extendedTrackListJsonFile.exists()) {
+            JSONObject extendedTrackListObject = JSON.parse(extendedTrackListJsonFile.text) as JSONObject
+            trackObject = trackService.findTrackFromArray(extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value), trackLabel)
+            if (trackObject == null) {
+              // track not found
+              log.error "Track with label '${trackLabel}' not found"
+              returnObject.put("error", "Track with label '${trackLabel}' not found.")
+            } else {
+              log.debug "Track with label '${trackLabel}' found; removing from extendedTrackList.json"
+              extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value).remove(trackObject)
+              String urlTemplate = trackObject.get(FeatureStringEnum.URL_TEMPLATE.value)
+              String trackDirectory = urlTemplate.split("/").first()
+              File commonDirectory = trackService.getExtendedDataDirectory(organism)
+              File trackDir = new File(commonDirectory.absolutePath + File.separator + trackDirectory + File.separator + trackObject.get(FeatureStringEnum.LABEL.value))
+              if (trackDir.exists()) {
+                log.debug "Deleting ${trackDir.getAbsolutePath()}"
+                if (trackDir.deleteDir()) {
+                  // updating extendedTrackList.json
+                  def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
+                  trackListJsonWriter << extendedTrackListObject.toString(4)
+                  trackListJsonWriter.close()
+                }
+              } else {
+                log.error "track directory ${trackDir.getAbsolutePath()} not found"
+                returnObject.put("error", "Track with label '${trackLabel}' removed from config but track directory not found.")
+                // updating extendedTrackList.json
+                def trackListJsonWriter = extendedTrackListJsonFile.newWriter()
+                trackListJsonWriter << extendedTrackListObject.toString(4)
+                trackListJsonWriter.close()
+              }
+              returnObject.put("track", trackObject)
+            }
+          } else {
+            log.error "Track with label '${trackLabel}' not found"
+            returnObject.put("error", "Track with label '${trackLabel}' not found.")
+          }
+        } else {
+          // track found in trackList.json
+          log.debug "track with label '${trackLabel}' found in trackList.json"
+          if (organism.dataAddedViaWebServices) {
+            log.debug "organism data was added via web services; thus can remove the track"
+            // track can be deleted since the organism and all subsequent tracks were added via web services
+            trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value).remove(trackObject)
+            String urlTemplate = trackObject.get(FeatureStringEnum.URL_TEMPLATE.value)
+            String trackDirectory = urlTemplate.split("/").first()
+            File trackDir = new File(organism.directory + File.separator + trackDirectory + File.separator + trackObject.get(FeatureStringEnum.LABEL.value))
+            if (trackDir.exists()) {
+              log.debug "Deleting ${trackDir.getAbsolutePath()}"
+              if (trackDir.deleteDir()) {
+                // updating trackList.json
+                def trackListJsonWriter = trackListJsonFile.newWriter()
+                trackListJsonWriter << trackListObject.toString(4)
+                trackListJsonWriter.close()
+              }
+            } else {
+              log.error "track directory ${trackDir.getAbsolutePath()} not found"
+              returnObject.put("error", "Track with label '${trackLabel}' removed from config but track directory not found.")
+              // updating trackList.json
+              def trackListJsonWriter = trackListJsonFile.newWriter()
+              trackListJsonWriter << trackListObject.toString(4)
+              trackListJsonWriter.close()
+            }
+            returnObject.put("track", trackObject)
+          } else {
+            // cannot delete track since its part of the main data directory
+            log.error "Track with label '${trackLabel}' found but is part of the main data directory and cannot be deleted."
+            returnObject.put("error", "Track with label '${trackLabel}' found but is part of the main data directory and cannot be deleted.")
+          }
         }
+      } else {
+        log.error("Organism not found")
+        returnObject.put("error", "Organism not found.")
+      }
+    } catch (Exception e) {
+      log.error(e.message)
+      returnObject.put("error", e.message)
+    }
 
-        if (!requestObject.containsKey(FeatureStringEnum.TRACK_CONFIG.value)) {
-            returnObject.put("error", "/updateTrackForOrganism requires '${FeatureStringEnum.TRACK_CONFIG.value}'.")
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
-            render returnObject as JSON
-            return
-        }
+    render returnObject as JSON
+  }
 
-        JSONObject trackConfigObject
-        try {
-            trackConfigObject = JSON.parse(params.get(FeatureStringEnum.TRACK_CONFIG.value)) as JSONObject
-        } catch (ConverterException ce) {
-            log.error ce.message
-            returnObject.put("error", ce.message)
-            render returnObject as JSON
-            return
-        }
+  @RestApiMethod(description = "Update a track in an existing organism returning a JSON object containing old and new track configurations", path = "/organism/updateTrackForOrganism", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
+    , @RestApiParam(name = "trackConfig", type = "string", paramType = RestApiParamType.QUERY, description = "Track configuration (JBrowse JSON)")
+  ])
+  @Transactional
+  def updateTrackForOrganism() {
 
-        if (!trackConfigObject.containsKey(FeatureStringEnum.LABEL.value) || !trackConfigObject.containsKey(FeatureStringEnum.URL_TEMPLATE.value)) {
-            log.error "trackConfig requires both '${FeatureStringEnum.LABEL.value}' and '${FeatureStringEnum.URL_TEMPLATE.value}'."
-            returnObject.put("error", "trackConfig requires both '${FeatureStringEnum.LABEL.value}' and '${FeatureStringEnum.URL_TEMPLATE.value}'.")
-            render returnObject as JSON
-            return
-        }
+    JSONObject returnObject = new JSONObject()
+    JSONObject requestObject = permissionService.handleInput(request, params)
 
-        try {
-            permissionService.checkPermissions(requestObject, PermissionEnum.ADMINISTRATE)
-            log.debug "user ${requestObject.get(FeatureStringEnum.USERNAME.value)} is admin"
-            Organism organism = preferenceService.getOrganismForTokenInDB(requestObject.get(FeatureStringEnum.ORGANISM.value))
-
-            if (organism) {
-                String organismDirectoryName = organism.directory
-                File organismDirectory = new File(organismDirectoryName)
-                File commonDataDirectory = new File(trackService.commonDataDirectory)
-
-                if (organismDirectory.getParentFile().getAbsolutePath() == commonDataDirectory.getAbsolutePath()) {
-                    // organism data is in common data directory
-                    log.debug "organism data is in common data directory"
-                    File trackListJsonFile = new File(organism.directory + File.separator + trackService.TRACKLIST)
-                    JSONObject trackListObject = JSON.parse(trackListJsonFile.text)
-                    JSONArray tracksArray = trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
-                    // check if track exists in trackList.json
-                    JSONObject trackObject = trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value))
-                    if (trackObject == null) {
-                        log.error "Cannot find track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'"
-                        returnObject.put("error", "Cannot find track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'.")
-                    } else {
-                        // replaces track config
-                        tracksArray.remove(trackObject)
-                        tracksArray.add(trackConfigObject)
-
-                        // write to trackList.json
-                        def trackListJsonWriter = trackListJsonFile.newWriter()
-                        trackListJsonWriter << trackListObject.toString(4)
-                        trackListJsonWriter.close()
-
-                        returnObject.put("oldTrackConfig", trackObject)
-                        returnObject.put("newTrackConfig", trackConfigObject)
-                    }
-                } else {
-                    // organism data is somewhere on the server where we don't want to modify anything
-                    log.debug "organism data is somewhere on the FS"
-                    File trackListJsonFile = new File(organism.directory + File.separator + trackService.TRACKLIST)
-                    JSONObject trackListObject = JSON.parse(trackListJsonFile.text)
-                    JSONArray tracksArray = trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
-                    // check if track exists in trackList.json
-                    JSONObject trackObject = trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value))
-                    if (trackObject != null) {
-                        // cannot update track config
-                        log.error "Track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' found but is part of the main data directory and cannot be updated."
-                        returnObject.put("error", "Track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' found but is part of the main data directory and cannot be updated.")
-                    } else {
-                        File extendedDirectory = trackService.getExtendedDataDirectory(organism)
-                        if (extendedDirectory.exists()) {
-                            // extended organism directory present in common data directory
-                            log.debug "extended organism directory ${extendedDirectory.absolutePath} present in common data directory"
-                            File extendedTrackListJsonFile = trackService.getExtendedTrackList(organism)
-                            JSONObject extendedTrackListObject = JSON.parse(extendedTrackListJsonFile.text)
-                            JSONArray extendedTracksArray = extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
-                            // check if track exists in extendedTrackList.json
-                            trackObject = trackService.findTrackFromArray(extendedTracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value))
-                            if (trackObject == null) {
-                                log.error "Cannot find track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'"
-                                returnObject.put("error", "Cannot find track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'.")
-                            } else {
-                                // replaces track config
-                                extendedTracksArray.remove(trackObject)
-                                extendedTracksArray.add(trackConfigObject)
-
-                                // write to trackList.json
-                                def extendedTrackListJsonWriter = extendedTrackListJsonFile.newWriter()
-                                extendedTrackListJsonWriter << extendedTrackListObject.toString(4)
-                                extendedTrackListJsonWriter.close()
-
-                                returnObject.put("oldTrackConfig", trackObject)
-                                returnObject.put("newTrackConfig", trackConfigObject)
-                            }
-                        } else {
-                            log.error "Extended organism directory does not exist; Cannot find track with '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'."
-                            returnObject.put("error", "Cannot find track with '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'.")
-                        }
-                    }
-                }
-            } else {
-                log.error "Organism not found"
-                returnObject.put("error", "Organism not found.")
-            }
-        } catch (Exception e) {
-            log.error e.message
-            returnObject.put("error", e.message)
-        }
 
-        render returnObject as JSON
+    if (!requestObject.containsKey(FeatureStringEnum.ORGANISM.value)) {
+      returnObject.put("error", "/updateTrackForOrganism requires '${FeatureStringEnum.ORGANISM.value}'.")
+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+      render returnObject as JSON
+      return
     }
 
-    @RestApiMethod(description = "Adds an organism returning a JSON array of all organisms", path = "/organism/addOrganism", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "directory", type = "string", paramType = RestApiParamType.QUERY, description = "Filesystem path for the organisms data directory (required)")
-            , @RestApiParam(name = "commonName", type = "string", paramType = RestApiParamType.QUERY, description = "A name used for the organism")
-            , @RestApiParam(name = "species", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) Species name")
-            , @RestApiParam(name = "genus", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) Species genus")
-            , @RestApiParam(name = "blatdb", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) Filesystem path for a BLAT database (e.g. a .2bit file)")
-            , @RestApiParam(name = "publicMode", type = "boolean", paramType = RestApiParamType.QUERY, description = "(optional) A flag for whether the organism appears as in the public genomes list (default false)")
-            , @RestApiParam(name = "metadata", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) Organism metadata")
-            , @RestApiParam(name = "returnAllOrganisms", type = "boolean", paramType = RestApiParamType.QUERY, description = "(optional) Return all organisms (true / false) (default true)")
-    ])
-    @Transactional
-    def addOrganism() {
-        JSONObject organismJson = permissionService.handleInput(request, params)
-        String clientToken = organismJson.getString(FeatureStringEnum.CLIENT_TOKEN.value)
-        try {
-            // use permissionService.hasGlobalPermissions to check both authentication and authorization
-            if (!permissionService.hasGlobalPermissions(organismJson, GlobalPermissionEnum.INSTRUCTOR)) {
-                def error = [error: 'not authorized to add organism']
-                render error as JSON
-                log.error(error.error)
-                return
-            }
+    if (!requestObject.containsKey(FeatureStringEnum.TRACK_CONFIG.value)) {
+      returnObject.put("error", "/updateTrackForOrganism requires '${FeatureStringEnum.TRACK_CONFIG.value}'.")
+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST)
+      render returnObject as JSON
+      return
+    }
 
-            if (organismJson.get("commonName") == "" || organismJson.get("directory") == "") {
-                throw new Exception('empty fields detected')
-            }
+    JSONObject trackConfigObject
+    try {
+      trackConfigObject = JSON.parse(params.get(FeatureStringEnum.TRACK_CONFIG.value)) as JSONObject
+    } catch (ConverterException ce) {
+      log.error ce.message
+      returnObject.put("error", ce.message)
+      render returnObject as JSON
+      return
+    }
 
-            log.debug "Adding ${organismJson.publicMode}"
-            Organism organism = new Organism(
-                    commonName: organismJson.commonName
-                    , directory: organismJson.directory
-                    , blatdb: organismJson.blatdb
-                    , species: organismJson.species
-                    , genus: organismJson.genus
-                    , obsolete: false
-                    , metadata: organismJson.metadata ? organismJson.metadata.toString() : null
-                    , nonDefaultTranslationTable: organismJson.nonDefaultTranslationTable ?: null
-                    , publicMode: organismJson.publicMode ?: false
-            )
-            log.debug "organism ${organism as JSON}"
-            // to support webservice, get current user from session or input object
-            def currentUser = permissionService.getCurrentUser(organismJson)
-            // allow specify the metadata creator through webservice, if not specified, take current user as the creator
-            if (!organism.getMetaData(FeatureStringEnum.CREATOR.value)) {
-                log.debug "creator does not exist, set current user as the creator"
-                organism.addMetaData(FeatureStringEnum.CREATOR.value, currentUser.id as String)
-            }
+    if (!trackConfigObject.containsKey(FeatureStringEnum.LABEL.value) || !trackConfigObject.containsKey(FeatureStringEnum.URL_TEMPLATE.value)) {
+      log.error "trackConfig requires both '${FeatureStringEnum.LABEL.value}' and '${FeatureStringEnum.URL_TEMPLATE.value}'."
+      returnObject.put("error", "trackConfig requires both '${FeatureStringEnum.LABEL.value}' and '${FeatureStringEnum.URL_TEMPLATE.value}'.")
+      render returnObject as JSON
+      return
+    }
 
-            if (checkOrganism(organism)) {
-                organism.save(failOnError: true, flush: true, insert: true)
-            }
-            def user = permissionService.currentUser
-            def userOrganismPermission = UserOrganismPermission.findByUserAndOrganism(user, organism)
-            if (!userOrganismPermission) {
-                log.debug "creating new permissions! "
-                userOrganismPermission = new UserOrganismPermission(
-                        user: user
-                        , organism: organism
-                        , permissions: "[]"
-                ).save(insert: true)
-                log.debug "created new permissions! "
+    try {
+      permissionService.checkPermissions(requestObject, PermissionEnum.ADMINISTRATE)
+      log.debug "user ${requestObject.get(FeatureStringEnum.USERNAME.value)} is admin"
+      Organism organism = preferenceService.getOrganismForTokenInDB(requestObject.get(FeatureStringEnum.ORGANISM.value))
+
+      if (organism) {
+        String organismDirectoryName = organism.directory
+        File organismDirectory = new File(organismDirectoryName)
+        File commonDataDirectory = new File(trackService.commonDataDirectory)
+
+        if (organismDirectory.getParentFile().getAbsolutePath() == commonDataDirectory.getAbsolutePath()) {
+          // organism data is in common data directory
+          log.debug "organism data is in common data directory"
+          File trackListJsonFile = new File(organism.directory + File.separator + trackService.TRACKLIST)
+          JSONObject trackListObject = JSON.parse(trackListJsonFile.text)
+          JSONArray tracksArray = trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
+          // check if track exists in trackList.json
+          JSONObject trackObject = trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value))
+          if (trackObject == null) {
+            log.error "Cannot find track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'"
+            returnObject.put("error", "Cannot find track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'.")
+          } else {
+            // replaces track config
+            tracksArray.remove(trackObject)
+            tracksArray.add(trackConfigObject)
+
+            // write to trackList.json
+            def trackListJsonWriter = trackListJsonFile.newWriter()
+            trackListJsonWriter << trackListObject.toString(4)
+            trackListJsonWriter.close()
+
+            returnObject.put("oldTrackConfig", trackObject)
+            returnObject.put("newTrackConfig", trackConfigObject)
+          }
+        } else {
+          // organism data is somewhere on the server where we don't want to modify anything
+          log.debug "organism data is somewhere on the FS"
+          File trackListJsonFile = new File(organism.directory + File.separator + trackService.TRACKLIST)
+          JSONObject trackListObject = JSON.parse(trackListJsonFile.text)
+          JSONArray tracksArray = trackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
+          // check if track exists in trackList.json
+          JSONObject trackObject = trackService.findTrackFromArray(tracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value))
+          if (trackObject != null) {
+            // cannot update track config
+            log.error "Track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' found but is part of the main data directory and cannot be updated."
+            returnObject.put("error", "Track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}' found but is part of the main data directory and cannot be updated.")
+          } else {
+            File extendedDirectory = trackService.getExtendedDataDirectory(organism)
+            if (extendedDirectory.exists()) {
+              // extended organism directory present in common data directory
+              log.debug "extended organism directory ${extendedDirectory.absolutePath} present in common data directory"
+              File extendedTrackListJsonFile = trackService.getExtendedTrackList(organism)
+              JSONObject extendedTrackListObject = JSON.parse(extendedTrackListJsonFile.text)
+              JSONArray extendedTracksArray = extendedTrackListObject.getJSONArray(FeatureStringEnum.TRACKS.value)
+              // check if track exists in extendedTrackList.json
+              trackObject = trackService.findTrackFromArray(extendedTracksArray, trackConfigObject.get(FeatureStringEnum.LABEL.value))
+              if (trackObject == null) {
+                log.error "Cannot find track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'"
+                returnObject.put("error", "Cannot find track with label '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'.")
+              } else {
+                // replaces track config
+                extendedTracksArray.remove(trackObject)
+                extendedTracksArray.add(trackConfigObject)
+
+                // write to trackList.json
+                def extendedTrackListJsonWriter = extendedTrackListJsonFile.newWriter()
+                extendedTrackListJsonWriter << extendedTrackListObject.toString(4)
+                extendedTrackListJsonWriter.close()
+
+                returnObject.put("oldTrackConfig", trackObject)
+                returnObject.put("newTrackConfig", trackConfigObject)
+              }
+            } else {
+              log.error "Extended organism directory does not exist; Cannot find track with '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'."
+              returnObject.put("error", "Cannot find track with '${trackConfigObject.get(FeatureStringEnum.LABEL.value)}'.")
             }
+          }
+        }
+      } else {
+        log.error "Organism not found"
+        returnObject.put("error", "Organism not found.")
+      }
+    } catch (Exception e) {
+      log.error e.message
+      returnObject.put("error", e.message)
+    }
 
-            JSONArray permissionsArray = new JSONArray()
-            permissionsArray.add(PermissionEnum.ADMINISTRATE.name())
-            userOrganismPermission.permissions = permissionsArray.toString()
-            userOrganismPermission.save(flush: true)
-
-            // send file using:
+    render returnObject as JSON
+  }
+
+  @RestApiMethod(description = "Adds an organism returning a JSON array of all organisms", path = "/organism/addOrganism", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "directory", type = "string", paramType = RestApiParamType.QUERY, description = "Filesystem path for the organisms data directory (required)")
+    , @RestApiParam(name = "commonName", type = "string", paramType = RestApiParamType.QUERY, description = "A name used for the organism")
+    , @RestApiParam(name = "species", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) Species name")
+    , @RestApiParam(name = "genus", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) Species genus")
+    , @RestApiParam(name = "blatdb", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) Filesystem path for a BLAT database (e.g. a .2bit file)")
+    , @RestApiParam(name = "publicMode", type = "boolean", paramType = RestApiParamType.QUERY, description = "(optional) A flag for whether the organism appears as in the public genomes list (default false)")
+    , @RestApiParam(name = "metadata", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) Organism metadata")
+    , @RestApiParam(name = "returnAllOrganisms", type = "boolean", paramType = RestApiParamType.QUERY, description = "(optional) Return all organisms (true / false) (default true)")
+  ])
+  @Transactional
+  def addOrganism() {
+    JSONObject organismJson = permissionService.handleInput(request, params)
+    String clientToken = organismJson.getString(FeatureStringEnum.CLIENT_TOKEN.value)
+    try {
+      // use permissionService.hasGlobalPermissions to check both authentication and authorization
+      if (!permissionService.hasGlobalPermissions(organismJson, GlobalPermissionEnum.INSTRUCTOR)) {
+        def error = [error: 'not authorized to add organism']
+        render error as JSON
+        log.error(error.error)
+        return
+      }
+
+      if (organismJson.get("commonName") == "" || organismJson.get("directory") == "") {
+        throw new Exception('empty fields detected')
+      }
+
+      log.debug "Adding ${organismJson.publicMode}"
+      Organism organism = new Organism(
+        commonName: organismJson.commonName
+        , directory: organismJson.directory
+        , blatdb: organismJson.blatdb
+        , species: organismJson.species
+        , genus: organismJson.genus
+        , obsolete: false
+        , metadata: organismJson.metadata ? organismJson.metadata.toString() : null
+        , nonDefaultTranslationTable: organismJson.nonDefaultTranslationTable ?: null
+        , publicMode: organismJson.publicMode ?: false
+      )
+      log.debug "organism ${organism as JSON}"
+      // to support webservice, get current user from session or input object
+      def currentUser = permissionService.getCurrentUser(organismJson)
+      // allow specify the metadata creator through webservice, if not specified, take current user as the creator
+      if (!organism.getMetaData(FeatureStringEnum.CREATOR.value)) {
+        log.debug "creator does not exist, set current user as the creator"
+        organism.addMetaData(FeatureStringEnum.CREATOR.value, currentUser.id as String)
+      }
+
+      if (checkOrganism(organism)) {
+        organism.save(failOnError: true, flush: true, insert: true)
+      }
+      def user = permissionService.currentUser
+      def userOrganismPermission = UserOrganismPermission.findByUserAndOrganism(user, organism)
+      if (!userOrganismPermission) {
+        log.debug "creating new permissions! "
+        userOrganismPermission = new UserOrganismPermission(
+          user: user
+          , organism: organism
+          , permissions: "[]"
+        ).save(insert: true)
+        log.debug "created new permissions! "
+      }
+
+      JSONArray permissionsArray = new JSONArray()
+      permissionsArray.add(PermissionEnum.ADMINISTRATE.name())
+      userOrganismPermission.permissions = permissionsArray.toString()
+      userOrganismPermission.save(flush: true)
+
+      // send file using:
 //            curl \
-            //  -F "userid=1" \
-            //  -F "filecomment=This is an image file" \
-            //  -F "sequenceData=@/home/user1/Desktop/jbrowse/sample/seq.zip" \
-            //  localhost:8080/apollo
+      //  -F "userid=1" \
+      //  -F "filecomment=This is an image file" \
+      //  -F "sequenceData=@/home/user1/Desktop/jbrowse/sample/seq.zip" \
+      //  localhost:8080/apollo
 //                if (request.getFile("sequenceData)")) {
 //
 //                }W
-            sequenceService.loadRefSeqs(organism)
+      sequenceService.loadRefSeqs(organism)
 
-            preferenceService.setCurrentOrganism(permissionService.getCurrentUser(organismJson), organism, clientToken)
-            Boolean returnAllOrganisms = organismJson.returnAllOrganisms ? Boolean.valueOf(organismJson.returnAllOrganisms) : true
+      preferenceService.setCurrentOrganism(permissionService.getCurrentUser(organismJson), organism, clientToken)
+      Boolean returnAllOrganisms = organismJson.returnAllOrganisms ? Boolean.valueOf(organismJson.returnAllOrganisms) : true
 
-            render returnAllOrganisms ? findAllOrganisms() : new JSONArray()
+      render returnAllOrganisms ? findAllOrganisms() : new JSONArray()
 
 
-        } catch (e) {
-            def error = [error: 'problem saving organism: ' + e]
-            render error as JSON
-            e.printStackTrace()
-            log.error(error.error)
-        }
+    } catch (e) {
+      def error = [error: 'problem saving organism: ' + e]
+      render error as JSON
+      e.printStackTrace()
+      log.error(error.error)
+    }
+  }
+
+  @RestApiMethod(description = "Finds sequences for a given organism and returns a JSON object including the username, organism and a JSONArray of sequences", path = "/organism/getSequencesForOrganism", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "Common name or ID for the organism")
+  ])
+  def getSequencesForOrganism() {
+    JSONObject organismJson = permissionService.handleInput(request, params)
+    if (organismJson.username == "" || organismJson.organism == "" || organismJson.password == "") {
+      render(['error': 'Empty fields in request JSON'] as JSON)
+      return
     }
 
-    @RestApiMethod(description = "Finds sequences for a given organism and returns a JSON object including the username, organism and a JSONArray of sequences", path = "/organism/getSequencesForOrganism", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "Common name or ID for the organism")
-    ])
-    def getSequencesForOrganism() {
-        JSONObject organismJson = permissionService.handleInput(request, params)
-        if (organismJson.username == "" || organismJson.organism == "" || organismJson.password == "") {
-            render(['error': 'Empty fields in request JSON'] as JSON)
-            return
-        }
-
-        List<Sequence> sequenceList
-
-        Organism organism = Organism.findByCommonName(organismJson.organism)
-        if (!organism) {
-            organism = Organism.findById(organismJson.organism)
-        }
-        if (!organism) {
-            def error = ['error': 'Organism not found ' + organismJson.organism]
-            render error as JSON
-            log.error(error.error)
-            return
-        }
+    List<Sequence> sequenceList
 
+    Organism organism = Organism.findByCommonName(organismJson.organism)
+    if (!organism) {
+      organism = Organism.findById(organismJson.organism)
+    }
+    if (!organism) {
+      def error = ['error': 'Organism not found ' + organismJson.organism]
+      render error as JSON
+      log.error(error.error)
+      return
+    }
 
-        if (permissionService.findHighestOrganismPermissionForUser(organism, permissionService.getCurrentUser(organismJson)).rank >= PermissionEnum.EXPORT.rank) {
-            def c = Sequence.createCriteria()
-            sequenceList = c.list {
-                eq('organism', organism)
-            }
-            log.debug "Sequence list fetched at getSequencesForOrganism: ${sequenceList}"
-        } else {
-            def error = ['error': 'Username ' + organismJson.username + ' does not have export permissions for organism ' + organismJson.organism]
-            render error as JSON
-            log.error(error.error)
-            return
-        }
 
-        render([username: organismJson.username, organism: organismJson.organism, sequences: sequenceList] as JSON)
+    if (permissionService.findHighestOrganismPermissionForUser(organism, permissionService.getCurrentUser(organismJson)).rank >= PermissionEnum.EXPORT.rank) {
+      def c = Sequence.createCriteria()
+      sequenceList = c.list {
+        eq('organism', organism)
+      }
+      log.debug "Sequence list fetched at getSequencesForOrganism: ${sequenceList}"
+    } else {
+      def error = ['error': 'Username ' + organismJson.username + ' does not have export permissions for organism ' + organismJson.organism]
+      render error as JSON
+      log.error(error.error)
+      return
     }
 
-    private boolean checkOrganism(Organism organism) {
-        File directory = new File(organism.directory)
-        File trackListFile = new File(organism.getTrackList())
-        File refSeqFile = new File(organism.getRefseqFile())
-
-        if (!directory.exists() || !directory.isDirectory()) {
-            organism.valid = false
-            throw new Exception("Invalid directory specified: " + directory.absolutePath)
-        } else if (!trackListFile.exists()) {
-            organism.valid = false
-            throw new Exception("Track file does not exists: " + trackListFile.absolutePath)
-        }
+    render([username: organismJson.username, organism: organismJson.organism, sequences: sequenceList] as JSON)
+  }
 
+  private boolean checkOrganism(Organism organism) {
+    File directory = new File(organism.directory)
+    File trackListFile = new File(organism.getTrackList())
+    File refSeqFile = new File(organism.getRefseqFile())
 
-        if (organism.genomeFasta) {
-            File genomeFastaFile = new File(organism.genomeFastaFileName)
-            File genomeFastaIndexFile = new File(organism.genomeFastaIndexFileName)
-            if (!genomeFastaFile.exists()) {
-                organism.valid = false
-                throw new Exception("Invalid fasta file : " + genomeFastaFile.absolutePath)
-            }
-            if (!genomeFastaIndexFile.exists()) {
-                organism.valid = false
-                throw new Exception("Invalid index fasta file : " + genomeFastaIndexFile.absolutePath)
-            }
-        } else if (!refSeqFile.exists()) {
-            organism.valid = false
-            throw new Exception("Reference sequence file does not exists: " + refSeqFile.absolutePath)
-        }
-
-        organism.valid = true
-        return organism.valid
+    if (!directory.exists() || !directory.isDirectory()) {
+      organism.valid = false
+      throw new Exception("Invalid directory specified: " + directory.absolutePath)
+    } else if (!trackListFile.exists()) {
+      organism.valid = false
+      throw new Exception("Track file does not exists: " + trackListFile.absolutePath)
     }
 
 
-    @RestApiMethod(description = "Adds an organism returning a JSON array of all organisms", path = "/organism/updateOrganismInfo", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "id", type = "long", paramType = RestApiParamType.QUERY, description = "unique id of organism to change")
-            , @RestApiParam(name = "directory", type = "string", paramType = RestApiParamType.QUERY, description = "filesystem path for the organisms data directory (required)")
-            , @RestApiParam(name = "species", type = "string", paramType = RestApiParamType.QUERY, description = "species name")
-            , @RestApiParam(name = "genus", type = "string", paramType = RestApiParamType.QUERY, description = "species genus")
-            , @RestApiParam(name = "blatdb", type = "string", paramType = RestApiParamType.QUERY, description = "filesystem path for a BLAT database (e.g. a .2bit file)")
-            , @RestApiParam(name = "publicMode", type = "boolean", paramType = RestApiParamType.QUERY, description = "a flag for whether the organism appears as in the public genomes list")
-            , @RestApiParam(name = "name", type = "string", paramType = RestApiParamType.QUERY, description = "a common name used for the organism")
-            , @RestApiParam(name = "nonDefaultTranslationTable", type = "string", paramType = RestApiParamType.QUERY, description = "non-default translation table")
-            , @RestApiParam(name = "metadata", type = "string", paramType = RestApiParamType.QUERY, description = "organism metadata")
-    ])
-    @Transactional
-    def updateOrganismInfo() {
-        try {
-            JSONObject organismJson = permissionService.handleInput(request, params)
-            permissionService.checkPermissions(organismJson, PermissionEnum.ADMINISTRATE)
-            Organism organism = Organism.findById(organismJson.id)
-            Boolean madeObsolete
-            if (organism) {
-                log.debug "Updating organism info ${organismJson as JSON}"
-                organism.commonName = organismJson.name
-                organism.blatdb = organismJson.blatdb ?: null
-                organism.species = organismJson.species ?: null
-                organism.genus = organismJson.genus ?: null
-                //if the organismJson.metadata is null, remain the old metadata
-                organism.metadata = organismJson.metadata ? organismJson.metadata.toString() : organism.metadata
-                organism.directory = organismJson.directory
-                organism.publicMode = organismJson.publicMode ?: false
-                madeObsolete = !organism.obsolete && organismJson.obsolete
-                organism.obsolete = organismJson.obsolete ?: false
-                organism.nonDefaultTranslationTable = organismJson.nonDefaultTranslationTable ?: null
-                if (checkOrganism(organism)) {
-                    if (madeObsolete) {
-                        // TODO: remove all organism permissions
-                        permissionService.removeAllPermissions(organism)
-                    }
-                    organism.save(flush: true, insert: false, failOnError: true)
-                } else {
-                    throw new Exception("Bad organism directory: " + organism.directory)
-                }
-
-                if (organism.genomeFasta) {
-                    // update location of genome fasta
-                    sequenceService.updateGenomeFasta(organism)
-                }
-
-            } else {
-                throw new Exception('organism not found')
-            }
-            render findAllOrganisms() as JSON
-        }
-        catch (e) {
-            def error = [error: 'problem saving organism: ' + e]
-            render error as JSON
-            log.error(error.error)
-        }
+    if (organism.genomeFasta) {
+      File genomeFastaFile = new File(organism.genomeFastaFileName)
+      File genomeFastaIndexFile = new File(organism.genomeFastaIndexFileName)
+      if (!genomeFastaFile.exists()) {
+        organism.valid = false
+        throw new Exception("Invalid fasta file : " + genomeFastaFile.absolutePath)
+      }
+      if (!genomeFastaIndexFile.exists()) {
+        organism.valid = false
+        throw new Exception("Invalid index fasta file : " + genomeFastaIndexFile.absolutePath)
+      }
+    } else if (!refSeqFile.exists()) {
+      organism.valid = false
+      throw new Exception("Reference sequence file does not exists: " + refSeqFile.absolutePath)
     }
 
-    @RestApiMethod(description = "Update organism metadata", path = "/organism/updateOrganismMetadata", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "id", type = "long", paramType = RestApiParamType.QUERY, description = "unique id of organism to change")
-            , @RestApiParam(name = "metadata", type = "string", paramType = RestApiParamType.QUERY, description = "organism metadata")
-    ])
-    @Transactional
-    def updateOrganismMetadata() {
-        log.debug "updating organism metadata ${params}"
-        try {
-            JSONObject organismJson = permissionService.handleInput(request, params)
-            permissionService.checkPermissions(organismJson, PermissionEnum.ADMINISTRATE)
-            Organism organism = Organism.findById(organismJson.id)
-            if (organism) {
-                log.debug "Updating organism metadata ${organismJson as JSON}"
-                organism.metadata = organismJson.metadata
-                organism.save(flush: true, insert: false, failOnError: true)
-            } else {
-                throw new Exception('Organism not found')
-            }
-            render new JSONObject() as JSON
-        }
-        catch (e) {
-            def error = [error: 'problem saving organism: ' + e]
-            render error as JSON
-            log.error(error.error)
+    organism.valid = true
+    return organism.valid
+  }
+
+
+  @RestApiMethod(description = "Adds an organism returning a JSON array of all organisms", path = "/organism/updateOrganismInfo", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "id", type = "long", paramType = RestApiParamType.QUERY, description = "unique id of organism to change")
+    , @RestApiParam(name = "directory", type = "string", paramType = RestApiParamType.QUERY, description = "filesystem path for the organisms data directory (required)")
+    , @RestApiParam(name = "species", type = "string", paramType = RestApiParamType.QUERY, description = "species name")
+    , @RestApiParam(name = "genus", type = "string", paramType = RestApiParamType.QUERY, description = "species genus")
+    , @RestApiParam(name = "blatdb", type = "string", paramType = RestApiParamType.QUERY, description = "filesystem path for a BLAT database (e.g. a .2bit file)")
+    , @RestApiParam(name = "publicMode", type = "boolean", paramType = RestApiParamType.QUERY, description = "a flag for whether the organism appears as in the public genomes list")
+    , @RestApiParam(name = "name", type = "string", paramType = RestApiParamType.QUERY, description = "a common name used for the organism")
+    , @RestApiParam(name = "nonDefaultTranslationTable", type = "string", paramType = RestApiParamType.QUERY, description = "non-default translation table")
+    , @RestApiParam(name = "metadata", type = "string", paramType = RestApiParamType.QUERY, description = "organism metadata")
+    , @RestApiParam(name = "organismData", type = "file", paramType = RestApiParamType.QUERY, description = "zip or tar.gz compressed data directory (if other options not used).  Blat data should include a .2bit suffix and be in a directory 'searchDatabaseData'")
+  ])
+  @Transactional
+  def updateOrganismInfo() {
+    try {
+      JSONObject organismJson = permissionService.handleInput(request, params)
+      permissionService.checkPermissions(organismJson, PermissionEnum.ADMINISTRATE)
+      Organism organism = Organism.findById(organismJson.id)
+      Boolean madeObsolete
+      if (organism) {
+
+        log.debug "Updating organism info ${organismJson as JSON}"
+        organism.commonName = organismJson.name ?: organism.commonName
+        organism.blatdb = organismJson.blatdb ?: organism.blastdb
+        organism.species = organismJson.species ?: organism.species
+        organism.genus = organismJson.genus ?: organism.genus
+        //if the organismJson.metadata is null, remain the old metadata
+        organism.metadata = organismJson.metadata ? organismJson.metadata.toString() : organism.metadata
+        organism.directory = organismJson.directory ?: organism.directory
+        organism.publicMode = organismJson.publicMode ?: false
+        madeObsolete = !organism.obsolete && organismJson.obsolete
+        organism.obsolete = organismJson.obsolete ?: false
+        organism.nonDefaultTranslationTable = organismJson.nonDefaultTranslationTable ?: organism.nonDefaultTranslationTable
+        if (organism.genomeFasta) {
+          // update location of genome fasta
+          sequenceService.updateGenomeFasta(organism)
         }
-    }
 
-    @RestApiMethod(description = "Get creator metadata for organism, returns userId as String", path = "/organism/getOrganismCreator", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
-    ])
-    def getOrganismCreator() {
-        JSONObject organismJson = permissionService.handleInput(request, params)
-        if (!permissionService.hasGlobalPermissions(organismJson, GlobalPermissionEnum.ADMIN)) {
-            def error = [error: 'not authorized to view the metadata']
-            log.error(error.error)
-            render error as JSON
-            return
+        CommonsMultipartFile organismDataFile = request.getFile(FeatureStringEnum.ORGANISM_DATA.value)
+//        CommonsMultipartFile searchDatabaseDataFile = request.getFile(FeatureStringEnum.SEARCH_DATABASE_DATA.value)
+        if (organismDataFile ) {
+          File archiveFile = new File(organismDataFile.getOriginalFilename())
+          File organismDirectory = new File(organism.directory)
+          assert  organismDirectory.deleteDir()
+          assert organismDirectory.mkdir()
+          assert organismDirectory.setWritable(true)
+          fileService.decompress(archiveFile, organism.directory , null, false)
         }
-        Organism organism = preferenceService.getOrganismForTokenInDB(organismJson.organism)
-        if (!organism) {
-            def error = [error: 'The organism does not exist']
-            log.error(error.error)
-            render error as JSON
-            return
+        if (checkOrganism(organism)) {
+          if (madeObsolete) {
+            // TODO: remove all organism permissions
+            permissionService.removeAllPermissions(organism)
+          }
+          organism.save(flush: true, insert: false, failOnError: true)
+          sequenceService.loadRefSeqs(organism)
+//          preferenceService.setCurrentOrganism(permissionService.getCurrentUser(requestObject), organism, clientToken)
+        } else {
+          throw new Exception("Bad organism directory: " + organism.directory)
         }
-        JSONObject metaData = new JSONObject()
-        metaData.creator = organism.getMetaData(FeatureStringEnum.CREATOR.value)
-        render metaData as JSON
 
-    }
 
-    @RestApiMethod(description = "Returns a JSON array of all organisms, or optionally, gets information about a specific organism", path = "/organism/findAllOrganisms", verb = RestApiVerb.POST)
-    @RestApiParams(params = [
-            @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) ID or commonName that can be used to uniquely identify an organism")
-    ])
-    def findAllOrganisms() {
-        try {
-            JSONObject requestObject = permissionService.handleInput(request, params)
-            Boolean showPublicOnly = requestObject.showPublicOnly ? Boolean.valueOf(requestObject.showPublicOnly) : false
-            Boolean showObsolete = requestObject.showObsolete ? Boolean.valueOf(requestObject.showObsolete) : false
-            List<Organism> organismList = []
-            if (requestObject.organism) {
-                log.debug "finding info for specific organism"
-                Organism organism = Organism.findByCommonName(requestObject.organism)
-                if (!organism) organism = Organism.findById(requestObject.organism)
-                if (!organism) {
-                    render([error: "Organism not found"] as JSON)
-                    return
-                }
-                List<PermissionEnum> permissionEnumList = permissionService.getOrganismPermissionsForUser(organism, permissionService.getCurrentUser(requestObject))
-                if (permissionService.findHighestEnum(permissionEnumList)?.rank > PermissionEnum.NONE.rank) {
-                    organismList.add(organism)
-                }
-            } else {
-                log.debug "finding all info"
-                //if (permissionService.isAdmin()) {
-                if (permissionService.hasGlobalPermissions(requestObject, GlobalPermissionEnum.ADMIN)) {
-                    organismList = showObsolete ? Organism.all : Organism.findAllByObsolete(false)
-                } else {
-                    organismList = permissionService.getOrganismsForCurrentUser(requestObject).filter() { o -> !o.obsolete }
-                }
-            }
+      } else {
+        throw new Exception('organism not found')
+      }
+      render findAllOrganisms() as JSON
+    }
+    catch (e) {
+      def error = [error: 'problem saving organism: ' + e]
+      render error as JSON
+      log.error(error.error)
+    }
+  }
+
+  @RestApiMethod(description = "Update organism metadata", path = "/organism/updateOrganismMetadata", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "id", type = "long", paramType = RestApiParamType.QUERY, description = "unique id of organism to change")
+    , @RestApiParam(name = "metadata", type = "string", paramType = RestApiParamType.QUERY, description = "organism metadata")
+  ])
+  @Transactional
+  def updateOrganismMetadata() {
+    log.debug "updating organism metadata ${params}"
+    try {
+      JSONObject organismJson = permissionService.handleInput(request, params)
+      permissionService.checkPermissions(organismJson, PermissionEnum.ADMINISTRATE)
+      Organism organism = Organism.findById(organismJson.id)
+      if (organism) {
+        log.debug "Updating organism metadata ${organismJson as JSON}"
+        organism.metadata = organismJson.metadata
+        organism.save(flush: true, insert: false, failOnError: true)
+      } else {
+        throw new Exception('Organism not found')
+      }
+      render new JSONObject() as JSON
+    }
+    catch (e) {
+      def error = [error: 'problem saving organism: ' + e]
+      render error as JSON
+      log.error(error.error)
+    }
+  }
+
+  @RestApiMethod(description = "Get creator metadata for organism, returns userId as String", path = "/organism/getOrganismCreator", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "ID or commonName that can be used to uniquely identify an organism")
+  ])
+  def getOrganismCreator() {
+    JSONObject organismJson = permissionService.handleInput(request, params)
+    if (!permissionService.hasGlobalPermissions(organismJson, GlobalPermissionEnum.ADMIN)) {
+      def error = [error: 'not authorized to view the metadata']
+      log.error(error.error)
+      render error as JSON
+      return
+    }
+    Organism organism = preferenceService.getOrganismForTokenInDB(organismJson.organism)
+    if (!organism) {
+      def error = [error: 'The organism does not exist']
+      log.error(error.error)
+      render error as JSON
+      return
+    }
+    JSONObject metaData = new JSONObject()
+    metaData.creator = organism.getMetaData(FeatureStringEnum.CREATOR.value)
+    render metaData as JSON
+
+  }
+
+  @RestApiMethod(description = "Returns a JSON array of all organisms, or optionally, gets information about a specific organism", path = "/organism/findAllOrganisms", verb = RestApiVerb.POST)
+  @RestApiParams(params = [
+    @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
+    , @RestApiParam(name = "organism", type = "string", paramType = RestApiParamType.QUERY, description = "(optional) ID or commonName that can be used to uniquely identify an organism")
+  ])
+  def findAllOrganisms() {
+    try {
+      JSONObject requestObject = permissionService.handleInput(request, params)
+      Boolean showPublicOnly = requestObject.showPublicOnly ? Boolean.valueOf(requestObject.showPublicOnly) : false
+      Boolean showObsolete = requestObject.showObsolete ? Boolean.valueOf(requestObject.showObsolete) : false
+      List<Organism> organismList = []
+      if (requestObject.organism) {
+        log.debug "finding info for specific organism"
+        Organism organism = Organism.findByCommonName(requestObject.organism)
+        if (!organism) organism = Organism.findById(requestObject.organism)
+        if (!organism) {
+          render([error: "Organism not found"] as JSON)
+          return
+        }
+        List<PermissionEnum> permissionEnumList = permissionService.getOrganismPermissionsForUser(organism, permissionService.getCurrentUser(requestObject))
+        if (permissionService.findHighestEnum(permissionEnumList)?.rank > PermissionEnum.NONE.rank) {
+          organismList.add(organism)
+        }
+      } else {
+        log.debug "finding all info"
+        //if (permissionService.isAdmin()) {
+        if (permissionService.hasGlobalPermissions(requestObject, GlobalPermissionEnum.ADMIN)) {
+          organismList = showObsolete ? Organism.all : Organism.findAllByObsolete(false)
+        } else {
+          organismList = permissionService.getOrganismsForCurrentUser(requestObject).filter() { o -> !o.obsolete }
+        }
+      }
 
-            if (!organismList) {
-                def error = [error: 'Not authorized for any organisms']
-                render error as JSON
-                return
-            }
+      if (!organismList) {
+        def error = [error: 'Not authorized for any organisms']
+        render error as JSON
+        return
+      }
 
-            UserOrganismPreference userOrganismPreference = UserOrganismPreference.findByUserAndCurrentOrganism(permissionService.getCurrentUser(requestObject), true, [max: 1, sort: "lastUpdated", order: "desc"])
-            Long defaultOrganismId = userOrganismPreference ? userOrganismPreference.organism.id : null
+      UserOrganismPreference userOrganismPreference = UserOrganismPreference.findByUserAndCurrentOrganism(permissionService.getCurrentUser(requestObject), true, [max: 1, sort: "lastUpdated", order: "desc"])
+      Long defaultOrganismId = userOrganismPreference ? userOrganismPreference.organism.id : null
 
-            JSONArray jsonArray = new JSONArray()
-            for (Organism organism in organismList) {
+      JSONArray jsonArray = new JSONArray()
+      for (Organism organism in organismList) {
 
 
-                def c = Feature.createCriteria()
+        def c = Feature.createCriteria()
 
-                def list = c.list {
-                    featureLocations {
-                        sequence {
-                            eq('organism', organism)
-                        }
-                    }
-                    'in'('class', requestHandlingService.viewableAnnotationList)
-                }
-                log.debug "${list}"
-                Integer annotationCount = list.size()
-                Integer sequenceCount = Sequence.countByOrganism(organism)
-
-                JSONObject jsonObject = [
-                        id                        : organism.id,
-                        commonName                : organism.commonName,
-                        blatdb                    : organism.blatdb,
-                        directory                 : organism.directory,
-                        annotationCount           : annotationCount,
-                        sequences                 : sequenceCount,
-                        genus                     : organism.genus,
-                        species                   : organism.species,
-                        valid                     : organism.valid,
-                        publicMode                : organism.publicMode,
-                        obsolete                  : organism.obsolete,
-                        nonDefaultTranslationTable: organism.nonDefaultTranslationTable,
-                        metadata                  : organism.metadata,
-                        currentOrganism           : defaultOrganismId != null ? organism.id == defaultOrganismId : false
-                ] as JSONObject
-                jsonArray.add(jsonObject)
+        def list = c.list {
+          featureLocations {
+            sequence {
+              eq('organism', organism)
             }
-            render jsonArray as JSON
-        }
-        catch (Exception e) {
-            e.printStackTrace()
-            def error = [error: e.message]
-            render error as JSON
+          }
+          'in'('class', requestHandlingService.viewableAnnotationList)
         }
+        log.debug "${list}"
+        Integer annotationCount = list.size()
+        Integer sequenceCount = Sequence.countByOrganism(organism)
+
+        JSONObject jsonObject = [
+          id                        : organism.id,
+          commonName                : organism.commonName,
+          blatdb                    : organism.blatdb,
+          directory                 : organism.directory,
+          annotationCount           : annotationCount,
+          sequences                 : sequenceCount,
+          genus                     : organism.genus,
+          species                   : organism.species,
+          valid                     : organism.valid,
+          publicMode                : organism.publicMode,
+          obsolete                  : organism.obsolete,
+          nonDefaultTranslationTable: organism.nonDefaultTranslationTable,
+          metadata                  : organism.metadata,
+          currentOrganism           : defaultOrganismId != null ? organism.id == defaultOrganismId : false
+        ] as JSONObject
+        jsonArray.add(jsonObject)
+      }
+      render jsonArray as JSON
+    }
+    catch (Exception e) {
+      e.printStackTrace()
+      def error = [error: e.message]
+      render error as JSON
     }
+  }
 
 /**
  * Permissions handled upstream
  * @return
  */
-    def report() {
-        Map<Organism, OrganismSummary> organismSummaryListInstance = new TreeMap<>(new Comparator<Organism>() {
-            @Override
-            int compare(Organism o1, Organism o2) {
-                return o1.commonName <=> o2.commonName
-            }
-        })
-
-        // global version
-        OrganismSummary organismSummaryInstance = permissionService.currentUser.roles.first().rank == GlobalPermissionEnum.ADMIN.rank ? reportService.generateAllFeatureSummary() : new OrganismSummary()
+  def report() {
+    Map<Organism, OrganismSummary> organismSummaryListInstance = new TreeMap<>(new Comparator<Organism>() {
+      @Override
+      int compare(Organism o1, Organism o2) {
+        return o1.commonName <=> o2.commonName
+      }
+    })
+
+    // global version
+    OrganismSummary organismSummaryInstance = permissionService.currentUser.roles.first().rank == GlobalPermissionEnum.ADMIN.rank ? reportService.generateAllFeatureSummary() : new OrganismSummary()
 //        OrganismSummary organismSummaryInstance = reportService.generateAllFeatureSummary()
 
 //        def organismPermissions = permissionService.getOrganismsWithPermission(permissionService.currentUser)
-        def organisms = permissionService.getOrganismsWithMinimumPermission(permissionService.currentUser, PermissionEnum.ADMINISTRATE)
+    def organisms = permissionService.getOrganismsWithMinimumPermission(permissionService.currentUser, PermissionEnum.ADMINISTRATE)
 
 
-        organisms.each { organism ->
-            OrganismSummary thisOrganismSummaryInstance = reportService.generateOrganismSummary(organism)
-            organismSummaryListInstance.put(organism, thisOrganismSummaryInstance)
-        }
+    organisms.each { organism ->
+      OrganismSummary thisOrganismSummaryInstance = reportService.generateOrganismSummary(organism)
+      organismSummaryListInstance.put(organism, thisOrganismSummaryInstance)
+    }
 
 
-        respond organismSummaryInstance, model: [organismSummaries: organismSummaryListInstance, isSuperAdmin: permissionService.isAdmin()]
-    }
+    respond organismSummaryInstance, model: [organismSummaries: organismSummaryListInstance, isSuperAdmin: permissionService.isAdmin()]
+  }
 
-    protected void notFound() {
-        request.withFormat {
-            form multipartForm {
-                flash.message = message(code: 'default.not.found.message', args: [message(code: 'organism.label', default: 'Organism'), params.id])
-                redirect action: "index", method: "GET"
-            }
-            '*' { render status: NOT_FOUND }
-        }
+  protected void notFound() {
+    request.withFormat {
+      form multipartForm {
+        flash.message = message(code: 'default.not.found.message', args: [message(code: 'organism.label', default: 'Organism'), params.id])
+        redirect action: "index", method: "GET"
+      }
+      '*' { render status: NOT_FOUND }
     }
+  }
 
 }
diff --git a/web-app/js/restapidoc/restapidoc.json b/web-app/js/restapidoc/restapidoc.json
index 35ea8c93f..f6918eb4f 100644
--- a/web-app/js/restapidoc/restapidoc.json
+++ b/web-app/js/restapidoc/restapidoc.json
@@ -2,14 +2,14 @@
    "basePath": "Fill with basePath config",
    "apis": [
       {
-         "jsondocId": "e1d03f71-8147-44ec-9525-89b4c567d20d",
+         "jsondocId": "1c6a6116-54ef-4465-9cfe-d71bb16da899",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "83f32c5a-d543-4f1a-83b2-69898b2ed6a8",
+                     "jsondocId": "841aa1fb-6ed9-438f-8982-78b69684f57b",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -18,7 +18,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f91a4b47-20c5-4bdc-9d9d-2b6499e9d6a2",
+                     "jsondocId": "c315eb01-2ebb-4346-bde9-8f9e8f2b40d6",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -27,7 +27,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "5b53bf04-44f3-472e-945c-5916ee3ad46f",
+                     "jsondocId": "948d36a0-32be-4722-9e28-89e96d83f410",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -36,7 +36,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6cf4727d-8547-4bdc-a473-cbd3c3c2b291",
+                     "jsondocId": "e6b2f0fe-74f5-40a2-90ef-91f6de10ed13",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -45,7 +45,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "460d4b08-5569-4a89-b486-83fa6ddc94e6",
+                     "jsondocId": "73773f52-85fd-496b-9570-9a61fdd0c2f1",
                      "name": "features",
                      "format": "",
                      "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','name':'gene01'}",
@@ -57,9 +57,9 @@
                "verb": "POST",
                "description": "Set name of a feature",
                "methodName": "setName",
-               "jsondocId": "259fc23e-47eb-464f-a04b-45d9ad6d3060",
+               "jsondocId": "32b5331e-71ee-4664-8d04-b07d0c8bc210",
                "bodyobject": {
-                  "jsondocId": "4fd216c0-42f3-4e10-bb04-eee968ca6027",
+                  "jsondocId": "ef8d29ac-8a14-473b-a3dd-5d1b00a1ce0e",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -69,7 +69,7 @@
                "apierrors": [],
                "path": "/annotationEditor/setName",
                "response": {
-                  "jsondocId": "df4488fd-03dc-4194-adb5-527bc15ff682",
+                  "jsondocId": "dd79370e-1aa1-452a-ac60-eb503bde8cec",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -82,7 +82,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "af0da809-8fd5-4b43-a224-dd0db53f8a90",
+                     "jsondocId": "188d6d22-b94c-4fa5-924e-aa1dee8a1f1d",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -91,7 +91,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7c7e775a-f335-41a9-b811-da958033eb39",
+                     "jsondocId": "a7349ace-b6cb-4e3f-b608-2d7ed44281e6",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -100,7 +100,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d3585696-d434-4e99-a9da-4fdeec81293a",
+                     "jsondocId": "f8121e12-98b9-4101-9a89-c969aad84965",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -109,7 +109,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a8853b70-6351-4ffd-b019-33ade26854ba",
+                     "jsondocId": "f79e0d20-8cba-46f4-b248-90d844c55907",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -118,21 +118,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a3222550-f642-487c-8676-dfc0571b19c9",
+                     "jsondocId": "4b5e3d64-6ce2-4cf9-8379-e968fa986e42",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray of JSON feature objects ('uniquename' required) JSONArray described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
+                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','status':'existing-status-string'}.  Available status found here: /availableStatus/ ",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Get comments",
-               "methodName": "getComments",
-               "jsondocId": "04cf76b4-3464-41f4-9f02-db5577ad36c7",
+               "description": "Set status of a feature",
+               "methodName": "setStatus",
+               "jsondocId": "5c10c189-ce54-4a38-82a2-9c2bafc28223",
                "bodyobject": {
-                  "jsondocId": "a9c996de-22f1-4868-9c0d-8390ddbf7b84",
+                  "jsondocId": "f632ce34-a0e3-4bdc-9c28-c1653e595271",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -140,9 +140,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/getComments",
+               "path": "/annotationEditor/setStatus",
                "response": {
-                  "jsondocId": "42d50045-3c2d-44d0-ab95-40217155cba1",
+                  "jsondocId": "19940cb4-bef0-4bda-bbad-11d2d48bb5cd",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -155,7 +155,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "319d7681-f09b-418e-bd2f-e323742eb6ed",
+                     "jsondocId": "044974aa-a3c1-4e43-8ac5-d5593bcd79dc",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -164,7 +164,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f4064b2a-a25b-4845-a456-6a67709f0cc1",
+                     "jsondocId": "3ec1fce7-ece2-4af7-a2ff-7e934f53d08c",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -173,7 +173,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "2a8cd67c-5bce-4330-809a-54fea1a36b10",
+                     "jsondocId": "5785608f-31f1-41ae-a2d7-dd9901c296c6",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -182,7 +182,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "bb38bd06-6381-48f5-8f8a-1d6c2aff0759",
+                     "jsondocId": "41551325-8be2-4137-9090-8e6a957cdeb6",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -191,48 +191,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a1c22970-7367-4b8e-b442-12c50abb5dbb",
+                     "jsondocId": "700016fc-4073-427e-a012-c08fa458f78e",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','status':'existing-status-string'}.  Available status found here: /availableStatus/ ",
+                     "description": "JSONArray of JSON feature objects ('uniquename' required) JSONArray described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Set status of a feature",
-               "methodName": "setStatus",
-               "jsondocId": "2a082930-6009-468d-a390-96ea3e566053",
-               "bodyobject": {
-                  "jsondocId": "b314413e-505a-4dc6-87f2-45f380dbcb03",
-                  "mapValueObject": "",
-                  "mapKeyObject": "",
-                  "multiple": "Unknow",
-                  "map": "",
-                  "object": "annotation editor"
-               },
-               "apierrors": [],
-               "path": "/annotationEditor/setStatus",
-               "response": {
-                  "jsondocId": "5bad7ceb-1283-426c-a309-24183fb01d50",
-                  "mapValueObject": "",
-                  "mapKeyObject": "",
-                  "object": "annotation editor"
-               },
-               "produces": ["application/json"],
-               "consumes": ["application/json"]
-            },
-            {
-               "headers": [],
-               "pathparameters": [],
-               "queryparameters": [],
-               "verb": "POST",
-               "description": "Returns a translation table as JSON",
-               "methodName": "getTranslationTable",
-               "jsondocId": "62cbae9d-b26b-41a3-84c4-2fd284ed880f",
+               "description": "Get comments",
+               "methodName": "getComments",
+               "jsondocId": "ac3cb614-fe63-4589-bca2-862013a01a89",
                "bodyobject": {
-                  "jsondocId": "5d895925-10c3-4ec6-ae93-315c7ebdb089",
+                  "jsondocId": "63ad3944-72cd-4c5d-aa69-bbe40be7db8d",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -240,9 +213,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/getTranslationTable",
+               "path": "/annotationEditor/getComments",
                "response": {
-                  "jsondocId": "edda5fcb-263d-40d5-aee0-71deec00bc45",
+                  "jsondocId": "51a7991c-44aa-4196-9fd9-fbdcc385d194",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -255,7 +228,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "1aedcb52-4824-42c2-b705-d4856542df44",
+                     "jsondocId": "b01f181c-b58c-4c29-81ee-1ef66c7586a3",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -264,7 +237,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a49c5791-f421-4704-8281-1e98202a4294",
+                     "jsondocId": "c34ff42b-ab82-4141-9f5b-62c604b7521e",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -273,16 +246,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "0a3fa8aa-0b33-4323-b267-5a5a1e7a2c19",
-                     "name": "organism",
-                     "format": "",
-                     "description": "(optional) Organism ID or common name",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "1fbc5507-3500-4722-b750-4b9ff3c69a7a",
+                     "jsondocId": "ecba601e-ebb3-485d-a09c-c496c6bb2841",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -291,39 +255,30 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8efd7435-26da-46dc-a161-d9000bb2b2aa",
-                     "name": "suppressHistory",
-                     "format": "",
-                     "description": "Suppress the history of this operation",
-                     "type": "boolean",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "02c56db2-fd84-4a3c-a2a7-af332d198668",
-                     "name": "suppressEvents",
+                     "jsondocId": "f3cb456a-0fe7-4e98-959a-9491a845e8c8",
+                     "name": "organism",
                      "format": "",
-                     "description": "Suppress instant update of the user interface",
-                     "type": "boolean",
+                     "description": "(optional) Organism ID or common name",
+                     "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "39482a53-5dab-4ebc-bd10-5b7c1188ce7a",
+                     "jsondocId": "4b99ccbf-4bd9-4016-8e69-942db6c8ac5f",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray of JSON feature objects described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
+                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','description':'some descriptive test'}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Add non-coding genomic feature",
-               "methodName": "addFeature",
-               "jsondocId": "4451c6d8-cb55-4564-876e-3e804270b136",
+               "description": "Set description for a feature",
+               "methodName": "setDescription",
+               "jsondocId": "7a8a5f94-3ccb-4445-b12f-8fa11d6b70ea",
                "bodyobject": {
-                  "jsondocId": "e881515d-f42a-412b-848d-97ffe420d2ea",
+                  "jsondocId": "37ae792b-0bd2-40ac-b50f-e9c6f54199b5",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -331,9 +286,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/addFeature",
+               "path": "/annotationEditor/setDescription",
                "response": {
-                  "jsondocId": "4937d53c-964e-48ca-830a-435c0ec92a29",
+                  "jsondocId": "00a66778-4d09-4820-b30f-9025d356efb1",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -346,7 +301,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "d867322b-82e2-4e6e-aaf3-ec0f799cf186",
+                     "jsondocId": "c417210c-e85a-4024-8a13-a45d6d4c4e82",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -355,7 +310,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f0f435ed-9bb2-4a6d-9099-79e0db8c981e",
+                     "jsondocId": "d7d3da15-ec47-4b61-b5cf-d3ca79afdd45",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -364,16 +319,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9c053de1-a681-48f6-8603-34fd46787696",
-                     "name": "organism",
-                     "format": "",
-                     "description": "(optional) Organism ID or common name",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "0a8bb6aa-1cda-464e-9385-8be2e76ef874",
+                     "jsondocId": "5d96bb19-bb96-42f5-b64c-219d7d2ce388",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -382,39 +328,30 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c5adece8-071f-4faa-abf3-91076103a578",
-                     "name": "suppressHistory",
-                     "format": "",
-                     "description": "Suppress the history of this operation",
-                     "type": "boolean",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "0f4e8f7f-307e-4278-9892-fd49f8f82355",
-                     "name": "suppressEvents",
+                     "jsondocId": "0f4c97f7-7011-4349-9cbb-9a4ab214272f",
+                     "name": "organism",
                      "format": "",
-                     "description": "Suppress instant update of the user interface",
-                     "type": "boolean",
+                     "description": "(optional) Organism ID or common name",
+                     "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3ec315e3-274f-4e3b-bb65-e5004b0e1b56",
+                     "jsondocId": "c9ddcb31-7d25-47e6-8e0f-5efe65b1aa04",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray of JSON feature objects described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
+                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','symbol':'Pax6a'}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Add an exon",
-               "methodName": "addExon",
-               "jsondocId": "2f108dfc-ab05-418e-8388-0790dd515ba7",
+               "description": "Set symbol of a feature",
+               "methodName": "setSymbol",
+               "jsondocId": "4c095b5b-f92c-49ff-b573-c23018871557",
                "bodyobject": {
-                  "jsondocId": "df08d6b4-5dfe-4f2a-b7d3-a60e21176bf0",
+                  "jsondocId": "1131673b-62af-4c92-b07b-08ff1fab8c12",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -422,9 +359,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/addExon",
+               "path": "/annotationEditor/setSymbol",
                "response": {
-                  "jsondocId": "1ba11d56-3342-40a1-b347-928b9741fff6",
+                  "jsondocId": "79c7c1b1-6025-41d5-9042-c8a32dc1bd99",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -437,7 +374,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "57c2a791-f2c9-42df-8dd8-22d6aa0daf49",
+                     "jsondocId": "227221dd-fca2-4e6d-8382-593840ef891b",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -446,7 +383,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3185302e-aef7-41e9-a13a-bc52be109cb2",
+                     "jsondocId": "0c7569b0-2427-4c34-9851-e6456f35a52d",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -455,7 +392,16 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "880b664d-557e-4240-9cc7-7d408663b4d6",
+                     "jsondocId": "45e1c160-2f6a-44a3-a7e4-a4d1ea1b8a96",
+                     "name": "organism",
+                     "format": "",
+                     "description": "(optional) Organism ID or common name",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "f3f35521-e792-48d0-b8e9-44293aaeda7c",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -464,30 +410,39 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "df50c1ed-071b-4791-b0d0-052ffd4398f9",
-                     "name": "organism",
+                     "jsondocId": "6f0ced35-20af-4d68-aa7a-b2b0fa6a3ba8",
+                     "name": "suppressHistory",
                      "format": "",
-                     "description": "(optional) Organism ID or common name",
-                     "type": "string",
+                     "description": "Suppress the history of this operation",
+                     "type": "boolean",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "7fd31ba4-0a0e-4bb2-b92c-d0441f91c7fb",
+                     "name": "suppressEvents",
+                     "format": "",
+                     "description": "Suppress instant update of the user interface",
+                     "type": "boolean",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e3b6f9c2-b966-402d-8e31-6fbb82c7dbdb",
+                     "jsondocId": "1da1df3f-fb26-4283-a778-69b516eefc43",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray of JSON feature objects ('uniquename' required) that include an added 'comments' JSONArray described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
+                     "description": "JSONArray of JSON feature objects described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Add comments",
-               "methodName": "addComments",
-               "jsondocId": "34d97f80-d47e-4dee-9085-83cb86cef48c",
+               "description": "Set exon feature boundaries",
+               "methodName": "setExonBoundaries",
+               "jsondocId": "d2e4e4b7-e029-4583-9634-c8865d789cf4",
                "bodyobject": {
-                  "jsondocId": "bc57bf34-7b17-4875-800b-847c43c75732",
+                  "jsondocId": "81bee845-7d4f-4622-8e9d-4fcb1d3c7482",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -495,9 +450,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/addComments",
+               "path": "/annotationEditor/setExonBoundaries",
                "response": {
-                  "jsondocId": "7cf9d744-6748-4b3d-9e88-7fcbb1efa786",
+                  "jsondocId": "7ccaf709-473f-4154-a3e3-5cf93a0825cc",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -510,7 +465,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "7dc88f4b-fe26-4cb8-a75a-4cbb69e4d2e6",
+                     "jsondocId": "d6d9a7e8-0ef5-4f80-8126-acb29118802d",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -519,7 +474,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "18a0281f-3ca5-413c-a91b-5b08a2e38baa",
+                     "jsondocId": "6123650e-ce5f-4369-bd11-8cd50fbf7c4f",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -528,7 +483,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "bf9cbc5b-f040-4c6c-b239-74bf20ad50f2",
+                     "jsondocId": "e6fc2f7f-5ad4-4ea4-abf5-e696f59e59ab",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -537,7 +492,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9c434aa6-062e-45f9-b21d-60817c7295bc",
+                     "jsondocId": "9b338887-7459-4989-bcfc-d792c2dbbbdd",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -546,21 +501,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ec8158ac-7322-441b-b3e8-e120c6b0781e",
+                     "jsondocId": "1d2baf66-b3bc-41c8-afd4-468b6196688e",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray of JSON feature objects ('uniquename' required) that include an added 'comments' JSONArray described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
+                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','non_reserved_properties':[{'tag':'clockwork','value':'orange'},{'tag':'color','value':'purple'}]}.  Available status found here: /availableStatus/ ",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Delete comments",
-               "methodName": "deleteComments",
-               "jsondocId": "327ced46-53ab-42eb-a3b0-de003b1af609",
+               "description": "Add attribute (key,value pair) to feature",
+               "methodName": "addAttribute",
+               "jsondocId": "716a072d-d695-4e06-b83d-7ddd23982538",
                "bodyobject": {
-                  "jsondocId": "07b57005-a631-4226-8939-37789329f7c5",
+                  "jsondocId": "bc24b8a4-62c3-48fc-890c-9a411c33f2e5",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -568,9 +523,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/deleteComments",
+               "path": "/annotationEditor/addAttribute",
                "response": {
-                  "jsondocId": "51f18756-e755-4bc6-98d1-2d317e8edcbb",
+                  "jsondocId": "ab623c95-7305-42cb-b3d7-0373ea7dab4d",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -581,59 +536,13 @@
             {
                "headers": [],
                "pathparameters": [],
-               "queryparameters": [
-                  {
-                     "jsondocId": "c3b002f4-f8fd-4841-a5fe-b66e30b3d1f7",
-                     "name": "username",
-                     "format": "",
-                     "description": "",
-                     "type": "email",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "060b1275-fb10-4738-a51c-538e36b41f29",
-                     "name": "password",
-                     "format": "",
-                     "description": "",
-                     "type": "password",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "9437a48e-c65d-4cb6-9e52-8c7bc58371f5",
-                     "name": "sequence",
-                     "format": "",
-                     "description": "(optional) Sequence name",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "01922cdd-e626-4cb5-9a8f-7248aa3c21c8",
-                     "name": "organism",
-                     "format": "",
-                     "description": "(optional) Organism ID or common name",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "c3d00223-e0c3-4fe5-ad8a-23318f9c6857",
-                     "name": "features",
-                     "format": "",
-                     "description": "JSONArray of JSON feature objects ('uniquename' required) that include an added 'old_comments','new_comments' JSONArray described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
-                     "type": "JSONArray",
-                     "required": "true",
-                     "allowedvalues": []
-                  }
-               ],
+               "queryparameters": [],
                "verb": "POST",
-               "description": "Update comments",
-               "methodName": "updateComments",
-               "jsondocId": "fdd780f1-ba0f-41b0-a2ac-2b0610940b68",
+               "description": "Returns a translation table as JSON",
+               "methodName": "getTranslationTable",
+               "jsondocId": "2f0b5e4c-b917-46d1-8eeb-3a5d7042dd0a",
                "bodyobject": {
-                  "jsondocId": "a7dcd9c7-c1a0-49a5-afb7-af93b0cf46dd",
+                  "jsondocId": "6ce3c072-df04-4429-8a40-e9ac83a80b5d",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -641,9 +550,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/updateComments",
+               "path": "/annotationEditor/getTranslationTable",
                "response": {
-                  "jsondocId": "e294ad74-b069-4c80-bc74-c83e385c7f32",
+                  "jsondocId": "87791dca-0943-4991-8bd8-fa966c988c72",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -656,7 +565,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "247dca98-cee0-4288-a335-7742cfd44e75",
+                     "jsondocId": "6b18a79a-4096-4027-8990-a12e7f828d39",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -665,7 +574,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f4db77a0-4993-4787-94c3-24c91bf9d93d",
+                     "jsondocId": "f99d8fd6-f29f-42c5-b753-1ef6290a3510",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -674,25 +583,25 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b034fa77-2509-4873-8fee-f72eb8296ff4",
-                     "name": "sequence",
+                     "jsondocId": "4dea63bd-32b2-4d34-bd20-683796781ae7",
+                     "name": "organism",
                      "format": "",
-                     "description": "(optional) Sequence name",
+                     "description": "(optional) Organism ID or common name",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8e4b62fa-2351-4445-b357-4477939dbbde",
-                     "name": "organism",
+                     "jsondocId": "b89ca62d-e642-4b1f-893c-b9217eb5e449",
+                     "name": "sequence",
                      "format": "",
-                     "description": "(optional) Organism ID or common name",
+                     "description": "(optional) Sequence name",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "952d4f22-fc90-4f65-8893-064f60495a10",
+                     "jsondocId": "928536bc-260e-4316-8c68-a12e087951b1",
                      "name": "suppressHistory",
                      "format": "",
                      "description": "Suppress the history of this operation",
@@ -701,7 +610,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "5b0516c0-fcf2-47af-a422-54c06d5cf091",
+                     "jsondocId": "3a9f0750-fb43-43e1-bea5-823f4e430e38",
                      "name": "suppressEvents",
                      "format": "",
                      "description": "Suppress instant update of the user interface",
@@ -710,7 +619,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6ead525c-4d18-45eb-a158-e8186c1f0ba0",
+                     "jsondocId": "3837bf8f-bb24-45bb-9857-24f5b0fcfb8f",
                      "name": "features",
                      "format": "",
                      "description": "JSONArray of JSON feature objects described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
@@ -720,11 +629,11 @@
                   }
                ],
                "verb": "POST",
-               "description": "Add transcript",
-               "methodName": "addTranscript",
-               "jsondocId": "60d6f6fb-43fb-4ca7-8eae-0038c48b40cd",
+               "description": "Add non-coding genomic feature",
+               "methodName": "addFeature",
+               "jsondocId": "17512aac-2fdf-495c-9969-f82eecec334b",
                "bodyobject": {
-                  "jsondocId": "53d69dbe-e544-42f6-8029-37a3af25379c",
+                  "jsondocId": "40199ee6-72af-40ae-a3f6-7c319d8efe63",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -732,9 +641,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/addTranscript",
+               "path": "/annotationEditor/addFeature",
                "response": {
-                  "jsondocId": "a21772ce-7959-4452-b866-cbc724639e62",
+                  "jsondocId": "f26a6f56-9024-4fdc-876e-a9ac3ec21cff",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -747,7 +656,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "6d5589dc-d995-402f-8395-c54f3c90ceae",
+                     "jsondocId": "a98f0c43-6147-4bf1-82c8-8665e43ca6fc",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -756,7 +665,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c5817cd3-9b6e-4e76-a3e2-27bf15904587",
+                     "jsondocId": "98dcdf2e-d1f6-4de8-8260-3a2567b8d311",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -765,25 +674,25 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "96690f3b-479c-482e-b48c-a707a10adf2a",
-                     "name": "sequence",
+                     "jsondocId": "72681b10-c437-45a1-b7a3-07d0540e8ed9",
+                     "name": "organism",
                      "format": "",
-                     "description": "(optional) Sequence name",
+                     "description": "(optional) Organism ID or common name",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "28b4595a-4bb0-4ee2-83c8-2be6cf3c2eba",
-                     "name": "organism",
+                     "jsondocId": "d3b0895b-a01e-44fc-ba30-ffb417b4a524",
+                     "name": "sequence",
                      "format": "",
-                     "description": "(optional) Organism ID or common name",
+                     "description": "(optional) Sequence name",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c858d7ec-2b11-4d51-8115-51a708c3fc52",
+                     "jsondocId": "13b83dd3-ade9-4c50-800e-b22ae0d312e8",
                      "name": "suppressHistory",
                      "format": "",
                      "description": "Suppress the history of this operation",
@@ -792,7 +701,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "82cd7e65-c97d-4091-86a0-0246eb16ebdf",
+                     "jsondocId": "968daa83-d566-42de-b915-ca4127c02f65",
                      "name": "suppressEvents",
                      "format": "",
                      "description": "Suppress instant update of the user interface",
@@ -801,21 +710,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a1b0ba8d-0712-44d1-9f53-915db7f568dd",
+                     "jsondocId": "f4f294b5-b808-43d3-9b94-bfab649ab055",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing a single JSONObject feature that contains 'uniquename'",
+                     "description": "JSONArray of JSON feature objects described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Duplicate transcript",
-               "methodName": "duplicateTranscript",
-               "jsondocId": "b5df289d-e851-4415-8541-fc539cc7abc0",
+               "description": "Add an exon",
+               "methodName": "addExon",
+               "jsondocId": "ae0bd131-e329-4a04-931b-ffac023f090a",
                "bodyobject": {
-                  "jsondocId": "f9ef95a7-881e-4fe0-9caf-9cebda4168be",
+                  "jsondocId": "9af63e8a-c6e6-4b89-8718-f621d00a53bc",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -823,9 +732,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/duplicateTranscript",
+               "path": "/annotationEditor/addExon",
                "response": {
-                  "jsondocId": "993587c3-8ead-467c-ac65-c7d115c93f68",
+                  "jsondocId": "652e5610-3947-4dec-b5d0-49e456d6f955",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -838,7 +747,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "1f999e24-c567-4484-a2f1-eebd1b6f6376",
+                     "jsondocId": "376ece1f-3832-4b38-819a-5c8fc0961de8",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -847,7 +756,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6fc34950-3865-45c5-b0f3-10a31134f97e",
+                     "jsondocId": "5e6d499f-ef13-4ffe-9ecf-0da1687863f5",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -856,7 +765,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8fd08912-7dfa-4d06-8dc1-2bf0b4b5b927",
+                     "jsondocId": "d92c6065-092f-450d-b98a-95f97da7cd03",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -865,7 +774,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "835379b9-942e-4b04-adce-57fd018d47ad",
+                     "jsondocId": "60762d0b-8586-417c-9427-35a6b7309028",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -874,21 +783,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "33a5b093-d6e9-47ff-a9d0-eac820a6a4f7",
+                     "jsondocId": "0abf2206-d639-471a-82c7-fb6db936d750",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing a single JSONObject feature that contains {'uniquename':'ABCD-1234','location':{'fmin':12}}",
+                     "description": "JSONArray of JSON feature objects ('uniquename' required) that include an added 'comments' JSONArray described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Set translation start",
-               "methodName": "setTranslationStart",
-               "jsondocId": "c9dc2a8a-9bc1-4739-9274-3c452a0805b8",
+               "description": "Add comments",
+               "methodName": "addComments",
+               "jsondocId": "1e922fd4-0171-4dbd-a8ff-b4334ba9d57d",
                "bodyobject": {
-                  "jsondocId": "73538bda-f956-487a-bee1-842682889b0b",
+                  "jsondocId": "4b22f3e8-3180-428a-bcdf-ba5f4ba5dad6",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -896,9 +805,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/setTranslationStart",
+               "path": "/annotationEditor/addComments",
                "response": {
-                  "jsondocId": "0f23f026-d266-4837-aae8-cdcd8f33e669",
+                  "jsondocId": "ca737e43-5414-4720-afc8-d519f48a146c",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -911,7 +820,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "d2ce5f18-5351-4e34-847b-d1bbb5ab0e44",
+                     "jsondocId": "e1a303a7-8ae7-4606-a672-b85dd190d243",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -920,7 +829,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "835f989e-4d30-4964-830d-74bf3d467218",
+                     "jsondocId": "c7582bf4-d7f2-47b9-afbd-09911e99a40b",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -929,7 +838,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8aa8806f-4430-4587-aa01-119cdd6ba72e",
+                     "jsondocId": "39c91453-d33a-4207-bb39-056669634246",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -938,7 +847,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b7168a04-da5d-49ec-b4bf-3b2919b739c0",
+                     "jsondocId": "09f210aa-de6e-49de-ae3c-92ac47891c51",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -947,21 +856,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1109c9fa-fae6-4c99-94b9-8c3e386cda44",
+                     "jsondocId": "c1e940e5-8a66-41cf-b63b-9d44090630b1",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing a single JSONObject feature that contains {'uniquename':'ABCD-1234','location':{'fmax':12}}",
+                     "description": "JSONArray of JSON feature objects ('uniquename' required) that include an added 'comments' JSONArray described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Set translation end",
-               "methodName": "setTranslationEnd",
-               "jsondocId": "e3dba6a3-d7e4-403e-9715-cf3419bede96",
+               "description": "Delete comments",
+               "methodName": "deleteComments",
+               "jsondocId": "9f6817df-e632-4dc7-91e9-d4e0350a5447",
                "bodyobject": {
-                  "jsondocId": "8c3d990a-7aa7-46e1-be5d-688672ae544b",
+                  "jsondocId": "a66076f4-bdd6-47df-b80f-492a54437853",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -969,9 +878,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/setTranslationEnd",
+               "path": "/annotationEditor/deleteComments",
                "response": {
-                  "jsondocId": "6a2d8459-1852-4235-9272-91e3cc6e151d",
+                  "jsondocId": "d48958ef-5229-4672-966a-3e26da12cec8",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -984,7 +893,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "36705f1b-84b5-4299-94f6-055c7cbfd5ea",
+                     "jsondocId": "75424627-1b51-484b-a864-2c7914ade64d",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -993,7 +902,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ae3433fd-a739-43c0-a455-415daae212af",
+                     "jsondocId": "1a2afb97-c99c-4199-8fb1-1f76de6f92f8",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1002,7 +911,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "fb4272f9-4d74-4d68-a676-2a4cde5eff69",
+                     "jsondocId": "a2e88f5f-6b8e-4886-8b00-afcc1240fdc4",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1011,7 +920,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "beb2d7a6-1da6-411e-a821-997157698864",
+                     "jsondocId": "939f8058-e430-48fa-847e-6e3576e17417",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -1020,21 +929,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "0c2f0c1b-dcc8-4f9f-9bae-7acdad456020",
+                     "jsondocId": "a8be44e3-b153-4828-9a17-9ac0b47dda6b",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing a single JSONObject feature that contains {'uniquename':'ABCD-1234'}",
+                     "description": "JSONArray of JSON feature objects ('uniquename' required) that include an added 'old_comments','new_comments' JSONArray described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Set longest ORF",
-               "methodName": "setLongestOrf",
-               "jsondocId": "e9a4a9ce-9f81-4ce7-bb94-49c4e2642b4e",
+               "description": "Update comments",
+               "methodName": "updateComments",
+               "jsondocId": "948a4fb5-b81c-4f2d-93b3-afa394244354",
                "bodyobject": {
-                  "jsondocId": "65e5acd5-75d1-4ed5-8659-da6127daaa34",
+                  "jsondocId": "4094ce72-7ac4-409b-87b2-c8da34c870ad",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1042,9 +951,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/setLongestOrf",
+               "path": "/annotationEditor/updateComments",
                "response": {
-                  "jsondocId": "d9507a18-5005-4b71-8ccd-07e06c5ab8dd",
+                  "jsondocId": "226e01c1-fd25-4b10-a72d-2c65dff31d60",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1057,7 +966,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "7f5a2465-c909-40b3-978a-888cd12d2e6d",
+                     "jsondocId": "46e38bea-9e6b-4492-bf5a-3d46a2c83eb8",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1066,7 +975,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7e9df84b-8e43-4f03-9c75-46579781b023",
+                     "jsondocId": "7ec383d9-a7c4-4863-9b19-1fe7257f2881",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1075,7 +984,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "33fe65aa-6c78-41c9-8c76-cf76946e6650",
+                     "jsondocId": "f7d97ed9-d3ba-4c65-a1da-81b8b89d473b",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1084,7 +993,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e548a081-9c86-4078-aa7d-2ffef1674a91",
+                     "jsondocId": "7dce3cf4-4b88-4b52-9daf-549c69dfecaf",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -1093,31 +1002,49 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "97760c93-0174-4e86-be35-52176dc36bb9",
-                     "name": "features",
+                     "jsondocId": "d436c145-4f67-4597-bebe-05ffa0e8eac6",
+                     "name": "suppressHistory",
                      "format": "",
-                     "description": "JSONArray containing feature objects with the location object defined {'uniquename':'ABCD-1234','location':{'fmin':2,'fmax':12}}",
-                     "type": "JSONArray",
+                     "description": "Suppress the history of this operation",
+                     "type": "boolean",
                      "required": "true",
                      "allowedvalues": []
-                  }
-               ],
-               "verb": "POST",
-               "description": "Set boundaries of genomic feature",
-               "methodName": "setBoundaries",
-               "jsondocId": "748e7b30-d95b-4075-a497-e24c005f13c3",
-               "bodyobject": {
-                  "jsondocId": "3d4b5528-c4e3-479a-ba10-7e29646ca7cb",
-                  "mapValueObject": "",
-                  "mapKeyObject": "",
-                  "multiple": "Unknow",
+                  },
+                  {
+                     "jsondocId": "1d13eebe-fd29-41c1-adfb-5f68729780e9",
+                     "name": "suppressEvents",
+                     "format": "",
+                     "description": "Suppress instant update of the user interface",
+                     "type": "boolean",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "f0dd60d2-308d-4879-b426-59ceafa31ae9",
+                     "name": "features",
+                     "format": "",
+                     "description": "JSONArray of JSON feature objects described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
+                     "type": "JSONArray",
+                     "required": "true",
+                     "allowedvalues": []
+                  }
+               ],
+               "verb": "POST",
+               "description": "Add transcript",
+               "methodName": "addTranscript",
+               "jsondocId": "0910e71c-7d3c-4efe-a4ce-bad9d93378c1",
+               "bodyobject": {
+                  "jsondocId": "5ec44983-1b1e-4bbc-843e-16bde1c9f713",
+                  "mapValueObject": "",
+                  "mapKeyObject": "",
+                  "multiple": "Unknow",
                   "map": "",
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/setBoundaries",
+               "path": "/annotationEditor/addTranscript",
                "response": {
-                  "jsondocId": "53b58dc6-53a1-4646-9422-268688a2b23b",
+                  "jsondocId": "774f091a-c4ec-4708-9426-b035a03e24e2",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1130,7 +1057,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "900c8996-72ff-4254-b3de-89369a7d2cbf",
+                     "jsondocId": "0f9ebb10-69e2-4688-b799-57bd44fb05d2",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1139,7 +1066,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f44e23be-cef3-47ea-8c2d-8c2a8a895183",
+                     "jsondocId": "efe9c243-aac5-4b94-8cf3-7e62a71401a0",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1148,7 +1075,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "273c137c-93da-4717-8803-08a4925e6941",
+                     "jsondocId": "047502e3-3e92-4f76-9351-f5bf2bee4b81",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1157,21 +1084,48 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "844cceb7-08e6-45f6-90c9-caba91e9c37e",
+                     "jsondocId": "fabd3aef-4b2b-4e2d-aa29-91c885c0270f",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "feabbb80-5d5f-4012-a167-1eb18fc00298",
+                     "name": "suppressHistory",
+                     "format": "",
+                     "description": "Suppress the history of this operation",
+                     "type": "boolean",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "e2ab02c5-5205-4bcd-bd87-cbebe5572462",
+                     "name": "suppressEvents",
+                     "format": "",
+                     "description": "Suppress instant update of the user interface",
+                     "type": "boolean",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "93c9ebbe-3649-427c-8405-0dd4e25eea38",
+                     "name": "features",
+                     "format": "",
+                     "description": "JSONArray containing a single JSONObject feature that contains 'uniquename'",
+                     "type": "JSONArray",
+                     "required": "true",
+                     "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Get all annotated features for a sequence",
-               "methodName": "getFeatures",
-               "jsondocId": "54d2dd57-25a2-4434-87a1-2a71b763cd43",
+               "description": "Duplicate transcript",
+               "methodName": "duplicateTranscript",
+               "jsondocId": "a1173e3b-39c2-479e-b67f-2314d5cd227a",
                "bodyobject": {
-                  "jsondocId": "f69fce9d-68dd-4876-982f-30316a163b69",
+                  "jsondocId": "3dfb8fc9-68b8-42ac-b871-d48a0c6338a5",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1179,9 +1133,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/getFeatures",
+               "path": "/annotationEditor/duplicateTranscript",
                "response": {
-                  "jsondocId": "1e334859-9d39-460b-93b6-44355fbcafb3",
+                  "jsondocId": "8329d425-a41b-4efa-8a9d-bd3d5b1582f4",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1194,7 +1148,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "57c64387-af94-4694-b053-eaf755d86bd5",
+                     "jsondocId": "1d1f17ce-2372-459e-b1e8-047d405c9868",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1203,7 +1157,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7d78c813-261f-4d50-9f6b-e5e83271601f",
+                     "jsondocId": "5d39a86d-5179-480a-ad74-ac8673f6dd86",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1212,7 +1166,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6706164e-4f5d-4964-8cc5-ac7da98f34fd",
+                     "jsondocId": "9011eaac-7c65-4220-ab8e-e4d6f7aca59c",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1221,21 +1175,30 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "4a9c7133-33aa-4b18-8b3d-af2ab571f507",
+                     "jsondocId": "dc4f2818-0c7f-4ecf-a5ed-5df6cc763a8f",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "1d72e914-550e-4148-9d00-32b6a84460a7",
+                     "name": "features",
+                     "format": "",
+                     "description": "JSONArray containing a single JSONObject feature that contains {'uniquename':'ABCD-1234','location':{'fmin':12}}",
+                     "type": "JSONArray",
+                     "required": "true",
+                     "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Get sequence alterations for a given sequence",
-               "methodName": "getSequenceAlterations",
-               "jsondocId": "29d7d8b8-f1ab-40ec-b3e5-349743df0ed8",
+               "description": "Set translation start",
+               "methodName": "setTranslationStart",
+               "jsondocId": "138613df-a418-45ba-ad19-c6a29d3f3513",
                "bodyobject": {
-                  "jsondocId": "8095cad3-162f-424a-a914-b7cdcbc7ea7b",
+                  "jsondocId": "dbb3601a-bbaf-4954-b6b6-93c38a3eb919",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1243,9 +1206,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/getSequenceAlterations",
+               "path": "/annotationEditor/setTranslationStart",
                "response": {
-                  "jsondocId": "ac2407ef-ba7a-40c5-8a76-b3d24fe76678",
+                  "jsondocId": "b9555d4c-f375-4cad-b521-061d8bcd269a",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1258,7 +1221,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "5d2a0ff1-b9b1-451a-879e-6252d1aa4644",
+                     "jsondocId": "9c6d784e-5d33-41b0-bcd4-3e57aad3d1c3",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1267,7 +1230,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ed463a0a-d09a-4545-8632-67489273b007",
+                     "jsondocId": "14b0f867-b5a7-494a-85e7-b8067c636f88",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1276,7 +1239,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "97271d72-57b2-4482-82b4-d654daeb93c5",
+                     "jsondocId": "250c023c-5b0c-4c42-9172-4da725b5c372",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1285,7 +1248,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b4c8b88f-cf71-4dbe-a025-4aca129ca92e",
+                     "jsondocId": "54a50a55-1576-40f1-8afa-5abb5285a4d7",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -1294,21 +1257,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3598f31e-9476-4f53-98a6-422e2b133ec4",
+                     "jsondocId": "8c4ccbed-5cea-4106-8edf-ff411d6aa8a8",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','non_reserved_properties':[{'tag':'clockwork','value':'orange'},{'tag':'color','value':'purple'}]}.  Available status found here: /availableStatus/ ",
+                     "description": "JSONArray containing a single JSONObject feature that contains {'uniquename':'ABCD-1234','location':{'fmax':12}}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Delete attribute (key,value pair) for feature",
-               "methodName": "deleteAttribute",
-               "jsondocId": "b3c1d41b-be3c-466d-949d-11a3aaf7cf7c",
+               "description": "Set translation end",
+               "methodName": "setTranslationEnd",
+               "jsondocId": "8deac72d-99fa-43ec-932d-f5d65f9e8c2c",
                "bodyobject": {
-                  "jsondocId": "35858e56-78f7-4dbb-9631-ebcc2c9cc7ed",
+                  "jsondocId": "9d30f0ae-c9bc-4e1b-b975-24f396cce423",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1316,9 +1279,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/deleteAttribute",
+               "path": "/annotationEditor/setTranslationEnd",
                "response": {
-                  "jsondocId": "e401e2c0-8cbc-4e75-82ab-c25c876936d7",
+                  "jsondocId": "1dd8631e-e8e9-4e50-89b7-d645e89fccac",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1331,7 +1294,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "4f37911d-d07a-448f-b808-5439424a83a1",
+                     "jsondocId": "3f49052a-0c63-40ab-bfd6-bd14f003d26c",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1340,7 +1303,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "2d764b1e-d636-4336-854c-a5bdcd4076f2",
+                     "jsondocId": "880063e5-db47-4085-97f4-ee5c170f9aef",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1349,7 +1312,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "150a7494-b365-4911-83fe-abd8456a3fcb",
+                     "jsondocId": "e9287027-7eed-4e98-aab6-56a929b91cb6",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1358,7 +1321,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d9ee17f5-a9bf-4fc1-ae82-dea398d87697",
+                     "jsondocId": "9226bbcb-7a66-49e8-a84d-b3c4f3ad3108",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -1367,21 +1330,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3c57be5a-2dbe-490c-84f8-41fdd5d5fa1a",
+                     "jsondocId": "f6b38b03-27d7-4dc9-9870-85c11d4c853a",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','old_non_reserved_properties':[{'color': 'red'}], 'new_non_reserved_properties': [{'color': 'green'}]}.",
+                     "description": "JSONArray containing a single JSONObject feature that contains {'uniquename':'ABCD-1234'}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Update attribute (key,value pair) for feature",
-               "methodName": "updateAttribute",
-               "jsondocId": "ebdd83fc-c139-4e45-82db-57cb0b5d8c67",
+               "description": "Set longest ORF",
+               "methodName": "setLongestOrf",
+               "jsondocId": "651c4975-587c-4e5a-a5fa-52f4428a9f71",
                "bodyobject": {
-                  "jsondocId": "657f6f8d-d831-4989-b246-40aaaf9882c0",
+                  "jsondocId": "ad8af9b7-4727-4cd8-b3ff-4b21211eaa1a",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1389,9 +1352,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/updateAttribute",
+               "path": "/annotationEditor/setLongestOrf",
                "response": {
-                  "jsondocId": "9b7df634-5c96-48f5-9249-08bb1cefee3d",
+                  "jsondocId": "4fcf0a0d-0762-4f57-bf33-9713b4a85cbb",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1404,7 +1367,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "c524ec2b-6351-4a21-acb3-e736dd99bf80",
+                     "jsondocId": "6ab641a9-a81e-4e21-9ede-973077b86be1",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1413,7 +1376,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "dd731535-1a58-439c-92de-9e0a39fc94e3",
+                     "jsondocId": "a708f06f-2888-4360-87dc-cf19b4121698",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1422,7 +1385,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c8363605-513b-4f51-a4d7-465754f4f422",
+                     "jsondocId": "9ac89a9b-83db-430c-940e-bb3dbe175502",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1431,7 +1394,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "86003964-673b-4276-bbcd-54f7b2342fd4",
+                     "jsondocId": "97ed6cce-0497-4b69-b832-181beda0ed78",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -1440,21 +1403,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "23046cb4-12b9-4bea-b7b3-210cd3294e28",
+                     "jsondocId": "f21bfdf2-4dba-49e4-b1d0-e83251e673ae",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','dbxrefs': [{'db': 'PMID', 'accession': '19448641'}]}.",
+                     "description": "JSONArray containing feature objects with the location object defined {'uniquename':'ABCD-1234','location':{'fmin':2,'fmax':12}}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Add dbxref (db,id pair) to feature",
-               "methodName": "addDbxref",
-               "jsondocId": "f0054dd2-727f-43d4-8b7a-3629bc62c38b",
+               "description": "Set boundaries of genomic feature",
+               "methodName": "setBoundaries",
+               "jsondocId": "0f7bc94b-0e28-4475-881d-84ca8e5ac21f",
                "bodyobject": {
-                  "jsondocId": "01e44ab2-d4e7-4bdb-bacc-19db1bc17173",
+                  "jsondocId": "948807a4-ec49-486c-8caa-6ff927c1cf94",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1462,9 +1425,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/addDbxref",
+               "path": "/annotationEditor/setBoundaries",
                "response": {
-                  "jsondocId": "81eca0ef-a72d-4857-88e3-fd0976f0314a",
+                  "jsondocId": "ab99fb60-d455-4de8-b022-bc4c26468bfb",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1477,7 +1440,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "881b04a8-9814-4d86-a507-9822241fd94c",
+                     "jsondocId": "6e7dc320-0178-4a60-aff6-0227cff80b2e",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1486,7 +1449,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ac632848-a397-4b02-9407-ad8cbf45b93a",
+                     "jsondocId": "1d36aba0-e005-4865-a7d4-5b4beaed8f93",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1495,7 +1458,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "418e209a-4570-4187-9aaf-300414d6d9f0",
+                     "jsondocId": "9236d1e3-82fb-4e9e-9a8b-4e631533a396",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1504,30 +1467,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "45745359-4f80-4441-aff7-7c9ec493c66d",
+                     "jsondocId": "23e01573-a020-4c48-af9f-772419f9d04a",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "2cf92841-3cfa-461b-a7ed-982b468df713",
-                     "name": "features",
-                     "format": "",
-                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','old_dbxrefs': [{'db': 'PMID', 'accession': '19448641'}], 'new_dbxrefs': [{'db': 'PMID', 'accession': '19448642'}]}.",
-                     "type": "JSONArray",
-                     "required": "true",
-                     "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Update dbxrefs (db,id pairs) for a feature",
-               "methodName": "updateDbxref",
-               "jsondocId": "14168e33-e4d3-40c7-9863-76155095f88f",
+               "description": "Get all annotated features for a sequence",
+               "methodName": "getFeatures",
+               "jsondocId": "733680b7-a6b5-408a-abd8-4fc1c4657cf1",
                "bodyobject": {
-                  "jsondocId": "d68eeefd-c42d-4164-ab51-5508be209f3c",
+                  "jsondocId": "c7735c56-aabe-49f5-83d6-f5f8eb821267",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1535,9 +1489,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/updateDbxref",
+               "path": "/annotationEditor/getFeatures",
                "response": {
-                  "jsondocId": "cbafcc91-aff6-4db7-b330-b7e8fb4b758d",
+                  "jsondocId": "35712da6-6a28-4b31-96dd-633e76bc69fa",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1550,7 +1504,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "1ef8ef8e-ea76-449d-8233-14fb4eb7d77c",
+                     "jsondocId": "15788323-2cef-4f49-8141-852357012cf9",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1559,7 +1513,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "bb8dc475-a7e2-474d-9c19-f8f440018a04",
+                     "jsondocId": "70a99e21-43ae-4df5-9247-ef84434a4f3b",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1568,7 +1522,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "dd330186-3a6f-4dcd-bc6d-d0f08f4d2f29",
+                     "jsondocId": "f66c7fa9-46ac-406d-896c-0b6fb30f1c4a",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1577,30 +1531,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "311533f4-6914-4e0f-81a1-8205401504c4",
+                     "jsondocId": "4fe5ffd1-ec61-4219-b3dc-3d2c89bbf7cc",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "6e8654b8-0e52-4766-bed6-f9ceac9902fe",
-                     "name": "features",
-                     "format": "",
-                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','dbxrefs': [{'db': 'PMID', 'accession': '19448641'}]}.",
-                     "type": "JSONArray",
-                     "required": "true",
-                     "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Delete dbxrefs (db,id pairs) for a feature",
-               "methodName": "deleteDbxref",
-               "jsondocId": "ca6d8970-7608-4eed-b597-43608dc6aa0e",
+               "description": "Get sequence alterations for a given sequence",
+               "methodName": "getSequenceAlterations",
+               "jsondocId": "14a219e6-1d5e-4c17-8ff7-af6bb7e5f5f0",
                "bodyobject": {
-                  "jsondocId": "22423233-e1f3-4cf3-8cf7-e56e8c591800",
+                  "jsondocId": "504b1306-e464-4e66-9b5f-cf1aecaea843",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1608,9 +1553,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/deleteDbxref",
+               "path": "/annotationEditor/getSequenceAlterations",
                "response": {
-                  "jsondocId": "f3164e08-c98e-4a25-a91e-e533aa911326",
+                  "jsondocId": "5b769f2e-f818-43c8-84b4-aab39a8a31c7",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1623,7 +1568,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "4096aa58-29fb-4408-9bc8-1865e9e6361d",
+                     "jsondocId": "0951e97d-6e21-4b1d-978b-8dac392c8e00",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1632,7 +1577,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9b5e6098-228f-433a-b835-36f5b119cfb5",
+                     "jsondocId": "27e70f8f-7b9a-477c-a264-21b49a0e6e68",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1641,7 +1586,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a08e69e0-7a40-4b66-a3f0-a2f9ab1e5e6e",
+                     "jsondocId": "fec4bb6c-bbc0-423f-86ac-a39e75dbb79b",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1650,7 +1595,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "28145b76-887e-44a9-a0e6-d94502f28569",
+                     "jsondocId": "7c9fa80d-72fb-4572-843f-2854f7e554fd",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -1659,21 +1604,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "74f5572e-65c9-4dd3-83e6-ea3f1f7caa27",
+                     "jsondocId": "f84b685a-2af5-4a4c-8788-6678549457fd",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray with one feature object {'uniquename':'ABCD-1234'}",
+                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','non_reserved_properties':[{'tag':'clockwork','value':'orange'},{'tag':'color','value':'purple'}]}.  Available status found here: /availableStatus/ ",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Set readthrough stop codon",
-               "methodName": "setReadthroughStopCodon",
-               "jsondocId": "92eafae6-4395-4c8e-b292-d61b2076e26e",
+               "description": "Delete attribute (key,value pair) for feature",
+               "methodName": "deleteAttribute",
+               "jsondocId": "8a167427-a560-4cc5-af3b-a33c20cad1b0",
                "bodyobject": {
-                  "jsondocId": "14b7f773-40db-4f19-a239-b52ccd8cd548",
+                  "jsondocId": "55cd4e45-5a8e-4317-90c4-a8d9b7cef5dd",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1681,9 +1626,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/setReadthroughStopCodon",
+               "path": "/annotationEditor/deleteAttribute",
                "response": {
-                  "jsondocId": "bdff136f-fcb5-48b8-8262-acc21b75c2c2",
+                  "jsondocId": "b5c64b09-58bb-4e9f-a0df-81d44cd768e9",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1696,7 +1641,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "9dc1060e-5ced-4a15-8bb6-eadbe8cd8424",
+                     "jsondocId": "7f3868f9-cd14-4e56-833a-2bd30e4fd450",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1705,7 +1650,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "02fc00dc-7c49-4e9b-80b4-19c973e4df86",
+                     "jsondocId": "55f90098-65d4-4246-9776-0a001b9cc578",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1714,7 +1659,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "4607d9d2-e61b-46a4-a41b-667bc3c837f9",
+                     "jsondocId": "a0d7c4c5-de7e-469b-b5ba-564db88205ce",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1723,7 +1668,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "fd8cf2c8-8e9d-462f-afe7-b473c2506117",
+                     "jsondocId": "2ef5d56c-93af-41e9-83f4-526b0afaba72",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -1732,21 +1677,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f5dc5ed9-c344-4048-a87a-7d8bc014e070",
+                     "jsondocId": "17b12fc8-35d3-425c-b1b2-3bd28e751388",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray with Sequence Alteration (Insertion, Deletion, Substituion) objects described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/",
+                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','old_non_reserved_properties':[{'color': 'red'}], 'new_non_reserved_properties': [{'color': 'green'}]}.",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Add sequence alteration",
-               "methodName": "addSequenceAlteration",
-               "jsondocId": "7deaa996-1f69-406b-bcae-b0427e1e11fe",
+               "description": "Update attribute (key,value pair) for feature",
+               "methodName": "updateAttribute",
+               "jsondocId": "c88ae995-3095-409a-ab5f-dae88c8556a9",
                "bodyobject": {
-                  "jsondocId": "f62d2dc9-d1c1-47a9-9256-bd7fd8a7e76a",
+                  "jsondocId": "10c91d16-42bc-4026-b476-5492fd1fe6bf",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1754,9 +1699,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/addSequenceAlteration",
+               "path": "/annotationEditor/updateAttribute",
                "response": {
-                  "jsondocId": "a7630ae2-5a58-4296-80aa-4deed934d374",
+                  "jsondocId": "4572b4b6-ce19-46a3-9169-ba7c83308c51",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1769,7 +1714,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "a0998f43-d3f9-4f46-a264-5da3ffda322f",
+                     "jsondocId": "b1916b8d-be06-440d-ad50-759a4f8c3322",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1778,7 +1723,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6999e994-c3a1-4bd4-b86c-83e7c0b8f371",
+                     "jsondocId": "3fbc5fba-9656-4d09-be02-03091e855aed",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1787,7 +1732,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7d660359-27a3-437b-86cf-1a568bf6b737",
+                     "jsondocId": "fb1ebd4a-b7dd-4564-9de2-8facca55c067",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1796,7 +1741,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "fe76806b-7c85-4aaf-93f2-a27a1bf4cb30",
+                     "jsondocId": "e718ae0b-ff86-4dc0-a4e6-88387b33d3b1",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -1805,21 +1750,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3f1837ef-c720-4fed-8de9-76e3652c7a8e",
+                     "jsondocId": "14df5aa1-e323-4c6a-8d56-dba4fd40cd08",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray with Sequence Alteration identified by unique names {'uniquename':'ABC123'}",
+                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','dbxrefs': [{'db': 'PMID', 'accession': '19448641'}]}.",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Delete sequence alteration",
-               "methodName": "deleteSequenceAlteration",
-               "jsondocId": "c205d4f8-dc7e-4517-b71c-a359b1717bd8",
+               "description": "Add dbxref (db,id pair) to feature",
+               "methodName": "addDbxref",
+               "jsondocId": "6dfbf1f1-b19b-4b41-80cb-0477c169c1eb",
                "bodyobject": {
-                  "jsondocId": "8ae57d17-0e72-4bf2-b029-874ab463309f",
+                  "jsondocId": "fb8adf97-9aec-4f96-8260-d9b0e2b4877c",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1827,9 +1772,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/deleteSequenceAlteration",
+               "path": "/annotationEditor/addDbxref",
                "response": {
-                  "jsondocId": "97a4e62d-2a07-47c6-8610-6f5d775e233e",
+                  "jsondocId": "4108d399-ff69-4204-b1dc-6d1cb8327dcf",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1842,7 +1787,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "13ec68bc-b1d7-4cac-b792-50bdcdf8e3b2",
+                     "jsondocId": "5e478c95-c5ee-4cac-a8f8-48e5961afd19",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1851,7 +1796,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e4fe033d-05a8-4d23-9966-c770127c2f01",
+                     "jsondocId": "d2b46ce0-2eda-42ac-b4cc-3d4f0ad36641",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1860,7 +1805,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "224948f4-6e23-4fa7-a791-7bd97d53e6ca",
+                     "jsondocId": "c58b9da3-90ed-4b01-8957-fdd926673023",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1869,7 +1814,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "628e0079-cf84-468b-b4aa-50f0a90bee54",
+                     "jsondocId": "0d51ed18-4007-43cb-af1c-298ff80e24e6",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -1878,21 +1823,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "bc6849fe-0e85-4fc5-bdb3-a2a3572e1b1d",
+                     "jsondocId": "f913e82d-5cd2-448f-8f33-60a8293566c5",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray with with objects of features defined as {'uniquename':'ABC123'}",
+                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','old_dbxrefs': [{'db': 'PMID', 'accession': '19448641'}], 'new_dbxrefs': [{'db': 'PMID', 'accession': '19448642'}]}.",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Flip strand",
-               "methodName": "flipStrand",
-               "jsondocId": "0dd9dc6f-feda-4b9d-89ec-2b42f668f6e5",
+               "description": "Update dbxrefs (db,id pairs) for a feature",
+               "methodName": "updateDbxref",
+               "jsondocId": "a319f731-2393-4182-a59e-a489ea7b1003",
                "bodyobject": {
-                  "jsondocId": "b9c446cb-22b2-45f0-9309-947d644dc709",
+                  "jsondocId": "0d39b4a3-6660-4e3e-9579-279654aa4021",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1900,9 +1845,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/flipStrand",
+               "path": "/annotationEditor/updateDbxref",
                "response": {
-                  "jsondocId": "2cb035e2-5567-411b-9d59-6f05e5a6635c",
+                  "jsondocId": "f4ac9203-eb19-43b5-8afe-7241a6f5dcc0",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1915,7 +1860,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "5b6a2195-91f4-45d4-8c40-e850f5000131",
+                     "jsondocId": "3f342cf4-0693-4d57-93b3-7ba496626bcb",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1924,7 +1869,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "5e130b12-42f2-458d-a1b3-7149256b613b",
+                     "jsondocId": "1fee92c9-9e60-4485-897d-bb56debaa8be",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -1933,7 +1878,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7a83c67b-597c-4d36-9745-e34b00f706a5",
+                     "jsondocId": "87753246-8251-4c78-9540-8ab7681ea5fc",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -1942,7 +1887,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b3371029-d138-45d9-afaf-73d61b73c613",
+                     "jsondocId": "1e696c28-1a7b-455e-8d44-87235e46f65f",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -1951,21 +1896,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "4da6e664-6dc0-4914-8d75-2a58621c0cff",
+                     "jsondocId": "dbbd69e2-fc4f-42b2-a02e-e492e2ce7043",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray with with two objects of referred to as defined as {'uniquename':'ABC123'}",
+                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','dbxrefs': [{'db': 'PMID', 'accession': '19448641'}]}.",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Merge exons",
-               "methodName": "mergeExons",
-               "jsondocId": "a66e5636-3e4f-4287-aa6b-b78391754959",
+               "description": "Delete dbxrefs (db,id pairs) for a feature",
+               "methodName": "deleteDbxref",
+               "jsondocId": "2648d3a6-c4e4-4b64-b8ef-201d30a9bd08",
                "bodyobject": {
-                  "jsondocId": "975b7d2b-500f-47ec-82d9-45a134034f0f",
+                  "jsondocId": "b9867379-de9a-4668-8fd7-feabfb59c6d0",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -1973,9 +1918,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/mergeExons",
+               "path": "/annotationEditor/deleteDbxref",
                "response": {
-                  "jsondocId": "8ffcdce1-aad6-41b2-ae14-60c9e8a4a1f9",
+                  "jsondocId": "53547a13-4967-4eeb-badb-590b445af8b8",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -1988,7 +1933,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "fff6b74e-e668-45d4-b93d-84ae532fc929",
+                     "jsondocId": "7b470b9c-e7a7-4b07-97b0-b003e7e03406",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -1997,7 +1942,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "912916f5-a257-4bcc-9f6b-177261a3444b",
+                     "jsondocId": "d4e60df6-08e7-488d-a5af-430e9bcc1d87",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2006,7 +1951,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b974ee45-2bed-4573-b967-46635cb19650",
+                     "jsondocId": "9b3ffffd-0f0c-45ed-aa4d-efe6a6a045a0",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2015,7 +1960,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "39b4c1af-e320-434b-81cb-c58bbeb6fc69",
+                     "jsondocId": "ab985212-d3cd-4bec-a441-ee88ee3fe02e",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -2024,21 +1969,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d81a24d9-5897-42d6-b8cd-f3c8b248658b",
+                     "jsondocId": "312b8a88-1f68-49f3-8529-d736439ae740",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing feature objects with the location object defined {'uniquename':'ABCD-1234','location':{'fmin':2,'fmax':12}}",
+                     "description": "JSONArray with one feature object {'uniquename':'ABCD-1234'}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Split exons",
-               "methodName": "splitExon",
-               "jsondocId": "4a35a82c-f93e-41ac-b2da-20b1a22c1ee4",
+               "description": "Set readthrough stop codon",
+               "methodName": "setReadthroughStopCodon",
+               "jsondocId": "814a451a-f641-40a4-bdb3-9758ad6cda38",
                "bodyobject": {
-                  "jsondocId": "3cb50ce3-b814-41a4-8099-35e9422d3aa0",
+                  "jsondocId": "bce0e474-df78-425b-891a-ab652368e642",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2046,9 +1991,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/splitExon",
+               "path": "/annotationEditor/setReadthroughStopCodon",
                "response": {
-                  "jsondocId": "a436d1b0-097f-4c54-b773-8a1fb576639b",
+                  "jsondocId": "c63e63d7-6cb4-48f9-8d6f-4a1f9cc42484",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2061,7 +2006,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "3bfd5afa-616a-4ec4-b5cb-e8678ae2f9b2",
+                     "jsondocId": "d817169a-ec28-49e6-af84-1c1641fcf190",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2070,7 +2015,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9db8247c-c31b-4814-82b6-0e9c57dea628",
+                     "jsondocId": "2923876e-63cd-4bc6-a433-1c5d23881647",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2079,7 +2024,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9b0952a2-fce7-4d07-adf6-bd96fa20652e",
+                     "jsondocId": "c1b27d19-d4eb-4c30-934d-e982067ff9d5",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2088,7 +2033,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d3f1da83-1ed3-4af4-8ca3-979257254946",
+                     "jsondocId": "28fd108a-755e-4a51-b6b6-a84a4fce565f",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -2097,21 +2042,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e7d90c67-acf2-40b5-b151-d0804e6963f6",
+                     "jsondocId": "9ac71cb3-b6ba-488c-a0b3-cd8fd4ff8ec6",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray of features objects to delete defined by unique name {'uniquename':'ABC123'}",
+                     "description": "JSONArray with Sequence Alteration (Insertion, Deletion, Substituion) objects described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Delete feature",
-               "methodName": "deleteFeature",
-               "jsondocId": "16ce8052-9f72-425a-8a23-19c9eca2cdbc",
+               "description": "Add sequence alteration",
+               "methodName": "addSequenceAlteration",
+               "jsondocId": "2c1958f6-83a4-4b7f-b2c9-c797666f2ec8",
                "bodyobject": {
-                  "jsondocId": "09c65ef5-d899-46b9-9af0-14141d0f92b3",
+                  "jsondocId": "7594ce12-cd64-4730-b1f4-73569c580159",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2119,9 +2064,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/deleteFeature",
+               "path": "/annotationEditor/addSequenceAlteration",
                "response": {
-                  "jsondocId": "00de4e6e-e59e-4324-8804-5da162eff1e1",
+                  "jsondocId": "3465fa67-3ea5-48a2-a850-c850fbc72370",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2134,7 +2079,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "122a056e-6a17-4808-892d-e16f747e198e",
+                     "jsondocId": "4db8c4d5-0bb5-4d0f-9606-ed380f978561",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2143,7 +2088,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c7f868ac-39ce-4804-ac68-cdd68b861f4b",
+                     "jsondocId": "e45d5c02-5f9b-46be-9c7f-76cc931979fd",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2152,7 +2097,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e490fc90-be05-4a17-9682-3aeb4c5f3a41",
+                     "jsondocId": "41e791cf-9a4b-47fa-a395-b1e7823ebdd5",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2161,7 +2106,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "cf6c4cc2-b991-4d64-ac2b-f9b0c0be355c",
+                     "jsondocId": "51e11e48-d98e-480f-af1e-00323194f473",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -2170,21 +2115,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1e45c0f7-1e9d-48fd-ac3c-a8c9b6e3bc91",
-                     "name": "sequence",
+                     "jsondocId": "c4cef2f5-b6b0-463e-9808-d168e54c56c5",
+                     "name": "features",
                      "format": "",
-                     "description": "JSONArray of sequence id object to delete defined by {id:<sequence.id>} ",
+                     "description": "JSONArray with Sequence Alteration identified by unique names {'uniquename':'ABC123'}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Delete variant effects for sequences",
-               "methodName": "deleteVariantEffectsForSequences",
-               "jsondocId": "9e44875d-10f6-4640-a228-064cedf30cbb",
+               "description": "Delete sequence alteration",
+               "methodName": "deleteSequenceAlteration",
+               "jsondocId": "2ce9db8f-0ac6-49d6-8445-61210a3de293",
                "bodyobject": {
-                  "jsondocId": "fd2054c1-2526-4a65-ba8e-847e0a193699",
+                  "jsondocId": "dcf34f9d-e82b-45d6-b2f8-303d2963ffae",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2192,9 +2137,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/deleteVariantEffectsForSequences",
+               "path": "/annotationEditor/deleteSequenceAlteration",
                "response": {
-                  "jsondocId": "dbee082b-f00b-4ee4-9e38-bb1d80b2d7d6",
+                  "jsondocId": "394b0af0-9b11-4eac-a73c-b337a0c11488",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2207,7 +2152,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "2e07118e-40dd-4de4-8e1c-bd8af6c32c29",
+                     "jsondocId": "c00a4647-ae7c-480b-84ca-c587c5a50f23",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2216,7 +2161,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9faa8813-a6fe-46d8-8e4a-6f45114ecf88",
+                     "jsondocId": "1a679242-6804-4de9-bf7c-330e191402dd",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2225,7 +2170,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c9bc9dba-629b-4929-b3f1-601272adcde6",
+                     "jsondocId": "79c36d3a-e251-4954-b5db-77c81e338ac1",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2234,7 +2179,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "04077fe7-f7d5-47cb-9b0f-ddd79316b0d5",
+                     "jsondocId": "f06cb6ad-cce5-4b33-8107-673c2b6d68ad",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -2243,21 +2188,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "dfcb3c27-8673-49eb-8f94-c16f9a78aae7",
-                     "name": "sequence",
+                     "jsondocId": "c8fa6aa2-87a8-49b4-909e-8286858e2319",
+                     "name": "features",
                      "format": "",
-                     "description": "JSONArray of sequence id object to delete defined by {id:<sequence.id>} ",
+                     "description": "JSONArray with with objects of features defined as {'uniquename':'ABC123'}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Delete features for sequences",
-               "methodName": "deleteFeaturesForSequences",
-               "jsondocId": "ca12b0a0-45d3-4b58-9405-c3c5e317a2e7",
+               "description": "Flip strand",
+               "methodName": "flipStrand",
+               "jsondocId": "7581ab35-c105-4937-ad07-11656a8e222b",
                "bodyobject": {
-                  "jsondocId": "e4d984f1-b7ec-42f8-979e-771d3e580026",
+                  "jsondocId": "6bca9d64-1459-4da5-9297-07fa4a2f7657",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2265,9 +2210,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/deleteFeaturesForSequences",
+               "path": "/annotationEditor/flipStrand",
                "response": {
-                  "jsondocId": "fc020951-54c6-4084-a4c4-d875a920c3e1",
+                  "jsondocId": "1d8eee3d-a3e1-44b0-8897-d1442cd22f19",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2280,7 +2225,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "353f071d-ea3b-4254-9386-56284867dd80",
+                     "jsondocId": "b044b922-4de2-44c5-b1a7-14c2eb410289",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2289,7 +2234,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "aafd426b-3d37-4da7-a0e3-07ec04898f78",
+                     "jsondocId": "64d244dd-4f7f-4314-9727-674e5f9ee2b6",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2298,7 +2243,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "866d63f6-7d08-4321-a608-5baafb34587e",
+                     "jsondocId": "ab24b09a-bb4d-411c-b74d-42b328c446de",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2307,7 +2252,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a9d5756e-0055-4541-a6b4-f67585e9fcdd",
+                     "jsondocId": "d3a907cc-6584-45c7-b1e3-fbb8ea9a73c1",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -2316,21 +2261,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8613dd09-04a0-4c51-bff7-2fb53bd44e82",
+                     "jsondocId": "2b405c0c-5d28-49ae-b1d2-b9eefb0ecf75",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray of features objects, where the first is the parent transcript and the remaining are exons all defined by a unique name {'uniquename':'ABC123'}",
+                     "description": "JSONArray with with two objects of referred to as defined as {'uniquename':'ABC123'}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Delete exons",
-               "methodName": "deleteExon",
-               "jsondocId": "aeefd111-14a1-46b4-8e12-e4c8c81d07c6",
+               "description": "Merge exons",
+               "methodName": "mergeExons",
+               "jsondocId": "3f99671b-fe6f-4104-b9eb-845aa5182945",
                "bodyobject": {
-                  "jsondocId": "27e52244-7403-45c4-810f-1c09d0350a9a",
+                  "jsondocId": "2bc8c3e2-5de6-4d0a-a698-792a954e2f33",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2338,9 +2283,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/deleteExon",
+               "path": "/annotationEditor/mergeExons",
                "response": {
-                  "jsondocId": "82e6d800-0c89-46a4-b9d1-a35840e4994b",
+                  "jsondocId": "6771bc8f-fa3b-4e9c-8408-e70d08a239d3",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2353,7 +2298,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "a299598a-76a2-49e0-9f8d-fe6ddcff69cc",
+                     "jsondocId": "e93cfa3c-61a9-4c32-a781-89fea71b8533",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2362,7 +2307,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "64bed79b-0ae1-4238-beb4-d354501cc15a",
+                     "jsondocId": "b7890bc0-2659-4e1d-bbd3-3c2000b92f60",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2371,7 +2316,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "116c4b51-85bc-4931-a984-718a32d96137",
+                     "jsondocId": "f51d3a78-09cd-4a21-b372-b28cb2424f47",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2380,7 +2325,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "5aa6bbfe-80b4-4987-9cf5-972a33793bdd",
+                     "jsondocId": "2b0716fc-debf-49cf-9d3a-b35eb22d1939",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -2389,21 +2334,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "36038305-2b8b-4e11-b754-fc2d533767ce",
+                     "jsondocId": "0efad19e-8c84-49d0-8678-90ef52381065",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing a single JSONObject feature that contains {'uniquename':'ABCD-1234','location':{'fmin':12}}",
+                     "description": "JSONArray containing feature objects with the location object defined {'uniquename':'ABCD-1234','location':{'fmin':2,'fmax':12}}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Make intron",
-               "methodName": "makeIntron",
-               "jsondocId": "9cf41b5b-f670-41f7-afb1-04641acf3515",
+               "description": "Split exons",
+               "methodName": "splitExon",
+               "jsondocId": "d994ec7a-524f-4510-96b0-a232cc8e50e2",
                "bodyobject": {
-                  "jsondocId": "709ba56e-3e0f-4520-8b92-4f82648ef810",
+                  "jsondocId": "067b41c0-da89-44f4-915b-23f75fb18757",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2411,9 +2356,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/makeIntron",
+               "path": "/annotationEditor/splitExon",
                "response": {
-                  "jsondocId": "c333c6f3-bae1-4485-bf23-901b3b4fc38e",
+                  "jsondocId": "fc8d8897-f927-4d44-8712-6aa6ef1bff00",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2426,7 +2371,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "55c77be6-e690-4277-8b8d-46be6010da40",
+                     "jsondocId": "2313d8b2-35c1-4b66-b40d-5e3b99792eb5",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2435,7 +2380,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "672f3584-ba29-49c1-8560-44d9e27498b8",
+                     "jsondocId": "e1d57c00-d946-4362-93bb-55f98f7d60a0",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2444,7 +2389,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8369baff-dea9-4d34-8346-ef013c721e4e",
+                     "jsondocId": "87dae624-89a0-4750-bf14-2e76633ef68f",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2453,7 +2398,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "efd0f3ba-e7bf-45c9-8730-e813edb8ec2e",
+                     "jsondocId": "49f846a2-4615-483c-8b45-cb1a099b7e0f",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -2462,21 +2407,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a694bdd8-bc4b-4ce2-be21-6a84cb3ed345",
+                     "jsondocId": "fddd7ec4-21e8-4000-b5ab-9d9aeda7bf3d",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray with with two exon objects referred to their unique names {'uniquename':'ABC123'}",
+                     "description": "JSONArray of features objects to delete defined by unique name {'uniquename':'ABC123'}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Split transcript",
-               "methodName": "splitTranscript",
-               "jsondocId": "0fc5cb8b-0a74-41eb-81ad-b624d37a77c4",
+               "description": "Delete feature",
+               "methodName": "deleteFeature",
+               "jsondocId": "72c686b1-ebc8-4c7d-bd1f-ea04253fd9af",
                "bodyobject": {
-                  "jsondocId": "7d8461d5-faf5-4270-ae4c-014857754b61",
+                  "jsondocId": "c770553e-eea7-4bed-8564-f7162c036a63",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2484,9 +2429,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/splitTranscript",
+               "path": "/annotationEditor/deleteFeature",
                "response": {
-                  "jsondocId": "06b743ab-defc-4959-b053-f1982cf3465d",
+                  "jsondocId": "245ca1db-08a8-494f-94df-4abae458a714",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2499,7 +2444,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "f601e058-25f7-4bc9-9853-7e8700ca1d56",
+                     "jsondocId": "e899cfc6-6093-45a0-a3af-2ea4195497f0",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2508,7 +2453,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "89956f9b-5dbf-4c82-96d2-bb5bb53fc9c7",
+                     "jsondocId": "a18be3b7-28b1-413b-a60a-f3eb830d2518",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2517,7 +2462,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8e58dc43-9049-40cd-8b1e-54965345d28d",
+                     "jsondocId": "8164e012-b74d-4c95-9ff4-b45c5c5b081d",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2526,7 +2471,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "500868b4-9404-47b7-a1b5-e18473576c2c",
+                     "jsondocId": "43ca3c9a-cbd3-478c-ae9e-13c0ccc4adb3",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -2535,21 +2480,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7a8523b3-4e51-43f8-a153-58106602b603",
-                     "name": "features",
+                     "jsondocId": "e20b6903-2d56-4ed7-b242-4430bbff6534",
+                     "name": "sequence",
                      "format": "",
-                     "description": "JSONArray with with two transcript objects referred to their unique names {'uniquename':'ABC123'}",
+                     "description": "JSONArray of sequence id object to delete defined by {id:<sequence.id>} ",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Merge transcripts",
-               "methodName": "mergeTranscripts",
-               "jsondocId": "ec287eee-542c-49ee-ba82-2376ace03eb0",
+               "description": "Delete variant effects for sequences",
+               "methodName": "deleteVariantEffectsForSequences",
+               "jsondocId": "9e97bb2a-7a52-4c4f-8bdc-00c3dd71e6ab",
                "bodyobject": {
-                  "jsondocId": "cf9fbc6e-c3b1-41c3-90c6-b8288d192649",
+                  "jsondocId": "78b251d5-67a7-4825-ad40-f21117a566d6",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2557,9 +2502,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/mergeTranscripts",
+               "path": "/annotationEditor/deleteVariantEffectsForSequences",
                "response": {
-                  "jsondocId": "b6146a7d-1410-46cf-9f7d-10aac2ef2cf4",
+                  "jsondocId": "e71a6f2c-feb3-409e-ae66-f3f7e66d2698",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2572,7 +2517,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "bc470549-5f60-4308-aa9d-89ea3488924c",
+                     "jsondocId": "9af8b823-2f0e-4bd9-acd9-15fa3d9f3608",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2581,7 +2526,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c2bf12b5-da29-4022-8cbd-16ef552e6343",
+                     "jsondocId": "b8623485-e443-49bc-87f2-a9cf0673deae",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2590,21 +2535,39 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ce58c35f-940f-4647-8d5c-befb318fdfee",
-                     "name": "days",
+                     "jsondocId": "8456cdea-fb82-4908-bff9-a63f6cbc2fde",
+                     "name": "sequence",
                      "format": "",
-                     "description": "Number of past days to retrieve annotations from.",
-                     "type": "Integer",
+                     "description": "(optional) Sequence name",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "05f1ea32-67d0-4903-bc5e-f88097ba98d1",
+                     "name": "organism",
+                     "format": "",
+                     "description": "(optional) Organism ID or common name",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "bd99e811-45e0-40da-8548-52c563bb2625",
+                     "name": "sequence",
+                     "format": "",
+                     "description": "JSONArray of sequence id object to delete defined by {id:<sequence.id>} ",
+                     "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Get genes created or updated in the past, Returns JSON hash gene_name:organism",
-               "methodName": "getRecentAnnotations",
-               "jsondocId": "2a3fa432-5f7c-42e0-8c8a-a26c1ee1a4bb",
+               "description": "Delete features for sequences",
+               "methodName": "deleteFeaturesForSequences",
+               "jsondocId": "8c8e940d-c84d-4714-8246-20abacd67121",
                "bodyobject": {
-                  "jsondocId": "f5f76913-db2c-41cc-b380-77c5df547c65",
+                  "jsondocId": "b495a461-bfe2-4d01-a3dc-cf847f855e0d",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2612,9 +2575,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/getRecentAnnotations",
+               "path": "/annotationEditor/deleteFeaturesForSequences",
                "response": {
-                  "jsondocId": "23d9d1b7-563c-4a1e-bd74-42f378e061e4",
+                  "jsondocId": "6ac0e63b-9a08-495b-bc9e-a73be34a232f",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2627,7 +2590,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "ae1a9611-1e12-4102-a15d-5d9532a75ff1",
+                     "jsondocId": "b4894f8d-c500-4226-acb9-931e65e5e538",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2636,7 +2599,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9ce7bf3a-1580-4023-a529-31cbfcbc18f9",
+                     "jsondocId": "e8dffee0-e66d-4fa5-9b15-4e7de254db7c",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2645,16 +2608,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ea171324-8ffe-4519-831c-42c22c623dfc",
-                     "name": "organism",
-                     "format": "",
-                     "description": "(optional) Organism ID or common name",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "1765bb81-c949-42e9-9698-a3891bd1c0d3",
+                     "jsondocId": "b2d950c7-bc82-4512-b5d5-a9e2240b0c9d",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2663,39 +2617,30 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "72efaa1c-af06-403b-905c-f840113f12e6",
-                     "name": "suppressHistory",
-                     "format": "",
-                     "description": "Suppress the history of this operation",
-                     "type": "boolean",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "dd054f56-adca-453b-87b1-9e4717f6b89c",
-                     "name": "suppressEvents",
+                     "jsondocId": "5bd1bdf0-88b1-4dc5-9ca7-a73266b32274",
+                     "name": "organism",
                      "format": "",
-                     "description": "Suppress instant update of the user interface",
-                     "type": "boolean",
+                     "description": "(optional) Organism ID or common name",
+                     "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a88d5d00-f6f5-404b-aa1b-d7042eb2e03c",
+                     "jsondocId": "13200c33-64d1-4223-aa60-5a7acc527a45",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray of JSON feature objects described by https://github.com/GMOD/Apollo/blob/master/grails-app/domain/org/bbop/apollo/Feature.groovy",
+                     "description": "JSONArray of features objects, where the first is the parent transcript and the remaining are exons all defined by a unique name {'uniquename':'ABC123'}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Set exon feature boundaries",
-               "methodName": "setExonBoundaries",
-               "jsondocId": "d35040dd-7b9f-4dee-9f25-9de4f20f0426",
+               "description": "Delete exons",
+               "methodName": "deleteExon",
+               "jsondocId": "5e020857-5dfe-47e3-a91b-7ec793a92af7",
                "bodyobject": {
-                  "jsondocId": "bac05aa2-8c9a-4bb2-bb29-d64b9267e3db",
+                  "jsondocId": "a3abfd91-2c26-4e75-8e32-078c971f6a1d",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2703,9 +2648,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/setExonBoundaries",
+               "path": "/annotationEditor/deleteExon",
                "response": {
-                  "jsondocId": "e5971e1a-22d8-4e9a-8867-bc1b87c0d238",
+                  "jsondocId": "a4757ea9-0dab-4733-b948-40b90401eea8",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2718,7 +2663,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "749b02af-b3c5-484e-9478-9fe72ede4dbc",
+                     "jsondocId": "8f51ab07-2464-4f6b-a162-6095585ebbdc",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2727,7 +2672,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8a90568b-3a1d-4b23-a745-fc7f8b5eb82a",
+                     "jsondocId": "6fec5bd1-bb9f-4b24-913e-86be989615c7",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2736,7 +2681,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7c639dad-9962-44db-8173-80a0fa4ff7aa",
+                     "jsondocId": "821de635-5a85-4ad9-994d-6f1fbc515e1c",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2745,7 +2690,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f00087b0-b6f9-4c4d-b035-d020b19eefb8",
+                     "jsondocId": "0f12d8be-b0d6-4f04-8bd1-9576ed948204",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -2754,21 +2699,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "5a7e183a-3703-45b9-8b04-dfb5d030f20b",
+                     "jsondocId": "43a1536a-73ae-48b8-ae5a-038027728f49",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','description':'some descriptive test'}",
+                     "description": "JSONArray containing a single JSONObject feature that contains {'uniquename':'ABCD-1234','location':{'fmin':12}}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Set description for a feature",
-               "methodName": "setDescription",
-               "jsondocId": "49a9c9c9-c1f0-431b-a522-8a69961cec03",
+               "description": "Make intron",
+               "methodName": "makeIntron",
+               "jsondocId": "bb9cc8d4-a0de-4356-a814-585d8462deef",
                "bodyobject": {
-                  "jsondocId": "c7172e5a-6a0d-4a01-b372-4c97eda0a221",
+                  "jsondocId": "19cdc911-d620-4986-9b48-9f54d3776d9a",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2776,9 +2721,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/setDescription",
+               "path": "/annotationEditor/makeIntron",
                "response": {
-                  "jsondocId": "0e21edad-1da3-49e3-9ac2-f02948045f61",
+                  "jsondocId": "69151405-a9d1-4f6f-ae22-f0dc66a06db4",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2791,7 +2736,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "9aa0e770-1c24-41f9-b76d-5a73f63f9d02",
+                     "jsondocId": "3a980fed-9a92-4880-b0f2-e376f79f800a",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2800,7 +2745,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a2465de4-3ec3-44ce-9c86-23962cbfdb84",
+                     "jsondocId": "ec0d668a-966d-499d-bdf9-7494c640bce5",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2809,7 +2754,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "63b941e7-2333-4142-b6d2-04681f0915d3",
+                     "jsondocId": "0aec6a2c-7f49-42ba-bbd1-5f1dfcc0ca6d",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2818,7 +2763,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ae86ceb5-2f8e-4cf3-9bb2-da581ddae77c",
+                     "jsondocId": "0b4c1c07-18b3-4e66-ba2b-16a16a98921a",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -2827,21 +2772,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "2cfa6e4b-c2ed-45e2-bc69-999827f26648",
+                     "jsondocId": "cd25b8b4-5efc-4973-8d65-efbfb921aaf1",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','symbol':'Pax6a'}",
+                     "description": "JSONArray with with two exon objects referred to their unique names {'uniquename':'ABC123'}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Set symbol of a feature",
-               "methodName": "setSymbol",
-               "jsondocId": "175af50b-ec32-4e71-b007-ddf86f11446c",
+               "description": "Split transcript",
+               "methodName": "splitTranscript",
+               "jsondocId": "50627147-f407-48db-8608-ce3958423049",
                "bodyobject": {
-                  "jsondocId": "11b7378b-01d2-46d2-adf3-514d462bf6e8",
+                  "jsondocId": "5c540fb8-53d4-44e6-9ac7-9689de76fb56",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2849,9 +2794,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/setSymbol",
+               "path": "/annotationEditor/splitTranscript",
                "response": {
-                  "jsondocId": "ed44cc2c-cd03-4096-8135-ac763e9b154c",
+                  "jsondocId": "2c634987-6548-432a-91cd-d62f42466f09",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2864,7 +2809,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "a516d9fc-bf9a-4280-b5de-7e055d1b52f2",
+                     "jsondocId": "2350e55b-8388-4b42-aa7f-6984b827f96e",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2873,7 +2818,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "909b1b9f-b409-4730-8801-0e29dc10636c",
+                     "jsondocId": "941a3037-796a-4c88-a8c7-a8bfc586bbef",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2882,7 +2827,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3ebd8439-c4ba-42f4-a296-8d49af72cd9b",
+                     "jsondocId": "556d542d-f87c-4399-a419-9f3642d15011",
                      "name": "sequence",
                      "format": "",
                      "description": "(optional) Sequence name",
@@ -2891,7 +2836,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7dc45d56-9ae0-4d83-9f63-a83bca06ca82",
+                     "jsondocId": "50f8e907-c5a9-47d6-854f-ee1c865a47e0",
                      "name": "organism",
                      "format": "",
                      "description": "(optional) Organism ID or common name",
@@ -2900,21 +2845,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f63da8a7-de28-4ac8-a933-1b328e722d82",
+                     "jsondocId": "ee0219ab-2622-44c2-a748-284a176696d0",
                      "name": "features",
                      "format": "",
-                     "description": "JSONArray of features objects to export defined by a unique name {'uniquename':'ABC123'}",
+                     "description": "JSONArray with with two transcript objects referred to their unique names {'uniquename':'ABC123'}",
                      "type": "JSONArray",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Get sequences for features",
-               "methodName": "getSequence",
-               "jsondocId": "7e2c97e7-e269-46e2-90d8-a60b03f95fa5",
+               "description": "Merge transcripts",
+               "methodName": "mergeTranscripts",
+               "jsondocId": "f8557a5e-88cc-42e2-8d87-03cc574547b6",
                "bodyobject": {
-                  "jsondocId": "59ece693-f049-4a50-aefe-a4ee4904a43d",
+                  "jsondocId": "91f4de48-e930-4a8c-83fa-8b943260e58f",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2922,9 +2867,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/getSequences",
+               "path": "/annotationEditor/mergeTranscripts",
                "response": {
-                  "jsondocId": "0a4b5705-f098-46db-9888-f09e8d3835d3",
+                  "jsondocId": "fa99c8fc-5ee5-474a-9c5e-8dffe790c29a",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2937,7 +2882,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "e60c3492-1b61-4508-90e5-b8189146388d",
+                     "jsondocId": "b5df2e31-3a85-4701-b998-63f5ff058842",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -2946,7 +2891,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8f00c1cf-3d98-4138-8abd-3162a2c221cd",
+                     "jsondocId": "6977cffb-1444-4627-ab18-65a98e96cf7c",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -2955,7 +2900,25 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "feb49db0-218c-40e0-820a-4859fef69894",
+                     "jsondocId": "6555c702-8604-4974-9d76-5f75f8c81360",
+                     "name": "sequence",
+                     "format": "",
+                     "description": "(optional) Sequence name",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "59900373-7903-4ab4-b6a6-53b8f9264a98",
+                     "name": "organism",
+                     "format": "",
+                     "description": "(optional) Organism ID or common name",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "e98acb18-03ff-4bb2-8230-66d8707022d8",
                      "name": "features",
                      "format": "",
                      "description": "JSONArray of features objects to export defined by a unique name {'uniquename':'ABC123'}",
@@ -2965,11 +2928,11 @@
                   }
                ],
                "verb": "POST",
-               "description": "Get gff3",
-               "methodName": "getGff3",
-               "jsondocId": "dddec2bf-01be-4144-a737-e97230531605",
+               "description": "Get sequences for features",
+               "methodName": "getSequence",
+               "jsondocId": "5fbb2d9a-526d-4db6-93d8-7ed59df8d936",
                "bodyobject": {
-                  "jsondocId": "e9562dbc-d8b3-4587-a70b-b07761d1200f",
+                  "jsondocId": "f9a2b866-a782-4bff-a95a-923a10b59939",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -2977,9 +2940,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/getGff3",
+               "path": "/annotationEditor/getSequences",
                "response": {
-                  "jsondocId": "871b9a38-90f6-49d1-93b6-3d6366f7bc21",
+                  "jsondocId": "4a51a1b5-d9ed-474e-89f2-e4368bbfc016",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -2988,7 +2951,7 @@
                "consumes": ["application/json"]
             },
             {
-               "jsondocId": "49e87438-29f9-4e4b-8443-699b62fe9316",
+               "jsondocId": "92402869-75e2-49b4-a987-86e524e3a796",
                "bodyobject": null,
                "apierrors": [],
                "path": "/annotationEditor/getSequenceSearchTools",
@@ -2996,7 +2959,7 @@
                "pathparameters": [],
                "queryparameters": [],
                "response": {
-                  "jsondocId": "fe705fc0-d0dd-400b-a0e8-a4fc179eab43",
+                  "jsondocId": "9773a895-d92c-4069-a8fb-47892218ad8d",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -3011,7 +2974,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "38fa79e3-f194-432e-8f22-2cc8e826631a",
+                     "jsondocId": "3a59296e-51be-4047-9f8e-9adf8cd064d5",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3020,7 +2983,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e8c8f1a6-176c-4c45-846a-af4ebfde8fcf",
+                     "jsondocId": "a1081d5f-6535-474d-a57f-06c28a03310f",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3032,9 +2995,9 @@
                "verb": "POST",
                "description": "Get canned comments",
                "methodName": "getCannedComments",
-               "jsondocId": "88f42656-c185-49a2-9775-0433c2dc3e57",
+               "jsondocId": "d7e39d3a-0484-40d4-8595-190226c149c5",
                "bodyobject": {
-                  "jsondocId": "77406769-b49d-479d-9084-df65e1b50d1e",
+                  "jsondocId": "de0c71d4-70ae-491c-8669-48609cedf1e1",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3044,7 +3007,7 @@
                "apierrors": [],
                "path": "/annotationEditor/getCannedComments",
                "response": {
-                  "jsondocId": "bfa1ecd2-1e6a-4b0f-aa94-cb3339f34fa4",
+                  "jsondocId": "d950cc0e-bf0f-4938-a9b5-bb9b50a684df",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -3057,7 +3020,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "f2d58177-6c23-48e1-9b74-f39d58670219",
+                     "jsondocId": "e2254673-0f69-460c-a180-d726642176ca",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3066,7 +3029,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "cbfafa58-316a-48d1-853f-703c8893aa49",
+                     "jsondocId": "f6f743fe-d3b2-415a-8cda-0f585c9f95b1",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3075,7 +3038,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "608cd856-036d-4ce5-b1d3-941960570fba",
+                     "jsondocId": "0d6f69e5-147b-42e1-9eb9-a723abc8462b",
                      "name": "client_token",
                      "format": "",
                      "description": "Organism ID/Name or Client-generated ",
@@ -3084,7 +3047,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3223648f-9531-4d9a-8e1f-de3da15b2358",
+                     "jsondocId": "af4e4628-44a3-4768-9e4a-c9bcf3133fe1",
                      "name": "search",
                      "format": "",
                      "description": "{'key':'blat','residues':'ATACTAGAGATAC':'database_id':'abc123'}",
@@ -3096,9 +3059,9 @@
                "verb": "POST",
                "description": "Search sequences",
                "methodName": "searchSequence",
-               "jsondocId": "ebad7814-1369-4e5b-bdf5-ecd87dc61eb3",
+               "jsondocId": "bc247f50-b096-42ce-9e5d-6d054afdacf6",
                "bodyobject": {
-                  "jsondocId": "7e691f8b-f1c6-4fb9-8a9a-02fa57ce6376",
+                  "jsondocId": "7fc5ea13-20d4-4e26-9945-302fdb58f142",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3108,7 +3071,7 @@
                "apierrors": [],
                "path": "/annotationEditor/searchSequences",
                "response": {
-                  "jsondocId": "16cd720e-22fd-4ab0-ac73-86cd30ed4c7a",
+                  "jsondocId": "616c82fc-af15-459f-9c7f-f9b1bc8b771b",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -3121,7 +3084,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "349309eb-4aeb-4581-a1a4-de30cc8940e9",
+                     "jsondocId": "a7b7c977-f227-4b03-9cdd-671fb9fe2c7b",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3130,7 +3093,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ef53232c-3bf0-4e67-ab4a-4219a36a0d15",
+                     "jsondocId": "fabb230a-e4d9-47ab-afef-6129dbc086cc",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3139,39 +3102,76 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "0af61ead-278d-44eb-94bd-6598c6402466",
-                     "name": "sequence",
+                     "jsondocId": "aec74164-87e0-41e8-975a-18288ce2ad99",
+                     "name": "features",
                      "format": "",
-                     "description": "(optional) Sequence name",
-                     "type": "string",
+                     "description": "JSONArray of features objects to export defined by a unique name {'uniquename':'ABC123'}",
+                     "type": "JSONArray",
+                     "required": "true",
+                     "allowedvalues": []
+                  }
+               ],
+               "verb": "POST",
+               "description": "Get gff3",
+               "methodName": "getGff3",
+               "jsondocId": "915c1c59-9017-4e49-ab6c-8f098ebbdb3d",
+               "bodyobject": {
+                  "jsondocId": "532b9fe0-4c51-4ff7-93d4-a2f01e69f0ab",
+                  "mapValueObject": "",
+                  "mapKeyObject": "",
+                  "multiple": "Unknow",
+                  "map": "",
+                  "object": "annotation editor"
+               },
+               "apierrors": [],
+               "path": "/annotationEditor/getGff3",
+               "response": {
+                  "jsondocId": "30d852dc-ce5e-470b-abf8-07b3eef6f64d",
+                  "mapValueObject": "",
+                  "mapKeyObject": "",
+                  "object": "annotation editor"
+               },
+               "produces": ["application/json"],
+               "consumes": ["application/json"]
+            },
+            {
+               "headers": [],
+               "pathparameters": [],
+               "queryparameters": [
+                  {
+                     "jsondocId": "60f6b9c4-1df0-40fa-bc8c-2a3f1e8daff1",
+                     "name": "username",
+                     "format": "",
+                     "description": "",
+                     "type": "email",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "62f72692-3b16-4baf-9ba2-7a0439e166e5",
-                     "name": "organism",
+                     "jsondocId": "000aa78d-2cc8-406e-972e-d894b310a900",
+                     "name": "password",
                      "format": "",
-                     "description": "(optional) Organism ID or common name",
-                     "type": "string",
+                     "description": "",
+                     "type": "password",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8bf8f877-4d09-4174-990c-7e9807397327",
-                     "name": "features",
+                     "jsondocId": "d39e4d24-4132-4b92-806e-8c34ffef59d5",
+                     "name": "days",
                      "format": "",
-                     "description": "JSONArray containing JSON objects with {'uniquename':'ABCD-1234','non_reserved_properties':[{'tag':'clockwork','value':'orange'},{'tag':'color','value':'purple'}]}.  Available status found here: /availableStatus/ ",
-                     "type": "JSONArray",
+                     "description": "Number of past days to retrieve annotations from.",
+                     "type": "Integer",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Add attribute (key,value pair) to feature",
-               "methodName": "addAttribute",
-               "jsondocId": "46ad6614-52ee-46f8-9a71-cc0b049a2c84",
+               "description": "Get genes created or updated in the past, Returns JSON hash gene_name:organism",
+               "methodName": "getRecentAnnotations",
+               "jsondocId": "ac56535e-46d0-41a0-8d6c-becbb9633450",
                "bodyobject": {
-                  "jsondocId": "384952c2-f54f-4c49-a4a7-eceed0760c32",
+                  "jsondocId": "1092bf61-a8ea-4859-889b-ffa973a590fe",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3179,9 +3179,9 @@
                   "object": "annotation editor"
                },
                "apierrors": [],
-               "path": "/annotationEditor/addAttribute",
+               "path": "/annotationEditor/getRecentAnnotations",
                "response": {
-                  "jsondocId": "04841e48-364f-40d0-9901-15103f4c1eef",
+                  "jsondocId": "1f949a07-9e5a-4a15-8027-4603a55ea55b",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotation editor"
@@ -3194,14 +3194,14 @@
          "description": "Methods for running the annotation engine"
       },
       {
-         "jsondocId": "68ca938b-8653-43dd-be1a-0f2cf9c09d4f",
+         "jsondocId": "37b01e28-8174-4de6-83e6-dc3501bc72e2",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "53a300d5-c1ac-4702-b460-695e319eb4f6",
+                     "jsondocId": "b5311862-fd61-474f-b87c-f5dcce45dbfb",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3210,7 +3210,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3e4dd52e-6fd7-4854-b488-a596300b9bb2",
+                     "jsondocId": "ed3c9646-6453-4cbd-8344-0add9857fe03",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3219,7 +3219,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "0e3e5d71-ed76-4efd-8a5f-adce264b9418",
+                     "jsondocId": "e436f095-79bb-4621-989f-27b19de02820",
                      "name": "uniquename",
                      "format": "",
                      "description": "Uniquename (UUID) of the feature we are editing",
@@ -3228,7 +3228,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "0a143aa1-a2a3-4e99-8cd0-9037a3377420",
+                     "jsondocId": "f79b0a49-bf7e-4149-8324-49365cfe3e67",
                      "name": "name",
                      "format": "",
                      "description": "Updated feature name",
@@ -3237,7 +3237,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f3df2687-90ff-4f68-96a2-4d74e3752a3d",
+                     "jsondocId": "5cec08e1-a922-4e8c-b391-90f3598425a4",
                      "name": "symbol",
                      "format": "",
                      "description": "Updated feature symbol",
@@ -3246,7 +3246,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "30229512-9dc2-45ef-a67e-11efaa8fe9ec",
+                     "jsondocId": "505662e8-4663-420b-8031-50400fb3e60d",
                      "name": "description",
                      "format": "",
                      "description": "Updated feature description",
@@ -3258,9 +3258,9 @@
                "verb": "POST",
                "description": "Update shallow feature properties",
                "methodName": "updateFeature",
-               "jsondocId": "f0aed6e6-2afc-4355-99c1-b32dbc1db9b8",
+               "jsondocId": "2ae1adb0-a17a-4993-9fba-45ea0ec5a221",
                "bodyobject": {
-                  "jsondocId": "21238956-253c-4c0f-aadf-0475858f529b",
+                  "jsondocId": "40c63c10-1376-4878-a5da-fe78267185ef",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3270,7 +3270,7 @@
                "apierrors": [],
                "path": "/annotator/updateFeature",
                "response": {
-                  "jsondocId": "f9450c90-8f45-42a8-a519-00a5930603c5",
+                  "jsondocId": "b22860f8-2b2c-4815-b7f6-ddfce1dd9e14",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotator"
@@ -3283,7 +3283,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "af376231-4551-4e89-a9be-621174ee2f47",
+                     "jsondocId": "18bfb066-8aeb-4f9a-b57f-56e727946705",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3292,7 +3292,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "18976075-49d3-4f2d-afd2-65a56320a75e",
+                     "jsondocId": "9eaa6fdb-a8f8-428f-bba1-ff15ed8f9d93",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3301,7 +3301,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7a8ac7de-2050-4d95-ae21-bc320c5e8866",
+                     "jsondocId": "ffab3bdc-f90a-4c30-975d-f59f1f44deb7",
                      "name": "uniquename",
                      "format": "",
                      "description": "Uniquename (UUID) of the exon we are editing",
@@ -3310,7 +3310,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7686ed84-f83f-419a-b5dc-d9b75aac04e7",
+                     "jsondocId": "2301ec35-3df2-43f0-be7b-b8bae7d306eb",
                      "name": "fmin",
                      "format": "",
                      "description": "fmin for Exon Location",
@@ -3319,7 +3319,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "03913cc0-0eff-4b03-8628-f515c0ff079f",
+                     "jsondocId": "6e068b3a-366b-4260-89a7-46ecbf1d3024",
                      "name": "fmax",
                      "format": "",
                      "description": "fmax for Exon Location",
@@ -3328,7 +3328,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "af0af79b-1ae7-47ab-8c28-8a5e7cd7577b",
+                     "jsondocId": "f7fca956-9510-4955-b8ad-d57fd1955066",
                      "name": "strand",
                      "format": "",
                      "description": "strand for Feature Location 1 or -1",
@@ -3340,9 +3340,9 @@
                "verb": "POST",
                "description": "Update exon boundaries",
                "methodName": "setExonBoundaries",
-               "jsondocId": "b49285b3-9756-4d66-9184-266fd986731e",
+               "jsondocId": "b65eacef-fda3-4e54-b3a1-d9a9bd4cae41",
                "bodyobject": {
-                  "jsondocId": "83ffe5cb-6b6b-4f84-a4e2-3e7c02b413f0",
+                  "jsondocId": "1e983f23-1b89-4236-9002-c3ffadcd14af",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3352,7 +3352,7 @@
                "apierrors": [],
                "path": "/annotator/setExonBoundaries",
                "response": {
-                  "jsondocId": "53744ed5-88d5-4e19-bc92-d2a7601450bc",
+                  "jsondocId": "1d8bf220-64cc-4479-9d35-3d22c75edc53",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotator"
@@ -3365,7 +3365,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "5da36205-d6d5-4cf3-8e46-67b674b8a794",
+                     "jsondocId": "e5af15e5-9b3c-452e-9bb0-a281075145d6",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3374,7 +3374,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "4c182823-9ab7-4b18-b867-0e687bc9e1a8",
+                     "jsondocId": "5ba1791e-c571-47eb-b27a-10466c8553af",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3383,7 +3383,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ff22c3c2-1161-40cf-a0ec-dea039e7e65c",
+                     "jsondocId": "be88e1a9-9851-43f0-b66e-3cf4af63b197",
                      "name": "id",
                      "format": "",
                      "description": "Group ID (or specify the name)",
@@ -3392,7 +3392,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "61d9de4a-093a-4a1c-b10b-79575ba1f28c",
+                     "jsondocId": "fcf0a82b-ae2c-4019-9317-67c52c506d87",
                      "name": "name",
                      "format": "",
                      "description": "Group name",
@@ -3404,9 +3404,9 @@
                "verb": "POST",
                "description": "Get annotators report for group",
                "methodName": "getAnnotatorsReportForGroup",
-               "jsondocId": "2089062a-22aa-44da-8464-9d51a7926c20",
+               "jsondocId": "7de2fc53-1629-4899-a10a-fe49edd57365",
                "bodyobject": {
-                  "jsondocId": "bf1d528b-4a17-4c20-83ac-d3c94cbc21a9",
+                  "jsondocId": "8770a87b-6493-4363-8308-01aac26fddc9",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3416,7 +3416,7 @@
                "apierrors": [],
                "path": "/group/getAnnotatorsReportForGroup",
                "response": {
-                  "jsondocId": "a2e86d20-0794-41c5-8072-d251e4548f3d",
+                  "jsondocId": "50422fef-a25a-4bc6-8e72-7d099352c3f9",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "annotator"
@@ -3429,14 +3429,14 @@
          "description": "Methods for running the annotation engine"
       },
       {
-         "jsondocId": "6265f319-8c46-46ac-a10f-f7ebb51eedd0",
+         "jsondocId": "74782818-0f43-40a7-aa1b-c7a1be60f2b5",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "b902f315-3919-4569-87b8-e25d8a2021b5",
+                     "jsondocId": "44d30c04-26bf-442b-ab66-659ae3aca308",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3445,7 +3445,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "bae225b6-9cf7-468e-909c-4172ee3b1f4d",
+                     "jsondocId": "b8d1b7d6-955b-4070-85e4-55dcbcd182a4",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3454,7 +3454,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e0b55dc4-f858-4c80-8543-6ef76c41f886",
+                     "jsondocId": "fadb1a51-4116-42ae-9e93-5c4bee1b5d1f",
                      "name": "id",
                      "format": "",
                      "description": "Status ID to update (or specify the old_value)",
@@ -3463,7 +3463,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "cf4ed50b-e18c-4d7c-8b56-b44336871508",
+                     "jsondocId": "c80c6c4a-8a5b-4944-bb0b-29e2b5995d88",
                      "name": "old_value",
                      "format": "",
                      "description": "Status name to update",
@@ -3472,7 +3472,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "167c564c-0c1c-4fcc-856e-3ad4eb6114cf",
+                     "jsondocId": "138fd011-5f78-4d49-ba66-6eee9f17906d",
                      "name": "new_value",
                      "format": "",
                      "description": "Status name to change to (the only editable option)",
@@ -3484,9 +3484,9 @@
                "verb": "POST",
                "description": "Update status",
                "methodName": "updateStatus",
-               "jsondocId": "a2d4682d-5852-42ab-815c-733e326010c6",
+               "jsondocId": "f0fd39fb-d8d5-45fc-a2ed-6d3ce3fc9877",
                "bodyobject": {
-                  "jsondocId": "00be8150-d7d9-4be0-9a62-e4cdb7ad50b1",
+                  "jsondocId": "f473134d-c96c-479f-86cd-79d4ab6ade6e",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3496,7 +3496,7 @@
                "apierrors": [],
                "path": "/availableStatus/updateStatus",
                "response": {
-                  "jsondocId": "22384546-49ee-4194-ad97-a216d4cadd4b",
+                  "jsondocId": "40ccc3dd-2066-4663-93eb-691a5c5e6ef6",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "available status"
@@ -3509,7 +3509,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "df4ee713-3b58-49d3-b1d2-f525e1e527f5",
+                     "jsondocId": "e3f10f37-8c33-4040-bbcf-89ff3e2733ce",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3518,7 +3518,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "167ca5b0-7b02-481a-b2d9-e905c3f6ffd5",
+                     "jsondocId": "3a9c922f-9a91-4f1e-a0ea-1b0e176579fe",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3527,7 +3527,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e8f9d715-d7b6-4610-bb85-f9c410f77433",
+                     "jsondocId": "0892bc52-f992-481c-8465-afa16ade2399",
                      "name": "value",
                      "format": "",
                      "description": "Status name to add",
@@ -3539,9 +3539,9 @@
                "verb": "POST",
                "description": "Create status",
                "methodName": "createStatus",
-               "jsondocId": "6c444736-0ce5-441e-a630-31cd02100a66",
+               "jsondocId": "d5ffca7b-556a-4e19-b717-ca5f5208ddef",
                "bodyobject": {
-                  "jsondocId": "e406ad11-e572-4138-b740-d7c384429242",
+                  "jsondocId": "7245eba5-5c84-408f-9f45-c790f7e6d9ff",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3551,7 +3551,7 @@
                "apierrors": [],
                "path": "/availableStatus/createStatus",
                "response": {
-                  "jsondocId": "70f6f7d7-5eed-4fe6-a5e6-8f3ac6afce76",
+                  "jsondocId": "13b8b33b-efb8-42f9-afdc-8c0a64e2f8e9",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "available status"
@@ -3564,7 +3564,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "9e1223b3-37b3-4ce2-a5ec-78cea6a8f56c",
+                     "jsondocId": "dae16493-00c1-4481-b873-8968017502cc",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3573,7 +3573,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "36e2e482-3330-4052-8e35-3e5cd38af697",
+                     "jsondocId": "9075e4df-5e2b-455d-936c-e37798d917fa",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3582,7 +3582,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "14096ca3-7f2b-4a9b-83ae-947218b343ef",
+                     "jsondocId": "f6f15d99-d916-4e19-988a-082f63667fcc",
                      "name": "id",
                      "format": "",
                      "description": "Status ID to remove (or specify the name)",
@@ -3591,7 +3591,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "88af4ba6-5d59-4d71-9189-e4f8038b7c7b",
+                     "jsondocId": "876aff30-aa8b-4c9e-b6ba-94455753f8ec",
                      "name": "value",
                      "format": "",
                      "description": "Status name to delete",
@@ -3603,9 +3603,9 @@
                "verb": "POST",
                "description": "Remove a status",
                "methodName": "deleteStatus",
-               "jsondocId": "222c4314-2b34-4789-9d2c-2fd4b90c0f88",
+               "jsondocId": "d11fe420-9282-454c-91c8-bf6c6575810d",
                "bodyobject": {
-                  "jsondocId": "4f7b8adb-5982-4a8c-abdc-55847d8729b7",
+                  "jsondocId": "0cb2605f-2192-47a6-bc9e-b55561e6763c",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3615,7 +3615,7 @@
                "apierrors": [],
                "path": "/availableStatus/deleteStatus",
                "response": {
-                  "jsondocId": "022025cb-cc94-40fb-a076-38f25e89c720",
+                  "jsondocId": "804e5991-ac49-4e6b-8002-dff791f7f0e0",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "available status"
@@ -3628,7 +3628,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "e9d33c24-9de1-4f9a-910e-3df216d600f7",
+                     "jsondocId": "8a7f9453-97cb-48bf-94ba-b92bd2d9dd84",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3637,7 +3637,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d50d9416-013e-450f-9eb8-ae507216c2e0",
+                     "jsondocId": "95331312-8860-4afc-9f1b-96f89d49f2ed",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3646,7 +3646,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8044a949-c5cf-4b19-bf2d-01a0b1c96a04",
+                     "jsondocId": "9be3a993-4af4-4ee4-bcde-fa4940392222",
                      "name": "id",
                      "format": "",
                      "description": "Status ID to show (or specify a name)",
@@ -3655,7 +3655,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ac9b80f2-df55-438e-aff5-d19bf622b664",
+                     "jsondocId": "1cbe5b37-db9d-4eb7-b2ca-cb311534953b",
                      "name": "name",
                      "format": "",
                      "description": "Status name to show",
@@ -3667,9 +3667,9 @@
                "verb": "POST",
                "description": "Returns a JSON array of all statuses, or optionally, gets information about a specific status",
                "methodName": "showStatus",
-               "jsondocId": "86546683-387b-4ff6-8c8c-57b4bda914fb",
+               "jsondocId": "b0b16423-d8f8-411a-9823-5b0054a44244",
                "bodyobject": {
-                  "jsondocId": "2073b60b-3f78-4ba6-8356-719079ef3de1",
+                  "jsondocId": "0d41b416-7860-4117-9726-d7938d9bac73",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3679,7 +3679,7 @@
                "apierrors": [],
                "path": "/availableStatus/showStatus",
                "response": {
-                  "jsondocId": "f6a64400-b835-472f-9f2d-f7b291357626",
+                  "jsondocId": "0aa0eac2-cf3b-41a0-bbbb-d68fbe8827ab",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "available status"
@@ -3692,14 +3692,14 @@
          "description": "Methods for managing available statuses"
       },
       {
-         "jsondocId": "44ac42fe-1f99-4b38-a11b-718a16357bc4",
+         "jsondocId": "8de3f46f-591c-4dc8-b295-69688553e372",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "da32bdda-58c6-47ac-a14a-fd5b01c2f39f",
+                     "jsondocId": "88760a74-3f07-44da-9366-f4326548086e",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3708,7 +3708,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d1c19f99-4149-4c93-bf56-68648f611649",
+                     "jsondocId": "9310f42d-d872-46f4-8868-a4315f413ddc",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3717,7 +3717,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "4ac14757-976c-4f41-a837-cbb3105df17e",
+                     "jsondocId": "906494cf-1d15-432a-8d35-35719ccc3cb7",
                      "name": "comment",
                      "format": "",
                      "description": "Canned comment to add",
@@ -3726,7 +3726,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f54fd3ce-1069-4dc9-9266-a8a47fdf0d2e",
+                     "jsondocId": "42c53809-6495-4f8a-959e-c5858967d1f9",
                      "name": "metadata",
                      "format": "",
                      "description": "Optional additional information",
@@ -3738,9 +3738,9 @@
                "verb": "POST",
                "description": "Create canned comment",
                "methodName": "createComment",
-               "jsondocId": "076b2552-ce04-4aa5-9900-427950387861",
+               "jsondocId": "0f280131-c9ff-4ea9-bc72-d53f8878856e",
                "bodyobject": {
-                  "jsondocId": "b06f0dc4-a549-479a-ba53-b13618c76de1",
+                  "jsondocId": "58fd26da-7e22-476c-8fde-039a1179762c",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3750,7 +3750,7 @@
                "apierrors": [],
                "path": "/cannedComment/createComment",
                "response": {
-                  "jsondocId": "51249bf4-750b-40f9-91cb-0b52b214de47",
+                  "jsondocId": "d25cf3a8-7d2c-4495-b0d3-ab804f2a05b1",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned comment"
@@ -3763,7 +3763,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "367a8117-7f43-4bee-b7c0-bd8262c168f7",
+                     "jsondocId": "af032507-9b06-47a3-b83a-a8b04d59f5cf",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3772,7 +3772,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "0fa4bf73-9e4c-41b9-a0b2-351f38724020",
+                     "jsondocId": "44545bd7-c46a-4670-8b61-530f88ac91ba",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3781,7 +3781,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e98c0ac7-f9c5-4f89-9d3b-dab343ed21b8",
+                     "jsondocId": "adffc3b8-afa3-4e5e-aba6-d53f84002272",
                      "name": "id",
                      "format": "",
                      "description": "Canned comment ID to update (or specify the old_comment)",
@@ -3790,7 +3790,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "390c940e-8016-4300-b366-2b87d792077a",
+                     "jsondocId": "ec8af064-5754-4564-b9ce-caa7734ded65",
                      "name": "old_comment",
                      "format": "",
                      "description": "Canned comment to update",
@@ -3799,7 +3799,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "63e5005e-b6fd-4be7-9e16-e08073bef686",
+                     "jsondocId": "dd7729aa-e0ae-4cc9-8e5f-5a425e0d4cf6",
                      "name": "new_comment",
                      "format": "",
                      "description": "Canned comment to change to (the only editable option)",
@@ -3808,7 +3808,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "836b490d-1673-4d5a-bd8c-367351eb4da2",
+                     "jsondocId": "69f18f9f-2cfc-4501-9220-caa256f578e6",
                      "name": "metadata",
                      "format": "",
                      "description": "Optional additional information",
@@ -3820,9 +3820,9 @@
                "verb": "POST",
                "description": "Update canned comment",
                "methodName": "updateComment",
-               "jsondocId": "651e92ee-c000-4d80-86af-e635c7b2dfe1",
+               "jsondocId": "1a32586f-0a9b-4547-ac7f-56520e7001fe",
                "bodyobject": {
-                  "jsondocId": "204870db-e120-4b33-b1c1-a027a4971a7b",
+                  "jsondocId": "9455508c-7244-4b0b-a347-3fb0f0122257",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3832,7 +3832,7 @@
                "apierrors": [],
                "path": "/cannedComment/updateComment",
                "response": {
-                  "jsondocId": "9be53546-770c-4a06-801b-a2cd86566106",
+                  "jsondocId": "6a44be06-f170-4f59-bd59-4db531bfef98",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned comment"
@@ -3845,7 +3845,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "05346f45-2cd4-4389-a38f-5c7ef895b533",
+                     "jsondocId": "0a9734f5-06d2-416a-807b-0a44d4dc3ce3",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3854,7 +3854,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "60fbcfad-2e10-40d4-b98d-5088a8dbcab7",
+                     "jsondocId": "9c628438-7191-4245-ada1-2dd36b29c0b2",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3863,7 +3863,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "66bdae85-402f-4200-b875-4e728b1f8ad0",
+                     "jsondocId": "147f8c4a-3789-45f7-a1e9-dbcaf4ca541b",
                      "name": "id",
                      "format": "",
                      "description": "Canned comment ID to remove (or specify the name)",
@@ -3872,7 +3872,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "de5ecfaa-8aa6-41b0-b9d0-8b5a2d4ac9d9",
+                     "jsondocId": "9211b5a3-9e1b-46ee-9ca2-94312ea67572",
                      "name": "comment",
                      "format": "",
                      "description": "Canned comment to delete",
@@ -3884,9 +3884,9 @@
                "verb": "POST",
                "description": "Remove a canned comment",
                "methodName": "deleteComment",
-               "jsondocId": "9424e19c-8aa7-49ef-8d99-ed0347c7e879",
+               "jsondocId": "d40461c7-6cb2-47b6-9202-8b5c5795e596",
                "bodyobject": {
-                  "jsondocId": "b7941279-1bd2-4a0a-8e84-1932d2478ff9",
+                  "jsondocId": "c1811379-96b6-4554-9cb0-c6fc3e5abf88",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3896,7 +3896,7 @@
                "apierrors": [],
                "path": "/cannedComment/deleteComment",
                "response": {
-                  "jsondocId": "60302d29-b667-4f86-af7e-953d93495448",
+                  "jsondocId": "84b52058-4b34-4284-96e8-6c93d5bec1ee",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned comment"
@@ -3909,7 +3909,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "2927ef81-1168-4c5e-939a-fd5d05390c54",
+                     "jsondocId": "b7e1b5fe-a5de-47c0-8220-405d764700da",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3918,7 +3918,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "15ecfe78-785c-41e3-8b4a-b472a2be43c3",
+                     "jsondocId": "db5f32a1-755d-4021-9257-b5967b13c43d",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3927,7 +3927,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e0ab4a3e-dba7-4ce7-b7ee-19c5df334e69",
+                     "jsondocId": "31737d56-043f-44d7-83d1-d476f511591e",
                      "name": "id",
                      "format": "",
                      "description": "Comment ID to show (or specify a comment)",
@@ -3936,7 +3936,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6c397380-0b5e-46c6-bea8-70802933e040",
+                     "jsondocId": "02122764-0cf4-4163-a16f-38d17156c675",
                      "name": "comment",
                      "format": "",
                      "description": "Comment to show",
@@ -3948,9 +3948,9 @@
                "verb": "POST",
                "description": "Returns a JSON array of all canned comments, or optionally, gets information about a specific canned comment",
                "methodName": "showComment",
-               "jsondocId": "f7e8b9c1-7ccb-4f1a-94a1-7e818ba49a9b",
+               "jsondocId": "81ca4a5a-6683-4c66-a907-2bddb0c30457",
                "bodyobject": {
-                  "jsondocId": "c2c04143-ed3e-4da3-b249-52eca803266d",
+                  "jsondocId": "c09574e3-294a-4473-80ab-288a0dd53b36",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -3960,7 +3960,7 @@
                "apierrors": [],
                "path": "/cannedComment/showComment",
                "response": {
-                  "jsondocId": "545f00ea-3b79-46c1-92bf-845c54c98f9b",
+                  "jsondocId": "2c6bfd06-2973-430c-80ab-df150c49a1d7",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned comment"
@@ -3973,14 +3973,14 @@
          "description": "Methods for managing canned comments"
       },
       {
-         "jsondocId": "498ecee5-2c25-402f-bd4c-19301aba4604",
+         "jsondocId": "d0f8e998-75a8-4379-a06b-e3c7644a3700",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "f077f116-f1f2-450c-a195-19b6240d6e09",
+                     "jsondocId": "ff73ad0c-14ba-413d-9b52-635a2bfa8e69",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -3989,7 +3989,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ff643388-e96e-46a2-a32c-05e7ca8b9a8a",
+                     "jsondocId": "868ce9c3-3521-45de-8f36-1c86cab97836",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -3998,7 +3998,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9345f9e0-f8cf-44fe-a780-94457bee58a5",
+                     "jsondocId": "8d00c133-5b65-49c5-9af9-576196285159",
                      "name": "id",
                      "format": "",
                      "description": "Canned key ID to update (or specify the old_key)",
@@ -4007,7 +4007,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "71baebe0-bf2e-4ee3-8fca-af168b63e1ba",
+                     "jsondocId": "1195c81f-cfbe-4e8a-8730-826bdd862e49",
                      "name": "old_key",
                      "format": "",
                      "description": "Canned key to update",
@@ -4016,7 +4016,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "5b58184e-ae15-4f55-8d34-65a4141e1114",
+                     "jsondocId": "540efa54-ca92-4000-8cf6-e4c265a282c3",
                      "name": "new_key",
                      "format": "",
                      "description": "Canned key to change to (the only editable option)",
@@ -4025,7 +4025,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b9f6ec14-fa71-4fec-9330-29760c25ad12",
+                     "jsondocId": "42f741aa-e389-4210-8c65-e1ac9af3f026",
                      "name": "metadata",
                      "format": "",
                      "description": "Optional additional information",
@@ -4037,9 +4037,9 @@
                "verb": "POST",
                "description": "Update canned key",
                "methodName": "updateKey",
-               "jsondocId": "2ab79d78-edeb-401a-99a2-3e023980b1c6",
+               "jsondocId": "dda63875-b467-42a4-93e8-7ccb5eaa0dd5",
                "bodyobject": {
-                  "jsondocId": "a4a9f20c-28e0-46a1-845c-1153b4d73433",
+                  "jsondocId": "6ca1ca97-dc51-4b77-99f2-402cbe3e24a8",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4049,7 +4049,7 @@
                "apierrors": [],
                "path": "/cannedKey/updateKey",
                "response": {
-                  "jsondocId": "5e7f1d8a-27e7-4f84-a682-adafe3c1a8bd",
+                  "jsondocId": "aae00555-008b-4674-ba1f-e570b7bb7be8",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned key"
@@ -4062,7 +4062,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "21322cfa-f1c5-48df-9ff0-0e20044540ab",
+                     "jsondocId": "4b0a18bb-f791-4b08-b57e-3179d9514cdd",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4071,7 +4071,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6f0880ce-9755-4c69-886d-26b9c8a582a9",
+                     "jsondocId": "a06eedc3-4936-4b5f-b2f5-cc5a75e7e1a3",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4080,7 +4080,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1bbad247-489f-49c7-a597-0237ca23c3e1",
+                     "jsondocId": "31248d3b-7e78-48fd-bf6c-4a9cfe830f1b",
                      "name": "key",
                      "format": "",
                      "description": "Canned key to add",
@@ -4089,7 +4089,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "fa0c29d6-6a50-464e-b2eb-69a495fb3570",
+                     "jsondocId": "ec2f12b0-f9f5-4d78-848e-8cb51e984365",
                      "name": "metadata",
                      "format": "",
                      "description": "Optional additional information",
@@ -4101,9 +4101,9 @@
                "verb": "POST",
                "description": "Create canned key",
                "methodName": "createKey",
-               "jsondocId": "c065af2e-16b9-4464-81f9-4f3796351cb4",
+               "jsondocId": "a0775054-b143-4cc9-94f4-d28a19b9d49f",
                "bodyobject": {
-                  "jsondocId": "7b89bbd9-7745-49b6-98f1-d2f1239211f9",
+                  "jsondocId": "6143d7c3-6ca4-436b-83e4-88b7db33e5c8",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4113,7 +4113,7 @@
                "apierrors": [],
                "path": "/cannedKey/createKey",
                "response": {
-                  "jsondocId": "2416a332-547b-4a64-82a6-53212b5c03af",
+                  "jsondocId": "b73c0e74-880f-4ed3-a30d-da206c56aa35",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned key"
@@ -4126,7 +4126,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "1bc81c73-e7dc-446d-9187-067bb5980989",
+                     "jsondocId": "e8374bce-0bd9-4c49-ad97-7c6cf1106b85",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4135,7 +4135,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "db3129cf-ab04-4b9a-992b-f7b5370e3d31",
+                     "jsondocId": "0e43a63d-386e-4093-b83f-cd882e3e319d",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4144,7 +4144,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "94cea3f8-b4ac-4dde-9562-72ac81ec5bc8",
+                     "jsondocId": "83f5d1f5-e1bf-40f7-baf0-dfb85712c2d2",
                      "name": "id",
                      "format": "",
                      "description": "Canned key ID to remove (or specify the name)",
@@ -4153,7 +4153,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6ce285ae-00e0-47eb-b0cd-ba52bba7f430",
+                     "jsondocId": "c83c0e5f-7c3b-400f-823f-617e6e1ffe4d",
                      "name": "key",
                      "format": "",
                      "description": "Canned key to delete",
@@ -4165,9 +4165,9 @@
                "verb": "POST",
                "description": "Remove a canned key",
                "methodName": "deleteKey",
-               "jsondocId": "063e5139-5798-4c5b-ab86-ac83b398a8fe",
+               "jsondocId": "11e6cbd3-a231-414f-921b-71b188853048",
                "bodyobject": {
-                  "jsondocId": "a6068d42-3342-4ff3-8707-d507e5a0108d",
+                  "jsondocId": "a8731abc-b8ec-461f-9d07-93a777a3c0cd",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4177,7 +4177,7 @@
                "apierrors": [],
                "path": "/cannedKey/deleteKey",
                "response": {
-                  "jsondocId": "f0d993bd-ab51-4fd5-b369-8aaeece4b572",
+                  "jsondocId": "03ff92f3-b718-48b8-b1c0-5cd71782f0b8",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned key"
@@ -4190,7 +4190,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "83d2a067-238e-4904-87a2-044070f8357d",
+                     "jsondocId": "44630a9e-32fe-4f0e-a138-01f3b64d8670",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4199,7 +4199,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "4dc71a31-3c6c-4e8f-add0-1a7f626bf2e9",
+                     "jsondocId": "4ef3388d-d39d-4599-bf7e-48a30abb0509",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4208,7 +4208,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d66916cd-6c2d-44c9-b1a0-25ab8651b368",
+                     "jsondocId": "7245d734-7b50-49aa-ab37-da752e8b2abb",
                      "name": "id",
                      "format": "",
                      "description": "Key ID to show (or specify a key)",
@@ -4217,7 +4217,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "65b906da-fed4-4c6e-99b6-c0a72cd1bc4a",
+                     "jsondocId": "18a5d16c-d599-44fa-8af2-9508f066ea9e",
                      "name": "key",
                      "format": "",
                      "description": "Key to show",
@@ -4229,9 +4229,9 @@
                "verb": "POST",
                "description": "Returns a JSON array of all canned keys, or optionally, gets information about a specific canned key",
                "methodName": "showKey",
-               "jsondocId": "119522a1-4030-41f1-87eb-dd4b780cd5a0",
+               "jsondocId": "f123aa76-97af-4930-b5c9-0210c23a58db",
                "bodyobject": {
-                  "jsondocId": "c917c040-7882-4ead-86a4-3c44c65a46f8",
+                  "jsondocId": "355bda34-0397-40d1-8416-e75114d27a0a",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4241,7 +4241,7 @@
                "apierrors": [],
                "path": "/cannedKey/showKey",
                "response": {
-                  "jsondocId": "e6fed475-f00f-45cd-98d3-41d262434327",
+                  "jsondocId": "1d89d601-feb2-4a3a-a133-4872f63e9391",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned key"
@@ -4254,14 +4254,14 @@
          "description": "Methods for managing canned keys"
       },
       {
-         "jsondocId": "9e4b7f14-55a0-4900-83c0-a6d6ef7c2e8f",
+         "jsondocId": "024cff8b-9d03-4a00-884d-b14bf17e4217",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "b22a374d-8387-4448-b8d5-505e31be67cf",
+                     "jsondocId": "4e075c81-d9a5-4a7c-b311-4d824ab69cd2",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4270,7 +4270,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "41a8a291-b43d-4543-95a2-74da6091a7ca",
+                     "jsondocId": "c9c870ff-bfa7-4be8-84e8-d8e9b7d13448",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4279,7 +4279,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d3bee00f-238a-499a-aab9-5668624ff3fe",
+                     "jsondocId": "b84f7b8f-7b31-4a23-9554-ddff7417f85d",
                      "name": "id",
                      "format": "",
                      "description": "Canned value ID to update (or specify the old_value)",
@@ -4288,7 +4288,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "55955bd0-531a-4ecf-aef5-882033278b51",
+                     "jsondocId": "68157279-abac-4552-b262-71c027066ee8",
                      "name": "old_value",
                      "format": "",
                      "description": "Canned value to update",
@@ -4297,7 +4297,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c497ff1f-9471-4768-be71-b922b730743a",
+                     "jsondocId": "d736845b-6ffd-495e-9265-70b0f8ae7a18",
                      "name": "new_value",
                      "format": "",
                      "description": "Canned value to change to (the only editable option)",
@@ -4306,7 +4306,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c90289e6-0691-4fea-83c0-e3c9dcd90b76",
+                     "jsondocId": "ba677fa6-3a78-4638-9c01-8ff7d380c094",
                      "name": "metadata",
                      "format": "",
                      "description": "Optional additional information",
@@ -4318,9 +4318,9 @@
                "verb": "POST",
                "description": "Update canned value",
                "methodName": "updateValue",
-               "jsondocId": "bc3dd249-4eac-4016-a16b-a09f6d1207c1",
+               "jsondocId": "3d3de875-049e-46fe-b828-4c734c879785",
                "bodyobject": {
-                  "jsondocId": "01c421ff-b697-4690-b580-5331a43846d7",
+                  "jsondocId": "532f2db9-cfdc-43a2-892a-67620950ac0d",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4330,7 +4330,7 @@
                "apierrors": [],
                "path": "/cannedValue/updateValue",
                "response": {
-                  "jsondocId": "4f56a326-df79-4b3a-ae65-474b389a7ecb",
+                  "jsondocId": "4525565d-8a46-4410-bb7a-0719bdff6ad3",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned value"
@@ -4343,7 +4343,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "e4e01bbc-dfec-42dc-bf2c-6fcc96bd833b",
+                     "jsondocId": "3aa351a0-c345-4768-9497-f55fe5042a24",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4352,7 +4352,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7c3465c3-8ef6-460f-8994-7ecdb5765cdc",
+                     "jsondocId": "49408da6-9b4c-4a6c-a7b0-2706c3b51717",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4361,7 +4361,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "63dc3731-338c-4c5c-84d9-90888ec41df7",
+                     "jsondocId": "b9d7f68e-5272-414e-a7db-da3560c1c8b6",
                      "name": "value",
                      "format": "",
                      "description": "Canned value to add",
@@ -4370,7 +4370,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ad7a4e3e-6f1b-47ae-9b3f-b16e49460e6a",
+                     "jsondocId": "d5a78aaf-9dc0-4abc-ad2c-47170365d903",
                      "name": "metadata",
                      "format": "",
                      "description": "Optional additional information",
@@ -4382,9 +4382,9 @@
                "verb": "POST",
                "description": "Create canned value",
                "methodName": "createValue",
-               "jsondocId": "045cdd7a-ff2d-449b-b960-46d9800d1a6b",
+               "jsondocId": "04b2f68b-0d71-4cf2-a708-7fe0721b1f90",
                "bodyobject": {
-                  "jsondocId": "b1665c21-49fe-45cd-8669-9231fa7d4b48",
+                  "jsondocId": "b30f05f7-472f-4318-bd52-cfcc348a4952",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4394,7 +4394,7 @@
                "apierrors": [],
                "path": "/cannedValue/createValue",
                "response": {
-                  "jsondocId": "812a3d7a-1e73-4e10-8c6f-16a56392a0df",
+                  "jsondocId": "410b5aa9-73d0-447d-bd9e-0554780b2121",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned value"
@@ -4407,7 +4407,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "5eaedb7b-a6f8-41ae-a7e2-0ec9d8f768a8",
+                     "jsondocId": "cd234f57-2604-4a4f-8558-4a5bda7f52c7",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4416,7 +4416,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9c1492d6-a8cd-477b-a4ae-4c40315261a6",
+                     "jsondocId": "37fa4cf1-f692-4fa9-a38d-788d9f2b8667",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4425,7 +4425,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "fefd3f35-db66-48a8-b24f-ee540f2b029b",
+                     "jsondocId": "9f6d53b6-7d03-4d15-ab1f-91d802c1ea8e",
                      "name": "id",
                      "format": "",
                      "description": "Canned value ID to remove (or specify the name)",
@@ -4434,7 +4434,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b4e50efa-c16e-40eb-b062-95dd0cd5f778",
+                     "jsondocId": "51f6c662-df32-42c9-a1e3-c30171bc4006",
                      "name": "value",
                      "format": "",
                      "description": "Canned value to delete",
@@ -4446,9 +4446,9 @@
                "verb": "POST",
                "description": "Remove a canned value",
                "methodName": "deleteValue",
-               "jsondocId": "5f6cb2a8-15a8-415d-b66d-e1d6fecb6669",
+               "jsondocId": "4cc243bf-b7a1-4f1c-9f9a-965cff1d7e71",
                "bodyobject": {
-                  "jsondocId": "7f2ca9f6-c433-498d-b31b-c2294b6c5636",
+                  "jsondocId": "12f1d576-fc03-4ade-b525-9b1b25161889",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4458,7 +4458,7 @@
                "apierrors": [],
                "path": "/cannedValue/deleteValue",
                "response": {
-                  "jsondocId": "ae000fd1-3047-4f73-ac86-5e7037ddfa87",
+                  "jsondocId": "3893916b-6a3c-4287-a306-eb0d91c55cfa",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned value"
@@ -4471,7 +4471,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "6255cae7-94db-4295-9c75-096d90459121",
+                     "jsondocId": "a1ebffaf-c7d3-4b28-ac1c-699838ae84d3",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4480,7 +4480,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "84db095d-1106-4544-a123-6437bd7a14c6",
+                     "jsondocId": "75146254-b0a7-4c1f-b84a-1e21dda5f23a",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4489,7 +4489,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "0a566e0f-2e20-4660-ad17-31518f29edfb",
+                     "jsondocId": "c6760147-a07e-44a8-9eaa-ef18e5a50c79",
                      "name": "id",
                      "format": "",
                      "description": "Value ID to show (or specify a value)",
@@ -4498,7 +4498,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8b43f805-2c43-4fd7-b686-9a153da4ca07",
+                     "jsondocId": "9ffce1ca-1914-45c7-9f96-3dc0c59789f3",
                      "name": "value",
                      "format": "",
                      "description": "Value to show",
@@ -4510,9 +4510,9 @@
                "verb": "POST",
                "description": "Returns a JSON array of all canned values, or optionally, gets information about a specific canned value",
                "methodName": "showValue",
-               "jsondocId": "16cb5ae5-7581-4362-9d76-c5e57ce1096d",
+               "jsondocId": "c67df031-c30f-46b7-a5a1-7e75431963b1",
                "bodyobject": {
-                  "jsondocId": "644ed197-e939-4615-867d-8f10f367747b",
+                  "jsondocId": "4752d3f5-a7fd-4268-8a08-697b87ca902e",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4522,7 +4522,7 @@
                "apierrors": [],
                "path": "/cannedValue/showValue",
                "response": {
-                  "jsondocId": "917bfe8b-ae65-41dd-aa1f-f3c0b36201a2",
+                  "jsondocId": "8438ccb6-38c0-4dd6-b128-668fb5073803",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "canned value"
@@ -4535,14 +4535,14 @@
          "description": "Methods for managing canned values"
       },
       {
-         "jsondocId": "4527f30a-7a41-4e74-b568-ace47d5b0d70",
+         "jsondocId": "971a4e62-86ac-4dba-9fa6-ea19ab35cbf1",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "65e0e69f-f187-491f-a836-465726dfff3c",
+                     "jsondocId": "9fef5b6b-d9c8-4fd0-8814-528ee223d505",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4551,7 +4551,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e7f6208a-f69d-4010-92aa-b0c8509e0835",
+                     "jsondocId": "7fe673ad-0189-465e-96a9-94176b9420a9",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4560,7 +4560,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "db318d83-e0df-4017-ac69-d9422806a3e5",
+                     "jsondocId": "fc364376-3234-4c9e-b590-187ff20144e4",
                      "name": "name",
                      "format": "",
                      "description": "Group name to add, or a comma-delimited list of names",
@@ -4572,9 +4572,9 @@
                "verb": "POST",
                "description": "Create group",
                "methodName": "createGroup",
-               "jsondocId": "db02ce5d-7034-4aa2-9143-fdf088da5625",
+               "jsondocId": "94bc90c1-b58b-4948-bca5-2067a978916f",
                "bodyobject": {
-                  "jsondocId": "9a6e332f-080f-4759-a7a7-99d0c96d85c7",
+                  "jsondocId": "d8254410-7730-4d14-a8bd-6ae69243f6f7",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4584,7 +4584,7 @@
                "apierrors": [],
                "path": "/group/createGroup",
                "response": {
-                  "jsondocId": "191276f1-17e2-4761-b9b1-1541067c8b80",
+                  "jsondocId": "2ad1c896-79ee-4ecb-984c-ccd34be8ebf8",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "group"
@@ -4597,7 +4597,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "c44c7af7-2bde-4c4b-8d4d-5d598158f4d6",
+                     "jsondocId": "4f511187-0b19-4d36-adeb-33fdb54f41e9",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4606,7 +4606,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "249c44ed-906f-4b78-9b84-d78f6c1cad18",
+                     "jsondocId": "61bd91db-b7e1-4ba6-ae0c-a7610fc2e729",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4615,21 +4615,30 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6f326a2d-698d-49a6-bd94-e6297603fea7",
-                     "name": "groupId",
+                     "jsondocId": "f4ed2ea2-8b0d-49b0-b202-abcb27a0a05a",
+                     "name": "id",
                      "format": "",
-                     "description": "Optional only load a specific groupId",
+                     "description": "Group ID (or specify the name)",
                      "type": "long",
                      "required": "true",
                      "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "e3e37d5e-df84-47b5-9e37-eeb269ec56a5",
+                     "name": "name",
+                     "format": "",
+                     "description": "Group name",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Load all groups",
-               "methodName": "loadGroups",
-               "jsondocId": "4f30e608-dae0-484a-a165-78e16a2b62bb",
+               "description": "Get organism permissions for group",
+               "methodName": "getOrganismPermissionsForGroup",
+               "jsondocId": "23ebd837-a658-45aa-9a0f-88d1ecfe9f39",
                "bodyobject": {
-                  "jsondocId": "32f9c24b-61bb-4759-80d9-c881db24760d",
+                  "jsondocId": "59e02d99-8b47-4794-b7c8-137c0eb1dd34",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4637,9 +4646,9 @@
                   "object": "group"
                },
                "apierrors": [],
-               "path": "/group/loadGroups",
+               "path": "/group/getOrganismPermissionsForGroup",
                "response": {
-                  "jsondocId": "499e0022-3bae-49ef-8293-45b5974694c4",
+                  "jsondocId": "2b32ec9f-d92d-4c05-8657-7e09acb607a9",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "group"
@@ -4652,7 +4661,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "eb12a00a-2231-44ea-b86f-8e58d9615e8e",
+                     "jsondocId": "d196e144-6456-4c7d-bbd5-881a2a4e81a9",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4661,7 +4670,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "96cfe56f-5094-4e13-8fe4-d8c4786842a0",
+                     "jsondocId": "bb0ba58a-b740-422c-993f-eecbf3ab3b51",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4670,30 +4679,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "bdc54f60-b75b-4681-b2b6-8cec6aa746d0",
-                     "name": "id",
+                     "jsondocId": "49249a15-c01b-4b6d-89e1-df385bf03646",
+                     "name": "groupId",
                      "format": "",
-                     "description": "Group ID (or specify the name)",
+                     "description": "Optional only load a specific groupId",
                      "type": "long",
                      "required": "true",
                      "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "20c5f7e7-d961-49da-a330-543fa9977ef3",
-                     "name": "name",
-                     "format": "",
-                     "description": "Group name",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Get organism permissions for group",
-               "methodName": "getOrganismPermissionsForGroup",
-               "jsondocId": "16174bb0-889a-4d34-88fb-3a0c51817da6",
+               "description": "Load all groups",
+               "methodName": "loadGroups",
+               "jsondocId": "938a4f63-2cb0-4f0c-885a-2f179666c887",
                "bodyobject": {
-                  "jsondocId": "b7aeabd3-16e3-401b-a0ec-6fd4e090b49b",
+                  "jsondocId": "3645769b-23cc-45be-9f46-76ff70f52677",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4701,9 +4701,9 @@
                   "object": "group"
                },
                "apierrors": [],
-               "path": "/group/getOrganismPermissionsForGroup",
+               "path": "/group/loadGroups",
                "response": {
-                  "jsondocId": "266dc7e8-cf75-4a14-b81f-1f9be6c17dbc",
+                  "jsondocId": "f42ae079-d005-4d26-96ac-b620d999afd2",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "group"
@@ -4716,7 +4716,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "b4f65d35-e857-4e46-ba81-533cc5bbff8f",
+                     "jsondocId": "fd779d0a-2fe1-4647-92c4-ce50cb580823",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4725,7 +4725,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1a61dbc1-8d46-45b3-93dd-d304800acc49",
+                     "jsondocId": "6e11c54b-3cca-42b0-9365-ff2c71ad63b5",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4734,7 +4734,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "96075260-5bfd-4c72-a01a-df1f2c09b656",
+                     "jsondocId": "6ec439a2-cbff-42e0-b20d-8a85d4bcd1d7",
                      "name": "id",
                      "format": "",
                      "description": "Group ID to remove (or specify the name)",
@@ -4743,7 +4743,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1a81a1a4-4136-48b6-a5c1-20b807f03993",
+                     "jsondocId": "96b6211a-383f-4f76-8ae0-e1c6f87e21fe",
                      "name": "name",
                      "format": "",
                      "description": "Group name or comma-delimited list of names to remove",
@@ -4755,9 +4755,9 @@
                "verb": "POST",
                "description": "Delete a group",
                "methodName": "deleteGroup",
-               "jsondocId": "152a7487-d726-4272-b61e-dde774ab6138",
+               "jsondocId": "f94e9d17-7e35-462f-9fc8-602b1f3a71b6",
                "bodyobject": {
-                  "jsondocId": "c539636f-30ce-4da7-acb8-1b028d2b72c2",
+                  "jsondocId": "3ea04404-90e6-43eb-aaeb-d495896be8bd",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4767,7 +4767,7 @@
                "apierrors": [],
                "path": "/group/deleteGroup",
                "response": {
-                  "jsondocId": "ae88f3a6-7a14-4ad4-8906-b1aa4a2b09a7",
+                  "jsondocId": "e46270e5-f129-4c10-b98f-4c20b91374fe",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "group"
@@ -4780,7 +4780,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "aaac04b8-07c6-41ca-8e2b-fed47139a08a",
+                     "jsondocId": "9b3f2065-0283-4015-8aa3-5420c21818b0",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4789,7 +4789,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "315bbb05-33a8-4e4c-82f4-cc4a144e77ce",
+                     "jsondocId": "9dddd234-7252-4b2e-9314-5b34faa59c34",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4798,7 +4798,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d24def13-0a21-4890-952d-5d4106e6c3c4",
+                     "jsondocId": "4f46fda2-dd67-4e87-996b-71194fe4a42e",
                      "name": "id",
                      "format": "",
                      "description": "Group ID to update",
@@ -4807,7 +4807,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "26433dae-cbc5-4ce6-a3f0-e5048fdfda76",
+                     "jsondocId": "9627c17b-da21-4c72-a3c3-dd015e0b7cba",
                      "name": "name",
                      "format": "",
                      "description": "Group name to change to (the only editable optoin)",
@@ -4819,9 +4819,9 @@
                "verb": "POST",
                "description": "Update group",
                "methodName": "updateGroup",
-               "jsondocId": "6b27fa9c-0c34-48d5-b0da-99a440bd2d28",
+               "jsondocId": "b81d24ef-2f24-48b5-962e-20874bed6c27",
                "bodyobject": {
-                  "jsondocId": "1b947485-1ed2-4a3f-8ef4-cfa60a1760f1",
+                  "jsondocId": "2319a6d1-b8a4-41e0-a882-dd74b9ba4ceb",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4831,7 +4831,7 @@
                "apierrors": [],
                "path": "/group/updateGroup",
                "response": {
-                  "jsondocId": "faf8e5f2-abd8-4602-9871-b8e1162fc5bf",
+                  "jsondocId": "fc870b0c-063d-4aaa-8c1a-c65b076740ff",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "group"
@@ -4844,7 +4844,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "c754e655-7e19-4a0d-82e1-bb7368e67bda",
+                     "jsondocId": "44685f94-7fde-43be-86c3-2b528b37f318",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4853,7 +4853,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a8105f24-1a86-40e5-9423-44ba8c3e32c8",
+                     "jsondocId": "c9933e8a-bc27-4a01-b8f7-6e51d8da9b44",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4862,7 +4862,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3be4180e-19cc-4a94-b205-b7070e133d91",
+                     "jsondocId": "9dd95306-4593-4c97-bcfd-73feab635af0",
                      "name": "groupId",
                      "format": "",
                      "description": "Group ID to modify permissions for (must provide this or 'name')",
@@ -4871,7 +4871,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f4d3a769-721d-482b-8391-805fda53bb6a",
+                     "jsondocId": "d3418e79-ca5a-4b73-8a91-846b393f0fc9",
                      "name": "name",
                      "format": "",
                      "description": "Group name to modify permissions for (must provide this or 'groupId')",
@@ -4880,7 +4880,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a71bd661-4d74-4fe2-bbb4-e608c1992e91",
+                     "jsondocId": "be6b3c99-a276-4cbe-94a9-c9d330ab4f15",
                      "name": "organism",
                      "format": "",
                      "description": "Organism common name",
@@ -4889,7 +4889,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "72338a27-f758-4543-a587-9732947ee4d4",
+                     "jsondocId": "fa14a05c-223a-4d6e-acb9-d6d672950be8",
                      "name": "ADMINISTRATE",
                      "format": "",
                      "description": "Indicate if user has administrative and all lesser (including user/group) privileges for the organism",
@@ -4898,7 +4898,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c930e6ef-954a-4764-8da7-c57e28467860",
+                     "jsondocId": "aeddf2cc-392e-478c-b525-bdd3480244e7",
                      "name": "WRITE",
                      "format": "",
                      "description": "Indicate if user has write and all lesser privileges for the organism",
@@ -4907,7 +4907,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "def42b65-d045-41a7-8dd4-ea264b73c85c",
+                     "jsondocId": "c3e8461a-6ae5-4fdc-80b7-124a8a2268ee",
                      "name": "EXPORT",
                      "format": "",
                      "description": "Indicate if user has export and all lesser privileges for the organism",
@@ -4916,7 +4916,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6a878d0b-88f2-4dd6-b6cd-384871bf4417",
+                     "jsondocId": "b4ccdd92-8390-4975-a8fb-01e55092d08d",
                      "name": "READ",
                      "format": "",
                      "description": "Indicate if user has read and all lesser privileges for the organism",
@@ -4928,9 +4928,9 @@
                "verb": "POST",
                "description": "Update organism permission",
                "methodName": "updateOrganismPermission",
-               "jsondocId": "a1b4dc5d-c97b-40ec-9147-f804f9911434",
+               "jsondocId": "952682c1-e6a9-465b-9b28-18c4034ae037",
                "bodyobject": {
-                  "jsondocId": "05bf3736-0916-457e-ab49-dee43e6a51fb",
+                  "jsondocId": "84e70f08-ce26-4c18-9a46-667d77449133",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -4940,7 +4940,7 @@
                "apierrors": [],
                "path": "/group/updateOrganismPermission",
                "response": {
-                  "jsondocId": "8ea63d2c-4cd5-46e8-920a-2fe383157822",
+                  "jsondocId": "d95823ef-bf99-4c98-96cc-38949e1755db",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "group"
@@ -4953,7 +4953,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "6efa1192-3b88-4666-9e7f-aae6a4e8f1de",
+                     "jsondocId": "df699b1c-bc56-4cb0-b958-0618c5708599",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -4962,7 +4962,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7146f9a4-66f0-4223-a60f-6918120691d4",
+                     "jsondocId": "a8f80a92-a24e-45f5-b98d-a6aad8020da7",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -4971,7 +4971,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1c21ff66-aba2-483f-bd7a-4a57ae3faf11",
+                     "jsondocId": "9261d089-1e74-4084-a6a1-a1a410513c22",
                      "name": "groupId",
                      "format": "",
                      "description": "Group ID to alter membership of",
@@ -4980,7 +4980,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9f9d50d0-aeaf-4c36-a00a-263ce948ed79",
+                     "jsondocId": "701d4f83-2952-40b3-8f2b-4eaae7c09046",
                      "name": "users",
                      "format": "",
                      "description": "A JSON array of strings of emails of users the now belong to the group",
@@ -4989,7 +4989,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6b687aaf-168f-482d-af7b-28c3ef85862c",
+                     "jsondocId": "a37bb110-98cd-41ba-820c-46b2eacbf1d1",
                      "name": "memberships",
                      "format": "",
                      "description": "Bulk memberships (instead of users and groupId) to update of the form: [ {groupId: <groupId>,users: [\"user1\", \"user2\", \"user3\"]}, {groupId:<another-groupId>, users: [\"user2\", \"user8\"]}]",
@@ -5001,9 +5001,9 @@
                "verb": "POST",
                "description": "Update group membership",
                "methodName": "updateMembership",
-               "jsondocId": "9b823fbc-e7e2-420b-a7d7-fa00e22dca28",
+               "jsondocId": "19cad190-4c20-4240-9fd3-6513fc72724d",
                "bodyobject": {
-                  "jsondocId": "d5168ca6-3e5c-4829-a466-022cee044ba4",
+                  "jsondocId": "5bcf1a07-a02e-4c41-b3c4-d036f295e5b0",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5013,7 +5013,7 @@
                "apierrors": [],
                "path": "/group/updateMembership",
                "response": {
-                  "jsondocId": "5fda825d-75b6-450f-851b-15ec771cc7be",
+                  "jsondocId": "984b9c29-e14d-4d50-8c64-ab87c271ca4b",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "group"
@@ -5026,7 +5026,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "239898a8-3382-44b5-854f-379baa27d1ae",
+                     "jsondocId": "ba6211ee-31e7-446b-8d1e-244e11a92cb9",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5035,7 +5035,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3525efab-e329-44eb-b78c-59112ecf387e",
+                     "jsondocId": "1815767a-4b00-4e0b-9ee6-612b2af38f4a",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5044,7 +5044,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "cae6dba4-07d0-47b1-9db8-288885f6b32a",
+                     "jsondocId": "5567d850-8c7a-4e1b-b77f-6d309b8e5f14",
                      "name": "groupId",
                      "format": "",
                      "description": "Group ID to alter membership of",
@@ -5053,7 +5053,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ca4741f9-7e89-4a0b-be4b-f5b110a38e70",
+                     "jsondocId": "9835404f-a770-4ebb-91dc-43a16418fbba",
                      "name": "users",
                      "format": "",
                      "description": "A JSON array of strings of emails of users the now belong to the group",
@@ -5065,9 +5065,9 @@
                "verb": "POST",
                "description": "Update group admin",
                "methodName": "updateGroupAdmin",
-               "jsondocId": "812a3dc0-9c5d-49ce-bcd8-d616ab8fa8c7",
+               "jsondocId": "7d263b04-3dd4-42cc-8fa1-f7c4a2fb3d5b",
                "bodyobject": {
-                  "jsondocId": "b5fdb89c-ccdf-45b2-b110-aaf7db22eca5",
+                  "jsondocId": "75c4835d-599e-431f-b3c5-eb35aa1a7250",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5077,7 +5077,7 @@
                "apierrors": [],
                "path": "/group/updateGroupAdmin",
                "response": {
-                  "jsondocId": "214500cb-120a-49f6-bf25-cd25470785a1",
+                  "jsondocId": "65255ce7-0a09-4d7b-9f6b-329c9399ac50",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "group"
@@ -5090,7 +5090,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "df69b170-b42b-4237-b9d2-5c81d0dd869a",
+                     "jsondocId": "e8c27931-6d4b-4781-a94c-efc1709a6e1c",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5099,7 +5099,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "89f26521-ecd0-4e03-bd4a-a389ed419e40",
+                     "jsondocId": "3b582203-f085-492f-b297-40dae3e25da1",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5108,7 +5108,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a049643b-6553-4393-9b77-94ed2a5475b1",
+                     "jsondocId": "28950fee-4ad0-43a4-b505-7dc644658226",
                      "name": "name",
                      "format": "",
                      "description": "Group name",
@@ -5120,9 +5120,9 @@
                "verb": "POST",
                "description": "Get group admins, returns group admins as JSONArray",
                "methodName": "getGroupAdmin",
-               "jsondocId": "bb6b6afb-e397-46b4-b594-6735215ea4eb",
+               "jsondocId": "d9489c4b-ee23-4fc6-bc73-55032d8c13b5",
                "bodyobject": {
-                  "jsondocId": "6acb36e7-f360-4c4d-a746-507796ef873c",
+                  "jsondocId": "f941f381-bc80-407c-a181-703b1f81466c",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5132,7 +5132,7 @@
                "apierrors": [],
                "path": "/group/getGroupAdmin",
                "response": {
-                  "jsondocId": "96286a2d-bca4-4917-b08a-5ad2bbbbe716",
+                  "jsondocId": "c1784bad-8642-4d02-bf91-bab2fe44439b",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "group"
@@ -5145,7 +5145,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "9f9ebf63-a9a1-4b82-8a40-1e93b98797f4",
+                     "jsondocId": "5e8471f6-42f2-4e31-8a55-11f6c6e19fec",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5154,7 +5154,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "5b8b2890-a146-4e8e-86db-4e51a93abcda",
+                     "jsondocId": "876b44c4-9ebf-4d65-b61e-47cd81f59863",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5163,7 +5163,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7bf54959-9553-4ca0-9192-d9270a2e8fb4",
+                     "jsondocId": "714e34ef-4b5e-4509-9ce8-f8e282362765",
                      "name": "name",
                      "format": "",
                      "description": "Group name",
@@ -5175,9 +5175,9 @@
                "verb": "POST",
                "description": "Get creator metadata for group, returns userId as JSONObject",
                "methodName": "getGroupCreator",
-               "jsondocId": "acc6f631-68c8-4613-bd43-68cba1902aac",
+               "jsondocId": "f3187f8a-ca24-47d8-b7d8-00197e21d7e7",
                "bodyobject": {
-                  "jsondocId": "42b8b3c3-cb80-4e1a-b0a9-1d841a9f810f",
+                  "jsondocId": "edeb82cc-f5e3-4013-8198-23def0832e66",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5187,7 +5187,7 @@
                "apierrors": [],
                "path": "/group/getGroupCreator",
                "response": {
-                  "jsondocId": "22646650-b07c-4fef-a567-abda6296fadf",
+                  "jsondocId": "9c73896a-ae86-4095-b237-8c22222c355b",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "group"
@@ -5200,13 +5200,13 @@
          "description": "Methods for managing groups"
       },
       {
-         "jsondocId": "598f8065-2c30-42e1-9925-34a78ecce9c3",
+         "jsondocId": "7c9900a0-44be-406a-bab8-3ae690551a2a",
          "methods": [{
             "headers": [],
             "pathparameters": [],
             "queryparameters": [
                {
-                  "jsondocId": "568152f8-2bf8-4aed-a821-e19848ffd580",
+                  "jsondocId": "57a41093-ac30-48dc-895d-f8d64923bec1",
                   "name": "username",
                   "format": "",
                   "description": "",
@@ -5215,7 +5215,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "6fc9d3ca-23ca-4c68-9532-e26c4755778a",
+                  "jsondocId": "c26c17c2-18e3-4b70-8d25-eef92361fa86",
                   "name": "password",
                   "format": "",
                   "description": "",
@@ -5224,7 +5224,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "a09791b9-b5f2-449f-a6ae-7b9fb1bc559c",
+                  "jsondocId": "17af59f1-1b78-4a03-b445-904d53632171",
                   "name": "date",
                   "format": "",
                   "description": "Date to query yyyy-MM-dd:HH:mm:ss or yyyy-MM-dd",
@@ -5233,7 +5233,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "ec89273e-cab6-4fae-b27a-430a23735ba9",
+                  "jsondocId": "07380718-5abe-4aaa-b407-a92f69de1ece",
                   "name": "afterDate",
                   "format": "",
                   "description": "Search after or on the given date.",
@@ -5242,7 +5242,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "c17aab30-1d4a-4645-af85-c7322df53250",
+                  "jsondocId": "84b4f44f-aeab-4d4c-abfb-04779af5422e",
                   "name": "beforeDate",
                   "format": "",
                   "description": "Search before or on the given date.",
@@ -5251,7 +5251,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "e86ac7d6-c886-4a11-bc3d-06809a850b5e",
+                  "jsondocId": "7f1a58fc-a4bb-4179-9ea0-4eb4393f6404",
                   "name": "max",
                   "format": "",
                   "description": "Max to return",
@@ -5260,7 +5260,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "005e33cc-6607-4f94-979d-3f27ede90e31",
+                  "jsondocId": "af629f8e-2e35-497e-8891-76339d013b32",
                   "name": "sort",
                   "format": "",
                   "description": "Sort parameter (lastUpdated).  See FeatureEvent object/table.",
@@ -5269,7 +5269,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "699ea680-883d-4a6b-967a-510708ed8322",
+                  "jsondocId": "fa9bea35-f36c-42ff-8a4e-3218fddf70cb",
                   "name": "order",
                   "format": "",
                   "description": "desc/asc sort order by sort param",
@@ -5281,9 +5281,9 @@
             "verb": "POST",
             "description": "Returns a JSON representation of all current Annotations before or after a given date.",
             "methodName": "findChanges",
-            "jsondocId": "ca572bcf-5602-447c-a18e-d0e769e2c905",
+            "jsondocId": "f392dde0-4cc2-4ba8-9bf7-ec1123a4433a",
             "bodyobject": {
-               "jsondocId": "a10f08b0-7674-441f-8cc8-3cd03703371b",
+               "jsondocId": "6c63d9be-9a55-42f4-a2fe-be13a33213c8",
                "mapValueObject": "",
                "mapKeyObject": "",
                "multiple": "Unknow",
@@ -5293,7 +5293,7 @@
             "apierrors": [],
             "path": "/featureEvent/findChanges",
             "response": {
-               "jsondocId": "f49e9396-425f-407a-8e46-f1777d8dbd45",
+               "jsondocId": "a32dd821-f3a1-479d-8d90-54ae213b0c84",
                "mapValueObject": "",
                "mapKeyObject": "",
                "object": "feature event"
@@ -5305,14 +5305,14 @@
          "description": "Methods for querying history"
       },
       {
-         "jsondocId": "36f76a2f-9ff3-4d15-9d2b-6fbb4b5bcc5d",
+         "jsondocId": "8172b0ae-852a-4eb1-9e33-577595fb05c4",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "e23b4efd-8c5e-4c5a-b5b3-24110d14a4c1",
+                     "jsondocId": "36dcdc34-07f0-404d-9605-7c94a6b588b4",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5321,7 +5321,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "de7e14c7-3270-4067-9b59-bc0d78d2839e",
+                     "jsondocId": "f6304f02-8c37-4106-b5b5-5c922ea67c3c",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5330,7 +5330,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "68e1d85b-2cd0-4165-a444-56ccc447abb2",
+                     "jsondocId": "9cf8292c-5f2a-43c6-9840-02dcdb08ec41",
                      "name": "type",
                      "format": "",
                      "description": "Type of annotated genomic features to export 'FASTA','GFF3','CHADO'.",
@@ -5339,7 +5339,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f59288f8-af01-4e9c-944e-4d596ad86f6f",
+                     "jsondocId": "5375ebff-2f52-4e3a-b809-d0a622a69eeb",
                      "name": "seqType",
                      "format": "",
                      "description": "Type of output sequence 'peptide','cds','cdna','genomic'.",
@@ -5348,7 +5348,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "54033251-cd5b-4344-8466-505dfaad7c1a",
+                     "jsondocId": "a0040389-6605-4547-aed0-d9d8bdc78f67",
                      "name": "format",
                      "format": "",
                      "description": "'gzip' or 'text'",
@@ -5357,7 +5357,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c6a8611c-1152-4fe2-b4f6-57177c8df9df",
+                     "jsondocId": "6d5066bd-65a2-451b-bf9d-c710d9897b69",
                      "name": "sequences",
                      "format": "",
                      "description": "Names of references sequences to add (default is all).",
@@ -5366,7 +5366,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "499720de-353d-417c-bfeb-07369aba1030",
+                     "jsondocId": "2b3e5a96-8dd1-4323-b107-b57ee05ed9f9",
                      "name": "organism",
                      "format": "",
                      "description": "Name of organism that sequences belong to (will default to last organism).",
@@ -5375,7 +5375,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "2bcabb0e-e342-43a6-abf5-19afbf3d6228",
+                     "jsondocId": "3b15ffb6-56a6-4789-8ced-7a09180b88e9",
                      "name": "output",
                      "format": "",
                      "description": "Output method 'file','text'",
@@ -5384,7 +5384,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c1646c90-f55b-44e9-89b7-8c39a550afef",
+                     "jsondocId": "345838b6-d927-4d12-9826-59e8b46cd311",
                      "name": "exportAllSequences",
                      "format": "",
                      "description": "Export all reference sequences for an organism (over-rides 'sequences')",
@@ -5393,7 +5393,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "220aa948-b048-447d-abba-542283072c2d",
+                     "jsondocId": "796d2a61-d548-4c40-9164-2f82439869ca",
                      "name": "region",
                      "format": "",
                      "description": "Highlighted genomic region to export in form sequence:min..max  e.g., chr3:1001..1034",
@@ -5405,9 +5405,9 @@
                "verb": "POST",
                "description": "Write out genomic data.  An example script is used in the https://github.com/GMOD/Apollo/blob/master/docs/web_services/examples/groovy/get_gff3.groovy",
                "methodName": "write",
-               "jsondocId": "fc11c49c-681d-486d-bda7-e21e9c55727f",
+               "jsondocId": "6ae2acdf-cda0-4383-823f-7cd919c8d188",
                "bodyobject": {
-                  "jsondocId": "669b819e-de6c-4f0a-8a6c-4255b4fa8cf6",
+                  "jsondocId": "da4b07e3-c6fa-43f5-8e1a-4eb84d585c80",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5417,7 +5417,7 @@
                "apierrors": [],
                "path": "/IOService/write",
                "response": {
-                  "jsondocId": "9b40c3c4-4a2c-4e30-9b7f-b2911aef9700",
+                  "jsondocId": "4d1b5e4d-87c5-42bd-aabf-d2a07ce67046",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "i o service"
@@ -5430,7 +5430,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "989b8cd0-a56a-49bf-b10c-d25e4eb9b1aa",
+                     "jsondocId": "89338935-cf83-4632-9695-5b375a7bb5cd",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5439,7 +5439,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "4d76694b-4226-471c-92ac-c8ebda3367e6",
+                     "jsondocId": "8d7d0d10-f69a-4ac3-b1b1-4cd2c23dd546",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5448,7 +5448,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b05fb36f-c99a-4caa-b63c-5762f747825d",
+                     "jsondocId": "3888542c-f958-441a-a869-e1afe4e54a93",
                      "name": "uuid",
                      "format": "",
                      "description": "UUID that holds the key to the stored download.",
@@ -5457,7 +5457,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "44678738-cb9a-42f0-8976-5f764d11958b",
+                     "jsondocId": "e38a9ec9-c166-43de-814f-c8b82680ae22",
                      "name": "format",
                      "format": "",
                      "description": "'gzip' or 'text'",
@@ -5469,9 +5469,9 @@
                "verb": "POST",
                "description": "This is used to retrieve the a download link once the write operation was initialized using output: file.",
                "methodName": "download",
-               "jsondocId": "a10e2c35-1f44-43c2-843d-a5cd6322c94c",
+               "jsondocId": "883e2bc0-4a85-4260-b1b6-88f956dcd39f",
                "bodyobject": {
-                  "jsondocId": "fa32bbb3-c507-4106-a5cf-5a142de4ec7c",
+                  "jsondocId": "c52b3265-e41e-43ec-95f8-8c580543dd6a",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5481,7 +5481,7 @@
                "apierrors": [],
                "path": "/IOService/download",
                "response": {
-                  "jsondocId": "28f26c54-94cf-466a-9ade-7e620f3ca570",
+                  "jsondocId": "d890522e-8083-48fe-899c-7e11e05d8ea1",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "i o service"
@@ -5494,14 +5494,14 @@
          "description": "Methods for bulk importing and exporting sequence data"
       },
       {
-         "jsondocId": "4caf697d-3d6e-49d7-90b0-8021afe442d8",
+         "jsondocId": "a8d3658c-fd7c-4ab7-afb6-eaf47900d308",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "6b917464-46ff-4ae6-be1f-524076a73525",
+                     "jsondocId": "b756559f-9ab1-4714-b69a-0fcc194f762f",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5510,7 +5510,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "863daab1-0c59-4ae7-9068-d896753748f1",
+                     "jsondocId": "10831153-6c2c-42d4-84a7-69f8110b9de1",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5519,7 +5519,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b2dc5264-d4f1-40e3-aca0-fb60d3591952",
+                     "jsondocId": "d0877a62-1344-4e57-b4cf-beee630d7b9d",
                      "name": "organism",
                      "format": "",
                      "description": "Pass an Organism JSON object with an 'id' that corresponds to the organism to be removed",
@@ -5531,9 +5531,9 @@
                "verb": "POST",
                "description": "Remove an organism",
                "methodName": "deleteOrganism",
-               "jsondocId": "1ecc84e7-ef42-4c7f-9520-3c87a1ab5a7d",
+               "jsondocId": "848d59a5-0788-4ba0-ab18-46beb15015c9",
                "bodyobject": {
-                  "jsondocId": "913867b8-7b93-4bd1-86ae-ec53dad4a9cd",
+                  "jsondocId": "473ff0f6-e5a8-479f-a902-ecc02a93c020",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5543,7 +5543,7 @@
                "apierrors": [],
                "path": "/organism/deleteOrganism",
                "response": {
-                  "jsondocId": "c7092a5f-8976-45a4-a1ce-5deccaadb02f",
+                  "jsondocId": "952b476a-b182-4252-9414-13dc722c417f",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -5556,7 +5556,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "e709887c-1358-4107-a10f-5fdccc647c5a",
+                     "jsondocId": "7e403f10-cd75-422b-87f0-a10b057eb9ef",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5565,7 +5565,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ce79ff9f-c04b-43e0-9657-b34a12d49556",
+                     "jsondocId": "5ed9c823-abbc-4594-997c-818987ff79c9",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5574,7 +5574,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7b3d5440-1ed7-48fb-8514-ad4de09f4db4",
+                     "jsondocId": "e723f4d7-9ab2-4380-8da3-a9c0c214547b",
                      "name": "organism",
                      "format": "",
                      "description": "ID or commonName that can be used to uniquely identify an organism",
@@ -5586,9 +5586,9 @@
                "verb": "POST",
                "description": "Delete an organism along with its data directory and returns a JSON object containing properties of the deleted organism",
                "methodName": "deleteOrganismWithSequence",
-               "jsondocId": "51de9882-305c-434b-a16a-87dcbe7f2a73",
+               "jsondocId": "09849686-f391-4b0e-8b1b-c6ab82b57531",
                "bodyobject": {
-                  "jsondocId": "c03b8eac-bd18-41f0-8038-9d8d370d443f",
+                  "jsondocId": "384c42d0-106d-49fd-b747-1611f5b81cc6",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5598,7 +5598,7 @@
                "apierrors": [],
                "path": "/organism/deleteOrganismWithSequence",
                "response": {
-                  "jsondocId": "a832035f-7bc5-4bd2-9617-d56542a241ab",
+                  "jsondocId": "e8ade566-b97f-4c5f-b316-b35915d241c1",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -5611,7 +5611,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "186fa123-5241-44aa-bd60-5a3a1f2d9940",
+                     "jsondocId": "92506c01-4cac-4ecc-b423-0bc721af6ad2",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5620,7 +5620,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "06a8ddca-672d-41af-aba5-1f2e8b7a3daf",
+                     "jsondocId": "0f193640-6945-4058-97e8-cb2e49af16e9",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5629,21 +5629,30 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9c0098a9-5306-465e-bc2b-c838159883b0",
+                     "jsondocId": "5dd81d76-b442-41b4-ac31-0ca185ca7d16",
                      "name": "organism",
                      "format": "",
-                     "description": "Common name or ID for the organism",
+                     "description": "ID or commonName that can be used to uniquely identify an organism.",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "3d055483-5bdb-4a21-b59d-c8852c225456",
+                     "name": "sequences",
+                     "format": "",
+                     "description": "(optional) Comma-delimited sequence names on that organism if only certain sequences should be deleted.",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Finds sequences for a given organism and returns a JSON object including the username, organism and a JSONArray of sequences",
-               "methodName": "getSequencesForOrganism",
-               "jsondocId": "f1fb0346-5880-437c-a6d0-ccbd4e2d7f40",
+               "description": "Remove features from an organism",
+               "methodName": "deleteOrganismFeatures",
+               "jsondocId": "62be7540-2a52-4de4-8b03-64be4d529263",
                "bodyobject": {
-                  "jsondocId": "46811370-00ec-4118-9b98-bcef267fc136",
+                  "jsondocId": "a14ea5e6-6b6a-4655-9947-adfd7566b8c1",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5651,9 +5660,9 @@
                   "object": "organism"
                },
                "apierrors": [],
-               "path": "/organism/getSequencesForOrganism",
+               "path": "/organism/deleteOrganismFeatures",
                "response": {
-                  "jsondocId": "f058ddb5-07b0-4f84-a7eb-f9d570770c1b",
+                  "jsondocId": "43592368-a4bf-419a-83c0-a723d0d1691f",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -5666,7 +5675,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "0bc74d44-7f0c-419a-8c8c-4f9ab1313278",
+                     "jsondocId": "38a3db30-a250-4d85-af82-57dd41bbf593",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5675,7 +5684,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3dad60c8-21d9-4e2a-9283-a09507c698c0",
+                     "jsondocId": "6e65fc2a-05e4-48d0-a35f-1c4e55416217",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5684,25 +5693,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c78d43d2-3ce9-41e9-8dbd-34ac7e44559a",
-                     "name": "id",
-                     "format": "",
-                     "description": "unique id of organism to change",
-                     "type": "long",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "79c76b2e-494d-4d36-ac1a-2767330c4751",
-                     "name": "directory",
-                     "format": "",
-                     "description": "filesystem path for the organisms data directory (required)",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "fcabfa50-b3e6-4ed2-a7b2-0c2df683b8be",
+                     "jsondocId": "d9159d3e-df29-4678-ba3a-cdf23ba01a2f",
                      "name": "species",
                      "format": "",
                      "description": "species name",
@@ -5711,7 +5702,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "5b48a125-1a88-410a-9856-d8ac337d7fd5",
+                     "jsondocId": "4d912c12-8c09-4b34-863e-fa73a6ad0761",
                      "name": "genus",
                      "format": "",
                      "description": "species genus",
@@ -5720,16 +5711,16 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b611965b-8dae-47d1-92a2-2ad8d7b04a2b",
+                     "jsondocId": "b73abf1e-bfd2-40a2-badb-bdce3e999352",
                      "name": "blatdb",
                      "format": "",
-                     "description": "filesystem path for a BLAT database (e.g. a .2bit file)",
+                     "description": "filesystem path for a BLAT database (e.g. a .2bit file) if not uploaded",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8277b007-632f-4c17-a969-98bbe3ad97e5",
+                     "jsondocId": "816dd35e-bbc2-47b8-800b-5f2835e5b976",
                      "name": "publicMode",
                      "format": "",
                      "description": "a flag for whether the organism appears as in the public genomes list",
@@ -5738,16 +5729,16 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6f14a9df-dd11-47c1-af4a-e86102155d41",
-                     "name": "name",
+                     "jsondocId": "798e2bf7-d52d-401f-b87b-7059c2b8319f",
+                     "name": "commonName",
                      "format": "",
-                     "description": "a common name used for the organism",
+                     "description": "commonName for an organism",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "046eb89a-3355-4f76-aa89-399b06945316",
+                     "jsondocId": "062147db-8cd7-45e3-b662-66a10c48fa76",
                      "name": "nonDefaultTranslationTable",
                      "format": "",
                      "description": "non-default translation table",
@@ -5756,21 +5747,48 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "aec4102e-65bf-4b59-9d51-41ea24db1c1d",
+                     "jsondocId": "2235faf6-9466-44d4-8910-2bac22b051d1",
                      "name": "metadata",
                      "format": "",
                      "description": "organism metadata",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "530f386c-86e2-4784-9a2d-374647907147",
+                     "name": "organismData",
+                     "format": "",
+                     "description": "zip or tar.gz compressed data directory (if other options not used).  Blat data should include a .2bit suffix and be in a directory 'searchDatabaseData'",
+                     "type": "file",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "39f5fdde-76cf-404f-82d1-91ca97db457b",
+                     "name": "sequenceData",
+                     "format": "",
+                     "description": "FASTA file (optionally compressed) to automatically upload with",
+                     "type": "file",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "9ccf2770-bacc-4a60-95e8-c964f20d7a0d",
+                     "name": "searchDatabaseData",
+                     "format": "",
+                     "description": "2bit file for blat search (optional)",
+                     "type": "file",
+                     "required": "true",
+                     "allowedvalues": []
                   }
                ],
                "verb": "POST",
                "description": "Adds an organism returning a JSON array of all organisms",
-               "methodName": "updateOrganismInfo",
-               "jsondocId": "3722cb1f-3fc7-4a36-aaa8-280647e0cce4",
+               "methodName": "addOrganismWithSequence",
+               "jsondocId": "587a8c74-8c83-4230-9346-4dcea76b664a",
                "bodyobject": {
-                  "jsondocId": "920ee6e7-31ff-4902-bb90-c41927868b6c",
+                  "jsondocId": "45196fe2-c1b6-4f28-ab10-f87824e4502e",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5778,9 +5796,9 @@
                   "object": "organism"
                },
                "apierrors": [],
-               "path": "/organism/updateOrganismInfo",
+               "path": "/organism/addOrganismWithSequence",
                "response": {
-                  "jsondocId": "506c5943-4a4e-4a21-aef3-abe544b08b67",
+                  "jsondocId": "fa37a07a-4fdf-49ef-9bb0-60482e68c04f",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -5793,7 +5811,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "2a157638-554d-40bf-a3b7-1650f112073d",
+                     "jsondocId": "416b0025-30fc-4bd0-9968-5ee75957d622",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5802,7 +5820,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d7c581b0-1ffe-4829-919d-e33a0faa6132",
+                     "jsondocId": "7f5a86ac-48dc-4ab8-b95e-01b1211efe13",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5811,30 +5829,30 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "596f16af-9724-4883-82ea-6ad12024416f",
-                     "name": "id",
+                     "jsondocId": "b894803e-a8a5-4a4a-9634-2e4105e64582",
+                     "name": "organism",
                      "format": "",
-                     "description": "unique id of organism to change",
-                     "type": "long",
+                     "description": "ID or commonName that can be used to uniquely identify an organism",
+                     "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "574ba3b7-1d48-4ef0-9b12-d967df7ab958",
-                     "name": "metadata",
+                     "jsondocId": "20a09580-b22a-4545-bdc3-04954e530827",
+                     "name": "trackLabel",
                      "format": "",
-                     "description": "organism metadata",
+                     "description": "Name of track",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Update organism metadata",
-               "methodName": "updateOrganismMetadata",
-               "jsondocId": "647c9771-c0a7-49ea-895b-0b3466ba8fb3",
+               "description": "Removes an added track from an existing organism returning a JSON object containing all tracks for the current organism.",
+               "methodName": "removeTrackFromOrganism",
+               "jsondocId": "48d2bc06-4509-4fc7-a544-3e7864c78d47",
                "bodyobject": {
-                  "jsondocId": "69fc7857-2c38-4bcd-9675-8865f4964f6e",
+                  "jsondocId": "d8f3e072-a56d-407c-84a9-ca01b2ab8cf6",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5842,9 +5860,9 @@
                   "object": "organism"
                },
                "apierrors": [],
-               "path": "/organism/updateOrganismMetadata",
+               "path": "/organism/removeTrackFromOrganism",
                "response": {
-                  "jsondocId": "c15c1bdd-406e-465c-8e16-d10ade7db1c3",
+                  "jsondocId": "74f42769-a51c-4c0f-a48f-04ea8fdb5749",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -5857,7 +5875,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "57af6e5d-c1b7-4025-ad05-409fda293654",
+                     "jsondocId": "78c57b9e-2773-4463-890a-67080602be81",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5866,7 +5884,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "40674c53-48d6-4e3b-b66f-54821a458eaf",
+                     "jsondocId": "dc0c1e62-c3dd-4cef-8adb-8b6aadc7d4dc",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5875,21 +5893,57 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e8e01959-feb7-4250-b198-b0565bf89e8c",
+                     "jsondocId": "74e658b0-e447-49fa-8b00-0baf8893fc4f",
                      "name": "organism",
                      "format": "",
                      "description": "ID or commonName that can be used to uniquely identify an organism",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "ec8ece29-fa88-4b5e-91ee-41f97bcfdbef",
+                     "name": "trackData",
+                     "format": "",
+                     "description": "zip or tar.gz compressed track data",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "a2c3a705-1530-4347-a16b-64e6438b5997",
+                     "name": "trackFile",
+                     "format": "",
+                     "description": "track file (*.bam, *.vcf, *.bw, *gff)",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "1dfc4d0b-9baa-40ce-9448-cf7191e8e8b1",
+                     "name": "trackFileIndex",
+                     "format": "",
+                     "description": "index (*.bai, *.tbi)",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "7dab689e-0640-44ca-98e9-1db3cf3eb49b",
+                     "name": "trackConfig",
+                     "format": "",
+                     "description": "Track configuration (JBrowse JSON)",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Get creator metadata for organism, returns userId as String",
-               "methodName": "getOrganismCreator",
-               "jsondocId": "d1d0645f-8e1d-4f8c-b293-2ca6c96c2652",
+               "description": "Adds a track to an existing organism returning a JSON object containing all tracks for the current organism.",
+               "methodName": "addTrackToOrganism",
+               "jsondocId": "9934d546-77a5-4615-83d4-85825b9009b8",
                "bodyobject": {
-                  "jsondocId": "d07a498b-677e-49dd-b4bc-f01502937142",
+                  "jsondocId": "27dce143-c7ba-494c-a464-834dd1446500",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5897,9 +5951,9 @@
                   "object": "organism"
                },
                "apierrors": [],
-               "path": "/organism/getOrganismCreator",
+               "path": "/organism/addTrackToOrganism",
                "response": {
-                  "jsondocId": "2243de65-52f7-4772-8cdc-43eae0f78be7",
+                  "jsondocId": "a58ddd4f-5a0d-47af-8b07-675b0d49bbe7",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -5912,7 +5966,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "bda15ac1-e932-40ba-86dc-1ccb93b4709e",
+                     "jsondocId": "06c7e634-f32d-41f6-81b5-ff537b6261cd",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5921,7 +5975,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "492db083-f478-4301-a560-0c5c52191e45",
+                     "jsondocId": "31f0071c-8ecc-445f-b04e-5475e4b7a08c",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5930,21 +5984,30 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6d1f39bf-7436-4087-b29e-c73ad435b1f3",
+                     "jsondocId": "76aee674-e121-4221-acfd-f60c15a393b3",
                      "name": "organism",
                      "format": "",
-                     "description": "(optional) ID or commonName that can be used to uniquely identify an organism",
+                     "description": "ID or commonName that can be used to uniquely identify an organism",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "fe0eb59a-f272-40bc-83ae-f100087bdfa7",
+                     "name": "trackLabel",
+                     "format": "",
+                     "description": "Track label corresponding to the track that is to be deleted",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Returns a JSON array of all organisms, or optionally, gets information about a specific organism",
-               "methodName": "findAllOrganisms",
-               "jsondocId": "050866bd-e3dd-417a-960e-e74db8fe7e8b",
+               "description": "Deletes a track from an existing organism and returns a JSON object of the deleted track's configuration",
+               "methodName": "deleteTrackFromOrganism",
+               "jsondocId": "3441427e-9f43-44b1-b410-fc026aac3f05",
                "bodyobject": {
-                  "jsondocId": "d962e92a-107b-4867-8305-c65cc5195a5f",
+                  "jsondocId": "a698e803-22c4-415b-b4f7-3d60544e3aec",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -5952,9 +6015,9 @@
                   "object": "organism"
                },
                "apierrors": [],
-               "path": "/organism/findAllOrganisms",
+               "path": "/organism/deleteTrackFromOrganism",
                "response": {
-                  "jsondocId": "cb18c674-db01-41e3-a733-4f847e730a20",
+                  "jsondocId": "8b5bc249-86bd-4ed2-850c-7602e94bad69",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -5967,7 +6030,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "00dc847d-9993-474b-88ba-9372fc012958",
+                     "jsondocId": "7dc2f344-0c46-446d-909d-c250d54ecc13",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -5976,7 +6039,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c35b9266-562c-4ae3-af1f-93f96ef2403e",
+                     "jsondocId": "937e6e74-9668-4ffc-9043-5adb74ff3679",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -5985,7 +6048,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "78d32c4f-24bf-405f-acf7-f6c35ef016aa",
+                     "jsondocId": "0da6e34c-c64a-4dbe-836f-c1f13ef47fc6",
                      "name": "organism",
                      "format": "",
                      "description": "ID or commonName that can be used to uniquely identify an organism",
@@ -5994,7 +6057,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1c8213b6-3d51-488a-ba4a-c4cde1611793",
+                     "jsondocId": "1889c8fe-1a70-4289-8821-bef0cd43f9c7",
                      "name": "trackConfig",
                      "format": "",
                      "description": "Track configuration (JBrowse JSON)",
@@ -6006,9 +6069,9 @@
                "verb": "POST",
                "description": "Update a track in an existing organism returning a JSON object containing old and new track configurations",
                "methodName": "updateTrackForOrganism",
-               "jsondocId": "92998a9a-0c9d-4057-b79c-133ee16c310b",
+               "jsondocId": "fbd33c09-b022-45f2-bb79-ac5b75d3f3e2",
                "bodyobject": {
-                  "jsondocId": "a2886c83-d5b0-401c-82f7-66c6bd113722",
+                  "jsondocId": "d31d080d-d019-4344-b2e4-072425e55689",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -6018,7 +6081,7 @@
                "apierrors": [],
                "path": "/organism/updateTrackForOrganism",
                "response": {
-                  "jsondocId": "9cfdddc4-01af-42d6-a0dd-d1d6e66d4e19",
+                  "jsondocId": "5b791373-745a-4237-9bbb-69afc1806a4c",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -6031,7 +6094,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "dbf64e2f-1e45-4031-9a4c-bf6b0436355d",
+                     "jsondocId": "1488748c-2cbf-4516-8b93-c4c375178c97",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -6040,7 +6103,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a502871f-c08f-4893-b32b-eaa061810d0d",
+                     "jsondocId": "01d5edb6-7f00-4fb6-95a9-4fd56a8d24c3",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -6049,7 +6112,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3b60c450-bfc2-420b-9f7c-a6f87198ed69",
+                     "jsondocId": "d283dbe3-c8eb-480b-a415-3a6922eda56a",
                      "name": "directory",
                      "format": "",
                      "description": "Filesystem path for the organisms data directory (required)",
@@ -6058,7 +6121,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "044032d5-e4b5-4239-8d5c-c62a407b1ed3",
+                     "jsondocId": "24723fd5-f89a-4398-b7a0-d4325c4b741c",
                      "name": "commonName",
                      "format": "",
                      "description": "A name used for the organism",
@@ -6067,7 +6130,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "85477e24-d0d6-4d9e-98ea-d75b12206943",
+                     "jsondocId": "1e7ccd8e-0038-40b8-b912-98ace0267a4a",
                      "name": "species",
                      "format": "",
                      "description": "(optional) Species name",
@@ -6076,7 +6139,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "89adc9df-d8be-43df-8c02-0f3aeeff21bc",
+                     "jsondocId": "0b8b3380-c2b1-4ad0-a8b6-f5bd9af3b509",
                      "name": "genus",
                      "format": "",
                      "description": "(optional) Species genus",
@@ -6085,7 +6148,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e81ea365-5c33-41d2-832e-c66e39b529a3",
+                     "jsondocId": "8d7be573-dd6e-4af3-9b8a-3cf18014891f",
                      "name": "blatdb",
                      "format": "",
                      "description": "(optional) Filesystem path for a BLAT database (e.g. a .2bit file)",
@@ -6094,7 +6157,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "bc14dc65-59ad-44a6-819b-84d1c2f15057",
+                     "jsondocId": "b45e98b5-2273-40c3-a7d2-1a761476e5d7",
                      "name": "publicMode",
                      "format": "",
                      "description": "(optional) A flag for whether the organism appears as in the public genomes list (default false)",
@@ -6103,7 +6166,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "fecdeffa-bfb4-4af9-8763-6f19cf01a91c",
+                     "jsondocId": "07c249bb-d4ce-49fb-a58b-2d108eaa6adc",
                      "name": "metadata",
                      "format": "",
                      "description": "(optional) Organism metadata",
@@ -6112,7 +6175,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3a23b708-b773-44ef-b3d6-d0dc5b4f3699",
+                     "jsondocId": "49e3f8c9-b89a-41dc-bcc2-22a3619ad364",
                      "name": "returnAllOrganisms",
                      "format": "",
                      "description": "(optional) Return all organisms (true / false) (default true)",
@@ -6124,9 +6187,9 @@
                "verb": "POST",
                "description": "Adds an organism returning a JSON array of all organisms",
                "methodName": "addOrganism",
-               "jsondocId": "f1ccee94-5732-47b5-aba6-d4f082be80af",
+               "jsondocId": "010a9f44-ea26-43b0-bc41-f8d27ac3b144",
                "bodyobject": {
-                  "jsondocId": "3458b3bc-fc8c-4f01-9f8a-d63ea9fada3c",
+                  "jsondocId": "df4fb54b-addf-4289-be5c-96822f6cfba3",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -6136,7 +6199,7 @@
                "apierrors": [],
                "path": "/organism/addOrganism",
                "response": {
-                  "jsondocId": "88e6a423-c02e-49c2-87d8-dc9ecc117c1c",
+                  "jsondocId": "c83c2988-8b07-4677-9fd5-aae1712d4c8a",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -6149,7 +6212,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "e1f602c1-93c0-482e-b301-03f97a62e924",
+                     "jsondocId": "29353b73-be57-4d14-9a26-0e81ed3ab89b",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -6158,7 +6221,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "4b27d812-03de-4423-b3ab-1dd538c98879",
+                     "jsondocId": "72228fa8-92e2-44fa-9f38-c31aad0c695b",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -6167,30 +6230,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1d4b7eb0-3bd8-4cf9-8753-8ffd98429b97",
+                     "jsondocId": "77d0ebd3-7468-46c7-a15e-a851cd1639cd",
                      "name": "organism",
                      "format": "",
-                     "description": "ID or commonName that can be used to uniquely identify an organism.",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "a267feda-5cb4-4635-8b24-3fa370af2b96",
-                     "name": "sequences",
-                     "format": "",
-                     "description": "(optional) Comma-delimited sequence names on that organism if only certain sequences should be deleted.",
+                     "description": "Common name or ID for the organism",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Remove features from an organism",
-               "methodName": "deleteOrganismFeatures",
-               "jsondocId": "36680ebe-0bd8-4d8a-afd4-6e8f68f09f1d",
+               "description": "Finds sequences for a given organism and returns a JSON object including the username, organism and a JSONArray of sequences",
+               "methodName": "getSequencesForOrganism",
+               "jsondocId": "d0e16892-27ba-44c0-9422-989fb6238ca7",
                "bodyobject": {
-                  "jsondocId": "38c0d602-c7dd-4ead-a2e5-b44c3caa2972",
+                  "jsondocId": "ab45ffdf-7c16-412e-a358-6e07076beff7",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -6198,9 +6252,9 @@
                   "object": "organism"
                },
                "apierrors": [],
-               "path": "/organism/deleteOrganismFeatures",
+               "path": "/organism/getSequencesForOrganism",
                "response": {
-                  "jsondocId": "20df324b-99bc-4848-89f9-1c0f6bf0e65b",
+                  "jsondocId": "80d830e6-faeb-441f-97b6-894f78bf282c",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -6213,7 +6267,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "fd82e074-3421-47c3-a309-4de1de5cc285",
+                     "jsondocId": "1a39bc10-6e75-41bd-a518-41c86ed113e8",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -6222,7 +6276,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8de48d51-a89d-4334-87cd-9e0f9df296b9",
+                     "jsondocId": "0f95fe0a-dba7-40fd-a709-a550d707b5b6",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -6231,7 +6285,25 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3a8b296f-cc21-4b62-9229-c0de424eba49",
+                     "jsondocId": "961f3b45-dd92-480c-b868-5b096127c2ad",
+                     "name": "id",
+                     "format": "",
+                     "description": "unique id of organism to change",
+                     "type": "long",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "474543a4-df47-405b-8d47-cc51660fc728",
+                     "name": "directory",
+                     "format": "",
+                     "description": "filesystem path for the organisms data directory (required)",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "d9a001e1-5141-434e-8465-41f7a60916f1",
                      "name": "species",
                      "format": "",
                      "description": "species name",
@@ -6240,7 +6312,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ac4b8f2f-5fbb-4ba2-b236-580107641f5a",
+                     "jsondocId": "68ff590a-b243-496a-97f1-d3e61a747a70",
                      "name": "genus",
                      "format": "",
                      "description": "species genus",
@@ -6249,16 +6321,16 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a6f7d19d-a30b-4acc-b3a9-0928c8c50a23",
+                     "jsondocId": "279a8eb2-076d-4562-8acf-54c3d7f1c3ca",
                      "name": "blatdb",
                      "format": "",
-                     "description": "filesystem path for a BLAT database (e.g. a .2bit file) if not uploaded",
+                     "description": "filesystem path for a BLAT database (e.g. a .2bit file)",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b0f6d0c0-03bf-4daa-ab49-cebf9030b633",
+                     "jsondocId": "64ad3233-b8aa-47c6-887e-f639bb2d8349",
                      "name": "publicMode",
                      "format": "",
                      "description": "a flag for whether the organism appears as in the public genomes list",
@@ -6267,16 +6339,16 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "af78580a-0067-4dc1-9a9f-4ad6b6d2c7a2",
-                     "name": "commonName",
+                     "jsondocId": "7a2f64b6-72d3-4bfd-9dcc-4b6b6b82c868",
+                     "name": "name",
                      "format": "",
-                     "description": "commonName for an organism",
+                     "description": "a common name used for the organism",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "2f157857-616f-4d3a-9eb9-caa496522882",
+                     "jsondocId": "07102272-62cb-4f65-aa9a-35f577d0d93c",
                      "name": "nonDefaultTranslationTable",
                      "format": "",
                      "description": "non-default translation table",
@@ -6285,7 +6357,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "0a9b468a-ff58-4a4a-8730-9a8e2b415392",
+                     "jsondocId": "e9c7e78a-8a19-42d0-9405-140b0c296c83",
                      "name": "metadata",
                      "format": "",
                      "description": "organism metadata",
@@ -6294,39 +6366,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "bcd44deb-fda2-47ca-b845-17485ad7cadf",
+                     "jsondocId": "941ed0b3-e923-4b0d-bf29-bcb799d0b23a",
                      "name": "organismData",
                      "format": "",
                      "description": "zip or tar.gz compressed data directory (if other options not used).  Blat data should include a .2bit suffix and be in a directory 'searchDatabaseData'",
                      "type": "file",
                      "required": "true",
                      "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "b0490b76-16ee-4b6b-a9a9-a95652916b9a",
-                     "name": "sequenceData",
-                     "format": "",
-                     "description": "FASTA file (optionally compressed) to automatically upload with",
-                     "type": "file",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "2e085f62-8174-4e4e-b22f-e86a37d68451",
-                     "name": "searchDatabaseData",
-                     "format": "",
-                     "description": "2bit file for blat search (optional)",
-                     "type": "file",
-                     "required": "true",
-                     "allowedvalues": []
                   }
                ],
                "verb": "POST",
                "description": "Adds an organism returning a JSON array of all organisms",
-               "methodName": "addOrganismWithSequence",
-               "jsondocId": "e6ffa310-0e30-4090-b5d7-9b9e52af7b0a",
+               "methodName": "updateOrganismInfo",
+               "jsondocId": "2ef223b9-a3b1-43c8-9b29-dc7fd7450b9d",
                "bodyobject": {
-                  "jsondocId": "d4f0874a-e037-4da7-a740-2d5a9bfbda8a",
+                  "jsondocId": "5ab93916-8709-4984-a63f-539e3efac321",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -6334,9 +6388,9 @@
                   "object": "organism"
                },
                "apierrors": [],
-               "path": "/organism/addOrganismWithSequence",
+               "path": "/organism/updateOrganismInfo",
                "response": {
-                  "jsondocId": "d4da8eb7-fc72-439a-a8ae-1407ca74a6e4",
+                  "jsondocId": "c7c3724e-2809-4db9-a07d-282eb3355f0e",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -6349,7 +6403,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "df6c74a9-0c43-4dce-928e-8a2867aa160e",
+                     "jsondocId": "fb75f2ae-0e0c-47a5-ad61-8cbac587dac1",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -6358,7 +6412,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8da09eb7-6dd1-49ee-afb4-51b315af0c8b",
+                     "jsondocId": "306fec08-606c-4b0d-a6a0-6fc972cb5c76",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -6367,30 +6421,30 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "93e38e71-ff8f-4250-9944-4d85dfdfd480",
-                     "name": "organism",
+                     "jsondocId": "aa8f76bd-0b9e-4db8-a0b8-4cbe1bc16550",
+                     "name": "id",
                      "format": "",
-                     "description": "ID or commonName that can be used to uniquely identify an organism",
-                     "type": "string",
+                     "description": "unique id of organism to change",
+                     "type": "long",
                      "required": "true",
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a11ec43e-942b-4976-a997-6085bcc85b2c",
-                     "name": "trackLabel",
+                     "jsondocId": "f541f8d8-f808-4c81-8807-83a360712599",
+                     "name": "metadata",
                      "format": "",
-                     "description": "Name of track",
+                     "description": "organism metadata",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Removes an added track from an existing organism returning a JSON object containing all tracks for the current organism.",
-               "methodName": "removeTrackFromOrganism",
-               "jsondocId": "1ee2ae62-1b1b-4991-9d2c-e432e463c2ef",
+               "description": "Update organism metadata",
+               "methodName": "updateOrganismMetadata",
+               "jsondocId": "4941e661-0db9-4ff6-b8b1-3c6662902ff7",
                "bodyobject": {
-                  "jsondocId": "2e858d10-2192-4fb6-932e-6096efb05a11",
+                  "jsondocId": "436e1b89-47e3-47b7-a7ec-4ca6e16b05be",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -6398,9 +6452,9 @@
                   "object": "organism"
                },
                "apierrors": [],
-               "path": "/organism/removeTrackFromOrganism",
+               "path": "/organism/updateOrganismMetadata",
                "response": {
-                  "jsondocId": "192c5cf0-c58a-4fb9-867c-01f38f126d00",
+                  "jsondocId": "e449b843-1696-4545-93fa-83618c707804",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -6413,7 +6467,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "e2f2e485-4a7a-4a32-be55-ed36cc49a899",
+                     "jsondocId": "25c6ba7e-da7f-4a7b-920a-c1a442680c1f",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -6422,7 +6476,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b31c365a-9bb7-4556-acca-d4331e3054a6",
+                     "jsondocId": "9a1b2bdd-0b0e-461e-a754-6694fcd6f00d",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -6431,57 +6485,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "23f59ef1-3974-4e7d-81e7-fb8f0789be39",
+                     "jsondocId": "861950ee-ddae-4cf4-a263-e1feaaf6e705",
                      "name": "organism",
                      "format": "",
                      "description": "ID or commonName that can be used to uniquely identify an organism",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "9f81f862-5123-4509-a324-df799ef4ad02",
-                     "name": "trackData",
-                     "format": "",
-                     "description": "zip or tar.gz compressed track data",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "fe78f85d-cc7e-4559-85bf-3ac1fb98b5a7",
-                     "name": "trackFile",
-                     "format": "",
-                     "description": "track file (*.bam, *.vcf, *.bw, *gff)",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "86eb04e0-0c3a-483b-8935-336c1b986d24",
-                     "name": "trackFileIndex",
-                     "format": "",
-                     "description": "index (*.bai, *.tbi)",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "5f7ac5fb-b701-403d-a73c-7d965c419b52",
-                     "name": "trackConfig",
-                     "format": "",
-                     "description": "Track configuration (JBrowse JSON)",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Adds a track to an existing organism returning a JSON object containing all tracks for the current organism.",
-               "methodName": "addTrackToOrganism",
-               "jsondocId": "fdbfce90-add5-4130-8a9f-9368c4fb0467",
+               "description": "Get creator metadata for organism, returns userId as String",
+               "methodName": "getOrganismCreator",
+               "jsondocId": "c1cec5a9-c097-4db4-966a-53d2ce8c1e28",
                "bodyobject": {
-                  "jsondocId": "282525dd-2154-47b9-8e9b-5d671c9db110",
+                  "jsondocId": "abc3a0fb-a743-44bd-bb51-f5654eaf02cb",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -6489,9 +6507,9 @@
                   "object": "organism"
                },
                "apierrors": [],
-               "path": "/organism/addTrackToOrganism",
+               "path": "/organism/getOrganismCreator",
                "response": {
-                  "jsondocId": "6ae4967d-8b39-4026-bd24-df23288920e1",
+                  "jsondocId": "ea26c553-96e5-4fc2-b008-0d3998118e05",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -6504,7 +6522,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "25a78256-3940-4749-bdf4-6e2a73132f66",
+                     "jsondocId": "27ba43d4-bbe0-48b5-9171-8cd17755eb3d",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -6513,7 +6531,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "94ee4b11-14fb-4219-9f75-76d2fe77cf73",
+                     "jsondocId": "4659a8fe-2243-4a68-a737-ed5aa5c94e21",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -6522,30 +6540,21 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "79163e1a-54e9-4e7a-a762-c8098116515e",
+                     "jsondocId": "c41e7d7c-6f1b-44f1-8b45-af47ddbfb769",
                      "name": "organism",
                      "format": "",
-                     "description": "ID or commonName that can be used to uniquely identify an organism",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "d7e58686-8792-4623-affe-bb45da7d52a1",
-                     "name": "trackLabel",
-                     "format": "",
-                     "description": "Track label corresponding to the track that is to be deleted",
+                     "description": "(optional) ID or commonName that can be used to uniquely identify an organism",
                      "type": "string",
                      "required": "true",
                      "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Deletes a track from an existing organism and returns a JSON object of the deleted track's configuration",
-               "methodName": "deleteTrackFromOrganism",
-               "jsondocId": "b08563c9-0938-4057-af13-59edc5c1008e",
+               "description": "Returns a JSON array of all organisms, or optionally, gets information about a specific organism",
+               "methodName": "findAllOrganisms",
+               "jsondocId": "d419dd84-6368-4683-ab20-61ad0114a2cb",
                "bodyobject": {
-                  "jsondocId": "faa502ec-2b68-4a8e-9beb-dbf646bae29d",
+                  "jsondocId": "3aee0c04-28b6-4424-9cfc-b7d5b54d41db",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -6553,9 +6562,9 @@
                   "object": "organism"
                },
                "apierrors": [],
-               "path": "/organism/deleteTrackFromOrganism",
+               "path": "/organism/findAllOrganisms",
                "response": {
-                  "jsondocId": "a39294e5-02e9-4ddc-87ee-8fa56c27f752",
+                  "jsondocId": "9fe243fe-cb1c-450f-8bb8-443d9cf91ccc",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "organism"
@@ -6568,14 +6577,14 @@
          "description": "Methods for managing organisms"
       },
       {
-         "jsondocId": "e0a3b859-76da-46ea-bf0e-2a1403da9617",
+         "jsondocId": "aa755169-d70c-4411-83cf-adbc49faadcd",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "2bc4b0b3-7813-40df-96e2-8b4592f185ad",
+                     "jsondocId": "b36fda70-af1d-4ef1-81e1-5a520c1f67ab",
                      "name": "organismString",
                      "format": "",
                      "description": "Organism common name or ID(required)",
@@ -6584,7 +6593,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1a5daf5d-a092-450d-9667-ac6848064a4c",
+                     "jsondocId": "814146ce-7c86-4452-a02f-fec14374557d",
                      "name": "sequenceName",
                      "format": "",
                      "description": "Sequence name(required)",
@@ -6593,7 +6602,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "450a0a55-87e4-452d-a859-52d72675b8c8",
+                     "jsondocId": "110de50a-25bb-4b12-9d33-9898795e1164",
                      "name": "fmin",
                      "format": "",
                      "description": "Minimum range(required)",
@@ -6602,7 +6611,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "4e9e9c43-bebc-4e2a-b6de-27f05732501a",
+                     "jsondocId": "67798139-95f3-4495-b6d8-601200831fb4",
                      "name": "fmax",
                      "format": "",
                      "description": "Maximum range (required)",
@@ -6611,7 +6620,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c9ca280f-a700-4e71-b795-3b0ef9d5114f",
+                     "jsondocId": "b220bf03-98a5-452d-94e0-8bca7992aaca",
                      "name": "ignoreCache",
                      "format": "",
                      "description": "(default false).  Use cache for request if available.",
@@ -6623,12 +6632,12 @@
                "verb": "GET",
                "description": "Get sequence data within a range",
                "methodName": "sequenceByLocation",
-               "jsondocId": "2c57b61c-b9bf-4b72-a395-9ab451fadb74",
+               "jsondocId": "770654da-26d3-4d19-989b-cd8e5713de09",
                "bodyobject": null,
                "apierrors": [],
                "path": "/sequence/<organism name>/<sequence name>:<fmin>..<fmax>?ignoreCache=<ignoreCache>",
                "response": {
-                  "jsondocId": "f0d4e320-a7c5-46bd-b2d9-3b49d7600ce5",
+                  "jsondocId": "371432b8-3a3a-4727-8e42-37cbc7a0457f",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "sequence"
@@ -6641,7 +6650,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "2ec0f481-9a9f-4d88-9702-8c5607278327",
+                     "jsondocId": "9b88ebcf-fd59-4939-9917-29119e212a49",
                      "name": "organismString",
                      "format": "",
                      "description": "Organism common name or ID (required)",
@@ -6650,7 +6659,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f3db8c25-064f-4120-be0c-bff9f7ef69eb",
+                     "jsondocId": "056805bd-556d-4ed7-b0b6-1ca051c6e8a0",
                      "name": "sequenceName",
                      "format": "",
                      "description": "Sequence name (required)",
@@ -6659,7 +6668,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1ca7b140-012d-47a9-8c1b-b182afbfe5b3",
+                     "jsondocId": "46ecab84-0a82-4e6e-ad2c-4f6bc5f71186",
                      "name": "featureName",
                      "format": "",
                      "description": "The uniqueName (UUID) or given name of the feature (typically transcript) of the element to retrieve sequence from",
@@ -6668,7 +6677,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d4d7f14f-b7ab-40e4-932a-716dea3f03c2",
+                     "jsondocId": "1d57115d-4e2e-433c-b38d-1413c78ab190",
                      "name": "type",
                      "format": "",
                      "description": "(default genomic) Return type: genomic, cds, cdna, peptide",
@@ -6677,7 +6686,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6d40b43a-f009-468e-8b3a-f70d4652d1c3",
+                     "jsondocId": "4f006703-cb53-4d57-9ad3-fb53dc6ebb6f",
                      "name": "ignoreCache",
                      "format": "",
                      "description": "(default false).  Use cache for request if available.",
@@ -6689,12 +6698,12 @@
                "verb": "GET",
                "description": "Get sequence data as for a selected name",
                "methodName": "sequenceByName",
-               "jsondocId": "0ea5f5d6-98b5-4e0e-90ca-bd80040461da",
+               "jsondocId": "762ec657-5803-4018-a1d8-06376be73492",
                "bodyobject": null,
                "apierrors": [],
                "path": "/sequence/<organism name>/<sequence name>/<feature name>.<type>?ignoreCache=<ignoreCache>",
                "response": {
-                  "jsondocId": "d6b26232-a179-401e-a491-7e19c209abc5",
+                  "jsondocId": "4b4d2499-5480-4a9a-9647-1dc1d876c2b0",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "sequence"
@@ -6707,7 +6716,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "5810c192-03cb-4380-93c0-b407d8c1be0e",
+                     "jsondocId": "67844437-7a9a-40fd-b4d2-1448041bb685",
                      "name": "organismName",
                      "format": "",
                      "description": "Organism common name (required)",
@@ -6716,7 +6725,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9919efc2-c1fc-470e-b832-2bff998b6281",
+                     "jsondocId": "22b8a916-adbc-4041-8a11-235c26a48715",
                      "name": "sequenceName",
                      "format": "",
                      "description": "Sequence name (required)",
@@ -6728,12 +6737,12 @@
                "verb": "GET",
                "description": "Remove sequence cache for an organism and sequence",
                "methodName": "clearSequenceCache",
-               "jsondocId": "216a3516-0cfc-4911-9c43-0f50fe81003d",
+               "jsondocId": "0cadd0f3-4373-4c58-80d8-a2ca2b07c9d3",
                "bodyobject": null,
                "apierrors": [],
                "path": "/sequence/cache/clear/<organism name>/<sequence name>",
                "response": {
-                  "jsondocId": "876ceb64-d375-4e9c-8b84-88344aaca5e5",
+                  "jsondocId": "e377a9d9-731f-4b18-9ae9-b68ec9c6fdd5",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "sequence"
@@ -6745,7 +6754,7 @@
                "headers": [],
                "pathparameters": [],
                "queryparameters": [{
-                  "jsondocId": "ad5bc021-6286-4a78-a894-b145b322d9ba",
+                  "jsondocId": "09c5cea5-0b31-4b60-b836-961d18bd273a",
                   "name": "organismName",
                   "format": "",
                   "description": "Organism common name (required) or 'ALL' if admin",
@@ -6756,12 +6765,12 @@
                "verb": "GET",
                "description": "Remove sequence cache for an organism",
                "methodName": "clearOrganismCache",
-               "jsondocId": "13942f26-eeeb-426e-a9d9-cbc38b69ee5b",
+               "jsondocId": "bb7f2a06-9a9b-4a93-b602-63035deaa359",
                "bodyobject": null,
                "apierrors": [],
                "path": "/sequence/cache/clear/<organism name>",
                "response": {
-                  "jsondocId": "48efac8e-8b46-4b1f-a453-8427e5f4e644",
+                  "jsondocId": "713a6526-24cd-4651-999b-d4d26f4aa38a",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "sequence"
@@ -6774,14 +6783,14 @@
          "description": "Methods for retrieving sequence data"
       },
       {
-         "jsondocId": "d0e30600-4e8a-409c-a927-8f5d07c8c743",
+         "jsondocId": "1a8eae32-fd50-498e-8355-5c49cb80fe6f",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "6c5271da-4423-404b-98f0-2d5d92859d3e",
+                     "jsondocId": "33e79243-7098-4bcb-9359-e89c47efed70",
                      "name": "featureType",
                      "format": "",
                      "description": "Feature type",
@@ -6790,7 +6799,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e67791cd-4a68-4c7a-b562-4ba609a98077",
+                     "jsondocId": "a1d7eda2-0cde-4c23-8b76-84b5365d3425",
                      "name": "organism",
                      "format": "",
                      "description": "Organism name",
@@ -6799,7 +6808,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "69a6f2a1-a458-434b-abc0-c10d5f0e19c5",
+                     "jsondocId": "2e6ee5a7-88c4-4c45-9cf6-5fd8ff0bd225",
                      "name": "query",
                      "format": "",
                      "description": "Query value",
@@ -6811,12 +6820,12 @@
                "verb": "GET",
                "description": "Returns a JSON array of all suggested names, or optionally, gets information about a specific suggested name",
                "methodName": "search",
-               "jsondocId": "4815fefa-d824-4853-9a89-4fe09ff27aef",
+               "jsondocId": "00928d72-dde6-45c9-bacc-9f805eafaf64",
                "bodyobject": null,
                "apierrors": [],
                "path": "/suggestedName/search",
                "response": {
-                  "jsondocId": "643e10ae-eb49-4485-95f5-81299b84be08",
+                  "jsondocId": "4775e56d-3b36-40c6-b0b2-017067731eee",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "suggested name"
@@ -6829,7 +6838,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "78b7f3ba-e2ae-41c3-9313-e56183400c41",
+                     "jsondocId": "6dc1cbeb-2cf8-4c26-9ad3-6c29478266d3",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -6838,7 +6847,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "536e0e34-2ff6-4857-8ecb-8bb32b6f6dea",
+                     "jsondocId": "deac451d-ff17-485d-966f-1b8a54b9a027",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -6847,7 +6856,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "7cc1774e-3956-40eb-b9e1-18df1535b2be",
+                     "jsondocId": "f65c5eb2-32c2-498e-9a9a-ea1b6a9dd2a4",
                      "name": "name",
                      "format": "",
                      "description": "Suggested name to add",
@@ -6856,7 +6865,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3e93daf0-ba4e-4a2a-9cbe-d873e18c4eb7",
+                     "jsondocId": "181c35a0-09c5-45d8-95b9-c303bc00975e",
                      "name": "metadata",
                      "format": "",
                      "description": "Optional additional information",
@@ -6868,9 +6877,9 @@
                "verb": "POST",
                "description": "Create suggested name",
                "methodName": "createName",
-               "jsondocId": "bb3d913a-1bf0-436a-b9b7-fb3eb90f90ee",
+               "jsondocId": "8e8206b8-e1c6-4c0a-89b6-8e15b2af740e",
                "bodyobject": {
-                  "jsondocId": "e4725fff-b2f1-42d5-b1da-ba1149521f41",
+                  "jsondocId": "3942c727-e23a-4185-bcab-fa0305310365",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -6880,7 +6889,7 @@
                "apierrors": [],
                "path": "/suggestedName/createName",
                "response": {
-                  "jsondocId": "5f3b07d9-e5ec-48fa-bdbd-1410ab25af00",
+                  "jsondocId": "9c85e5aa-c7f0-4174-bf81-9c45308b5860",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "suggested name"
@@ -6893,7 +6902,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "0b443306-39f9-47d7-9801-32ab745484f6",
+                     "jsondocId": "39e1a84c-4c61-4ee8-bfd2-72c5d767cd08",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -6902,7 +6911,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "133c45ac-81e9-4785-a177-92d6941e2af2",
+                     "jsondocId": "006a8e19-e543-4292-9c97-eefd3f950a5a",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -6911,7 +6920,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6ccb997a-65df-49ba-bc1b-0d0e8995fd19",
+                     "jsondocId": "026b5ce1-f6d1-49c9-8655-4b71ee333aa5",
                      "name": "id",
                      "format": "",
                      "description": "Suggested name ID to update (or specify the old_name)",
@@ -6920,7 +6929,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "73857169-01d7-4296-9b26-70903b3c4df2",
+                     "jsondocId": "eefcc340-a903-42ae-b17e-a59175663803",
                      "name": "old_name",
                      "format": "",
                      "description": "Suggested name to update",
@@ -6929,7 +6938,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c7f530ee-4e04-4b42-b734-5e88463a47c2",
+                     "jsondocId": "ef616233-55a1-4bd7-98d5-395e0a1ed5d2",
                      "name": "new_name",
                      "format": "",
                      "description": "Suggested name to change to (the only editable option)",
@@ -6938,7 +6947,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ab7e75c7-cefe-441b-a188-0da911bab14c",
+                     "jsondocId": "431368a9-ce28-4cef-8a38-001950245eb2",
                      "name": "metadata",
                      "format": "",
                      "description": "Optional additional information",
@@ -6950,9 +6959,9 @@
                "verb": "POST",
                "description": "Update suggested name",
                "methodName": "updateName",
-               "jsondocId": "2af5b79d-f907-4193-80f9-a581a8f3e560",
+               "jsondocId": "f42974ca-50c1-4e96-bd70-9b885edb87a5",
                "bodyobject": {
-                  "jsondocId": "ff53706b-233f-4ec1-8e59-5bab3812a4cb",
+                  "jsondocId": "4de21840-8d34-492e-b3e9-9247d443ff3e",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -6962,7 +6971,7 @@
                "apierrors": [],
                "path": "/suggestedName/updateName",
                "response": {
-                  "jsondocId": "2b7154e1-56b6-41a2-99a7-6825356679fa",
+                  "jsondocId": "6624c084-4963-49e6-8312-eb79bb8cfb20",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "suggested name"
@@ -6975,7 +6984,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "540eab30-14e7-4836-8a62-6a60ba883be8",
+                     "jsondocId": "9cd7c76b-d84e-477d-ad9f-efeb0a59df64",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -6984,7 +6993,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "8c5d35df-4f72-496e-aac9-780bd1e16a02",
+                     "jsondocId": "1fca3668-8647-4b2f-865f-a67f76ff8bc9",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -6993,7 +7002,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d10b5925-d3bf-4b1d-8727-72731887bc09",
+                     "jsondocId": "cecac64e-7744-40f9-8abe-fef2ee956411",
                      "name": "id",
                      "format": "",
                      "description": "Suggested name ID to remove (or specify the name)",
@@ -7002,7 +7011,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ae25830c-beb7-4d2d-9cd6-df0969f58c98",
+                     "jsondocId": "3760eeac-134f-4223-893d-29f8b3a9a6e7",
                      "name": "name",
                      "format": "",
                      "description": "Suggested name to delete",
@@ -7014,9 +7023,9 @@
                "verb": "POST",
                "description": "Remove a suggested name",
                "methodName": "deleteName",
-               "jsondocId": "2f7243c5-6b44-4c48-81d7-134ab34fe88d",
+               "jsondocId": "9eb2f113-9541-4b83-bf57-fe6ba0bf323a",
                "bodyobject": {
-                  "jsondocId": "049ddc62-6dc2-4376-b264-ec5c3e65c4e1",
+                  "jsondocId": "bd5259de-5bcf-46b0-9b22-c41e2514fa84",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -7026,7 +7035,7 @@
                "apierrors": [],
                "path": "/suggestedName/deleteName",
                "response": {
-                  "jsondocId": "1d31a2c2-e411-4660-a969-f253e67a6955",
+                  "jsondocId": "f93a6f1f-5d03-428a-84b2-c6dc20a1e7f3",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "suggested name"
@@ -7039,7 +7048,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "af7bdf7f-8f8d-4b9b-80c6-79d8a6677730",
+                     "jsondocId": "c1a70ca5-8978-450a-8a4d-665ea8ae29c9",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -7048,7 +7057,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "62cef5cc-aacf-49a0-896d-cd79e3d40c50",
+                     "jsondocId": "d61cd14d-7cce-4cb3-9cc7-2d90c295026c",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -7057,7 +7066,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "50e3e672-9f2f-41c0-9b50-4e2162c4bdf5",
+                     "jsondocId": "677d7cae-b977-4072-919f-1eb8ff55fce4",
                      "name": "id",
                      "format": "",
                      "description": "Name ID to show (or specify a name)",
@@ -7066,7 +7075,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "5671233e-3339-42d7-b436-a8b86910c78c",
+                     "jsondocId": "fbdc0da3-ed06-46f2-bad6-3fd0478fe1bf",
                      "name": "name",
                      "format": "",
                      "description": "Name to show",
@@ -7078,9 +7087,9 @@
                "verb": "POST",
                "description": "Returns a JSON array of all suggested names, or optionally, gets information about a specific suggested name",
                "methodName": "showName",
-               "jsondocId": "289de6c5-d583-436e-9fbe-64b4e40615c7",
+               "jsondocId": "fb70df46-e0a0-4191-9c63-d55c627e4daf",
                "bodyobject": {
-                  "jsondocId": "8c2207f3-9543-4f50-ab57-67ba5ba90269",
+                  "jsondocId": "d7bc499d-addd-47ae-ae34-2bef2588776e",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -7090,7 +7099,7 @@
                "apierrors": [],
                "path": "/suggestedName/showName",
                "response": {
-                  "jsondocId": "b9298302-8e9c-465f-b353-43bf54c70569",
+                  "jsondocId": "f63006e8-bf55-4e84-941c-c804c194008b",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "suggested name"
@@ -7103,7 +7112,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "be0a8a45-76f6-49f8-82eb-d765f38f5d09",
+                     "jsondocId": "70ec0d77-2797-40ff-910b-1f426d396c9f",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -7112,7 +7121,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1330acca-4c03-4dd4-bada-79568d2b017f",
+                     "jsondocId": "418b5d88-7c12-4642-b74d-2f9da2964683",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -7121,7 +7130,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "20d76b4a-2ef1-40ce-9066-33788e94c230",
+                     "jsondocId": "b5953097-3a3a-477a-a69f-2ae4fda2ccb1",
                      "name": "names",
                      "format": "",
                      "description": "A comma-delimited list of names to add",
@@ -7133,9 +7142,9 @@
                "verb": "POST",
                "description": "A comma-delimited list of names",
                "methodName": "addNames",
-               "jsondocId": "480daf02-8bc8-4754-b5ea-d6ee3daf0344",
+               "jsondocId": "5d8d5436-cbed-44eb-926d-a5e787f0efe7",
                "bodyobject": {
-                  "jsondocId": "0b2bac30-8eb4-406e-95f5-fb85a2c4a0e7",
+                  "jsondocId": "cd7e93a1-79eb-4188-9df4-30fce2526cc3",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -7145,7 +7154,7 @@
                "apierrors": [],
                "path": "/suggestedName/addNames",
                "response": {
-                  "jsondocId": "8f55e250-5a98-4d65-847b-bf598d47ba4d",
+                  "jsondocId": "bd49526e-a97a-41f3-afa6-18da289e5173",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "suggested name"
@@ -7158,42 +7167,14 @@
          "description": "Methods for managing suggested names"
       },
       {
-         "jsondocId": "49d19433-f490-47de-a017-334713180876",
+         "jsondocId": "ece2c6e0-b790-481b-adec-7b20e2b78b89",
          "methods": [
-            {
-               "headers": [],
-               "pathparameters": [],
-               "queryparameters": [{
-                  "jsondocId": "2c9e80c8-e27a-4bec-9aa4-da4f9f651c73",
-                  "name": "organismName",
-                  "format": "",
-                  "description": "Organism common name (required) or 'ALL' if admin",
-                  "type": "string",
-                  "required": "true",
-                  "allowedvalues": []
-               }],
-               "verb": "GET",
-               "description": "Remove track cache for an organism",
-               "methodName": "clearOrganismCache",
-               "jsondocId": "aee4190a-718c-4550-86d6-8ded431cb0e2",
-               "bodyobject": null,
-               "apierrors": [],
-               "path": "/track/cache/clear/<organism name>",
-               "response": {
-                  "jsondocId": "df134313-75d7-43ed-bd16-4482cf9214f7",
-                  "mapValueObject": "",
-                  "mapKeyObject": "",
-                  "object": "track"
-               },
-               "produces": ["application/json"],
-               "consumes": []
-            },
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "ce13743c-6f4e-4a6c-8189-08d2c2422ff5",
+                     "jsondocId": "443b6968-6b5f-4020-8f11-e398f69be006",
                      "name": "organismName",
                      "format": "",
                      "description": "Organism common name (required)",
@@ -7202,7 +7183,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "5d591253-8485-4a23-855e-ab8f13a4825b",
+                     "jsondocId": "e2303448-d246-4318-a06f-db54876ace0c",
                      "name": "trackName",
                      "format": "",
                      "description": "Track name (required)",
@@ -7214,12 +7195,12 @@
                "verb": "GET",
                "description": "Remove track cache for an organism and track",
                "methodName": "clearTrackCache",
-               "jsondocId": "fffde92d-06dc-452c-a234-156249346c85",
+               "jsondocId": "38c1c6a1-c42e-4532-a1fc-0707e82ebe85",
                "bodyobject": null,
                "apierrors": [],
                "path": "/track/cache/clear/<organism name>/<track name>",
                "response": {
-                  "jsondocId": "733530bf-616b-4efa-a1ce-7b5e45d8f7bb",
+                  "jsondocId": "cd31e10c-cf2b-4c0a-aa01-35b3ed5273df",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "track"
@@ -7231,7 +7212,7 @@
                "headers": [],
                "pathparameters": [],
                "queryparameters": [{
-                  "jsondocId": "ec792a89-fae9-4e72-8a75-c8caed2f1012",
+                  "jsondocId": "626eb9e1-bcb6-4935-9222-610c8ddc504c",
                   "name": "organismName",
                   "format": "",
                   "description": "Organism common name (required)",
@@ -7242,12 +7223,12 @@
                "verb": "GET",
                "description": "List all tracks for an organism",
                "methodName": "getTracks",
-               "jsondocId": "90c33b50-9bb6-41ad-99b1-921e6cae3a29",
+               "jsondocId": "769cfebd-7e8d-4fcd-9dce-1c294be514a0",
                "bodyobject": null,
                "apierrors": [],
                "path": "/track/list/<organism name>",
                "response": {
-                  "jsondocId": "dbf6d25a-4a77-4996-8865-cb0f656fdc64",
+                  "jsondocId": "f0f25501-334d-4207-bd74-47f21c42b4bd",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "track"
@@ -7260,7 +7241,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "1e49840b-a0af-4b1c-bd5d-3de87a7126a6",
+                     "jsondocId": "51318f2d-1dc1-4fa1-8494-6c2182660a0f",
                      "name": "organismString",
                      "format": "",
                      "description": "Organism common name or ID(required)",
@@ -7269,7 +7250,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "4d969279-5d8f-4be3-9c74-4f3f54ca5c7d",
+                     "jsondocId": "605fed55-84d1-49ba-9202-400a154a4c8e",
                      "name": "trackName",
                      "format": "",
                      "description": "Track name(required)",
@@ -7278,7 +7259,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3ef01b2c-90a2-4832-8d99-6f77269badbc",
+                     "jsondocId": "ca4afa7e-403d-4e35-9c00-c71533879f5b",
                      "name": "sequence",
                      "format": "",
                      "description": "Sequence name(required)",
@@ -7287,7 +7268,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "cec1db33-6124-4edd-8325-169716c2eaff",
+                     "jsondocId": "1591bf4e-55cf-4ba1-87ad-9b373a849bc0",
                      "name": "featureName",
                      "format": "",
                      "description": "If top-level feature 'id' matches, then annotate with 'selected'=1",
@@ -7296,7 +7277,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "d398f220-a52b-4237-a1cf-5e843461c6db",
+                     "jsondocId": "11c9e702-2194-4a1c-b454-1a7553a18b08",
                      "name": "ignoreCache",
                      "format": "",
                      "description": "(default false).  Use cache for request if available.",
@@ -7305,7 +7286,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "69431f00-ed7a-4962-8809-09f8ebcd742e",
+                     "jsondocId": "aeaee2c8-377a-4756-a6a7-982178357e94",
                      "name": "flatten",
                      "format": "",
                      "description": "Brings nested top-level components to the root level.  If not provided or 'false' it will not flatten.  Default is 'gene'.",
@@ -7314,7 +7295,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "948f99c3-ad93-4225-91f8-e6cd7d5399e4",
+                     "jsondocId": "74ee2742-cace-4d0e-9281-6db745be84ef",
                      "name": "type",
                      "format": "",
                      "description": ".json or .svg",
@@ -7326,12 +7307,12 @@
                "verb": "GET",
                "description": "Get track data as an JSON within but only for the selected name",
                "methodName": "featuresByName",
-               "jsondocId": "592b9122-d89e-4cf1-8c41-8439b263b322",
+               "jsondocId": "5cd295f1-16f2-4040-84f6-d99053976875",
                "bodyobject": null,
                "apierrors": [],
                "path": "/track/<organism name>/<track name>/<sequence name>/<feature name>.<type>?ignoreCache=<ignoreCache>",
                "response": {
-                  "jsondocId": "2815ef0b-0c85-45e6-b474-9597e394e6a4",
+                  "jsondocId": "e95e2412-8838-4765-9623-a7c8a6c4cdbe",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "track"
@@ -7344,7 +7325,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "53ae217d-a69f-41a3-a769-9c08f105f6ba",
+                     "jsondocId": "3fb2d7ed-4fef-4adb-b48d-b85fa13a55ac",
                      "name": "organismString",
                      "format": "",
                      "description": "Organism common name or ID(required)",
@@ -7353,7 +7334,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b167f4a8-2353-4c13-b26b-313392bcc4da",
+                     "jsondocId": "cede9282-574e-432c-96ab-787c7b736683",
                      "name": "trackName",
                      "format": "",
                      "description": "Track name(required)",
@@ -7362,7 +7343,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "6c328f59-5ab2-4b92-a893-6026469cb2b6",
+                     "jsondocId": "dd8afb7e-1b62-49b7-9e5f-517a2794ece7",
                      "name": "sequence",
                      "format": "",
                      "description": "Sequence name(required)",
@@ -7371,7 +7352,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "112fa271-67f9-4871-9b76-f1c536a0b02f",
+                     "jsondocId": "e3ef3676-f57a-40c4-aeb5-99c27431ff74",
                      "name": "fmin",
                      "format": "",
                      "description": "Minimum range(required)",
@@ -7380,7 +7361,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "2b34f64b-dec4-49f4-b570-da90b50028c2",
+                     "jsondocId": "33b7dadd-d144-4f1b-abb3-862f34a51b71",
                      "name": "fmax",
                      "format": "",
                      "description": "Maximum range (required)",
@@ -7389,7 +7370,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "dbb7f758-82d2-40c3-aa7a-f71ebdd59acb",
+                     "jsondocId": "cb36afde-ba88-4fae-b95e-1bee9e8b26c9",
                      "name": "name",
                      "format": "",
                      "description": "If top-level feature 'name' matches, then annotate with 'selected'=true.  Multiple names can be passed in.",
@@ -7398,7 +7379,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "563942ba-b850-4b10-96aa-610730025890",
+                     "jsondocId": "f67fa6e9-24c7-4ccb-8738-71a91178d44a",
                      "name": "onlySelected",
                      "format": "",
                      "description": "(default false).  If 'selected'!=1 one, then exclude.",
@@ -7407,7 +7388,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "33ff98c6-9b2e-4907-a2d0-eaee7cdb449a",
+                     "jsondocId": "76e801c0-4baa-45e5-bf98-6d6edeee31ff",
                      "name": "ignoreCache",
                      "format": "",
                      "description": "(default false).  Use cache for request if available.",
@@ -7416,7 +7397,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "fd658044-fdb7-40e1-b457-39b7252fe226",
+                     "jsondocId": "649a1ff7-2357-4acd-88fd-9f4407d43618",
                      "name": "flatten",
                      "format": "",
                      "description": "Brings nested top-level components to the root level.  If not provided or 'false' it will not flatten.  Default is 'gene'.",
@@ -7425,7 +7406,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "12d9874e-2aef-413a-8273-b4739fee3b5b",
+                     "jsondocId": "9ab9034e-fbf8-4f9c-b913-d048f051f624",
                      "name": "type",
                      "format": "",
                      "description": ".json or .svg",
@@ -7437,12 +7418,40 @@
                "verb": "GET",
                "description": "Get track data as an JSON within an range",
                "methodName": "featuresByLocation",
-               "jsondocId": "8f7ceeff-06a3-47cd-852d-81fcdf929d38",
+               "jsondocId": "098763de-3a3d-4358-895d-8eafa345c3ca",
                "bodyobject": null,
                "apierrors": [],
                "path": "/track/<organism name>/<track name>/<sequence name>:<fmin>..<fmax>.<type>?name=<name>&onlySelected=<onlySelected>&ignoreCache=<ignoreCache>",
                "response": {
-                  "jsondocId": "ec926dff-bdfe-44f4-b01d-7225ba5915d9",
+                  "jsondocId": "ab982d4e-1a6d-48f9-8f9f-f18b42e9b1ce",
+                  "mapValueObject": "",
+                  "mapKeyObject": "",
+                  "object": "track"
+               },
+               "produces": ["application/json"],
+               "consumes": []
+            },
+            {
+               "headers": [],
+               "pathparameters": [],
+               "queryparameters": [{
+                  "jsondocId": "600e6e52-7b20-482b-b871-8371b832059e",
+                  "name": "organismName",
+                  "format": "",
+                  "description": "Organism common name (required) or 'ALL' if admin",
+                  "type": "string",
+                  "required": "true",
+                  "allowedvalues": []
+               }],
+               "verb": "GET",
+               "description": "Remove track cache for an organism",
+               "methodName": "clearOrganismCache",
+               "jsondocId": "36ab66a9-8359-4789-b1c8-6146bb8be877",
+               "bodyobject": null,
+               "apierrors": [],
+               "path": "/track/cache/clear/<organism name>",
+               "response": {
+                  "jsondocId": "8f56e096-ccce-434d-b6ed-021558f05d0d",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "track"
@@ -7455,14 +7464,14 @@
          "description": "Methods for retrieving track data"
       },
       {
-         "jsondocId": "dd366310-b3cd-4472-8a02-2681fc9b779d",
+         "jsondocId": "e6c1adb6-72c7-4763-96f0-6124c1001167",
          "methods": [
             {
                "headers": [],
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "29581468-6f49-4145-93dc-9c309dc482ba",
+                     "jsondocId": "faf46f7c-7097-40fd-9024-d335499e1c8b",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -7471,7 +7480,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "f675ba8d-7407-4996-85c4-1fc02068370d",
+                     "jsondocId": "02112019-62c2-4496-a020-5e0fffcd9abe",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -7480,21 +7489,39 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "b518cc86-96be-4990-9c3b-5376eddcabfe",
+                     "jsondocId": "ac32d202-db91-4494-8fa7-7efd9fc28b14",
+                     "name": "group",
+                     "format": "",
+                     "description": "Group name",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "4b6e139b-e16b-40e0-a749-ce6de3d4a0cb",
                      "name": "userId",
                      "format": "",
-                     "description": "User ID to fetch",
+                     "description": "User id",
                      "type": "long",
                      "required": "true",
                      "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "561f1343-1a2f-4051-9181-7c59f352cefa",
+                     "name": "user",
+                     "format": "",
+                     "description": "User email/username (supplied if user id unknown)",
+                     "type": "email",
+                     "required": "true",
+                     "allowedvalues": []
                   }
                ],
                "verb": "POST",
-               "description": "Get organism permissions for user, returns an array of permission objects",
-               "methodName": "getOrganismPermissionsForUser",
-               "jsondocId": "da0773b8-339e-4623-9b52-7460cabdd29b",
+               "description": "Add user to group",
+               "methodName": "addUserToGroup",
+               "jsondocId": "f0f077e2-1f27-4242-bcb7-4e4e37c4340e",
                "bodyobject": {
-                  "jsondocId": "2b21998d-2185-4c1b-960d-80257df12fde",
+                  "jsondocId": "1bc51576-ce85-43f1-beef-9b5f6d7f43be",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -7502,9 +7529,9 @@
                   "object": "user"
                },
                "apierrors": [],
-               "path": "/user/getOrganismPermissionsForUser",
+               "path": "/user/addUserToGroup",
                "response": {
-                  "jsondocId": "ff73ae7b-3b96-4da3-9edb-c9d9206e5704",
+                  "jsondocId": "6bf498d9-5e83-4f27-83e8-af320d31c01a",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "user"
@@ -7517,7 +7544,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "74cef1ad-1403-4988-bafd-b35d807e8112",
+                     "jsondocId": "c814cdaa-c0c0-4142-be25-cb353fac19b8",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -7526,7 +7553,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "bdccb126-0146-462a-b086-a558d2416a97",
+                     "jsondocId": "928e564d-37b2-4c03-9946-468197c00809",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -7535,198 +7562,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ca1f1dcf-9c74-4042-bb5c-d27792c285ab",
-                     "name": "userId",
-                     "format": "",
-                     "description": "Optionally only user a specific userId as an integer database id or a username string",
-                     "type": "long / string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "abad232a-6605-459a-9a66-d6177a47383a",
-                     "name": "start",
-                     "format": "",
-                     "description": "(optional) Result start / offset",
-                     "type": "long / string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "06459035-aa76-4e26-8544-36d5b4e5616d",
-                     "name": "length",
-                     "format": "",
-                     "description": "(optional) Result length",
-                     "type": "long / string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "3eef63ed-50b3-4b91-beba-9c91b2b8533d",
-                     "name": "name",
-                     "format": "",
-                     "description": "(optional) Search name",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "e47855d7-9895-4989-8d02-43468adc0106",
-                     "name": "sortColumn",
-                     "format": "",
-                     "description": "(optional) Sort column, default 'name'",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "90358ed8-ef09-43aa-b2be-842834abb552",
-                     "name": "sortAscending",
-                     "format": "",
-                     "description": "(optional) Sort column is ascending if true (default false)",
-                     "type": "boolean",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "670b72a5-9173-406e-970b-1229e4f62b15",
-                     "name": "omitEmptyOrganisms",
-                     "format": "",
-                     "description": "(optional) Omits empty organism permissions from return (default false)",
-                     "type": "boolean",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "e2e21c4f-eb45-4968-87ec-ab0b4e5a35c1",
-                     "name": "showInactiveUsers",
-                     "format": "",
-                     "description": "(optional) Shows inactive users without permissions (default false)",
-                     "type": "boolean",
-                     "required": "true",
-                     "allowedvalues": []
-                  }
-               ],
-               "verb": "POST",
-               "description": "Load all users and their permissions",
-               "methodName": "loadUsers",
-               "jsondocId": "667e3900-1f97-4e3c-baa3-db68aef6574c",
-               "bodyobject": {
-                  "jsondocId": "5c5c22a5-c1cf-4251-b812-73109eaf75af",
-                  "mapValueObject": "",
-                  "mapKeyObject": "",
-                  "multiple": "Unknow",
-                  "map": "",
-                  "object": "user"
-               },
-               "apierrors": [],
-               "path": "/user/loadUsers",
-               "response": {
-                  "jsondocId": "8932fd5c-042e-41d1-aafb-249a188d134b",
-                  "mapValueObject": "",
-                  "mapKeyObject": "",
-                  "object": "user"
-               },
-               "produces": ["application/json"],
-               "consumes": ["application/json"]
-            },
-            {
-               "headers": [],
-               "pathparameters": [],
-               "queryparameters": [
-                  {
-                     "jsondocId": "4c822a5b-dff1-4d3c-854b-7ac1121aa0d5",
-                     "name": "username",
-                     "format": "",
-                     "description": "",
-                     "type": "email",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "1cf5f2b2-d0bd-4fb0-a84b-216e47bc0310",
-                     "name": "password",
-                     "format": "",
-                     "description": "",
-                     "type": "password",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "899c808b-f45e-438a-b872-e0fb147eb969",
-                     "name": "group",
-                     "format": "",
-                     "description": "Group name",
-                     "type": "string",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "ce800603-8fb8-4f39-95ff-28d7f53abaa4",
-                     "name": "userId",
-                     "format": "",
-                     "description": "User id",
-                     "type": "long",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "2ee5a726-4094-408a-9366-09d83f0abe3b",
-                     "name": "user",
-                     "format": "",
-                     "description": "User email/username (supplied if user id unknown)",
-                     "type": "email",
-                     "required": "true",
-                     "allowedvalues": []
-                  }
-               ],
-               "verb": "POST",
-               "description": "Add user to group",
-               "methodName": "addUserToGroup",
-               "jsondocId": "d89928cd-3018-4c39-8f07-8cace180dfef",
-               "bodyobject": {
-                  "jsondocId": "3d750fd5-4d24-4108-af5f-5a86aacd9671",
-                  "mapValueObject": "",
-                  "mapKeyObject": "",
-                  "multiple": "Unknow",
-                  "map": "",
-                  "object": "user"
-               },
-               "apierrors": [],
-               "path": "/user/addUserToGroup",
-               "response": {
-                  "jsondocId": "173a12f3-ebeb-4167-91df-2246817a5b21",
-                  "mapValueObject": "",
-                  "mapKeyObject": "",
-                  "object": "user"
-               },
-               "produces": ["application/json"],
-               "consumes": ["application/json"]
-            },
-            {
-               "headers": [],
-               "pathparameters": [],
-               "queryparameters": [
-                  {
-                     "jsondocId": "0db97dc3-8e43-4280-b429-b2ffbdbb2924",
-                     "name": "username",
-                     "format": "",
-                     "description": "",
-                     "type": "email",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "a1370bd9-559b-481c-9f70-5fa16619b1b7",
-                     "name": "password",
-                     "format": "",
-                     "description": "",
-                     "type": "password",
-                     "required": "true",
-                     "allowedvalues": []
-                  },
-                  {
-                     "jsondocId": "0176fc75-18c1-43ed-84c2-c5754202b816",
+                     "jsondocId": "4ab703d7-b1ee-426a-93d7-06737cbfb2b5",
                      "name": "group",
                      "format": "",
                      "description": "Group name",
@@ -7735,7 +7571,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "823c362d-82b1-437a-8705-2f10d2a2d266",
+                     "jsondocId": "c32a5849-2711-43f0-b9b6-a59e648dfce7",
                      "name": "userId",
                      "format": "",
                      "description": "User id",
@@ -7744,7 +7580,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3fa0da61-ec1e-4de5-bd3b-b40cd4b5206e",
+                     "jsondocId": "42cc3500-358b-451d-8c8a-25a2d3c74321",
                      "name": "user",
                      "format": "",
                      "description": "User email/username (supplied if user id unknown)",
@@ -7756,9 +7592,9 @@
                "verb": "POST",
                "description": "Remove user from group",
                "methodName": "removeUserFromGroup",
-               "jsondocId": "4d3ce667-e9f9-4226-9523-9b8af305233f",
+               "jsondocId": "994b2c4d-350d-41ed-8578-c7f8373125a9",
                "bodyobject": {
-                  "jsondocId": "04735058-aed1-40c9-9d5d-adcd87c267b7",
+                  "jsondocId": "f988c2d4-ec14-4e3f-be0d-03514d0a597b",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -7768,7 +7604,7 @@
                "apierrors": [],
                "path": "/user/removeUserFromGroup",
                "response": {
-                  "jsondocId": "dd023177-e889-4685-991c-15589cca2fb0",
+                  "jsondocId": "64bf68eb-d295-44d5-a527-a8ead69b97b1",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "user"
@@ -7781,7 +7617,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "de9974b0-0de9-415a-8d43-3afd89454045",
+                     "jsondocId": "5829894c-1b1b-4428-890c-dbb21f5cc490",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -7790,7 +7626,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "50a46394-6cab-47fd-afa8-137a962821bb",
+                     "jsondocId": "b029eaab-52a9-4746-a73a-604ae2cb9fe3",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -7799,7 +7635,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "a4499c30-6bb8-460c-9db0-56009a093ef2",
+                     "jsondocId": "adc5bdf1-9b7f-43f7-9cf5-8e8237d220a9",
                      "name": "email",
                      "format": "",
                      "description": "Email of the user to add",
@@ -7808,7 +7644,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ce87afcf-6f85-48a3-ab88-18da50e08a4b",
+                     "jsondocId": "64615f64-a662-4296-9725-e97cbabbbd19",
                      "name": "firstName",
                      "format": "",
                      "description": "First name of user to add",
@@ -7817,7 +7653,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1dfb346e-77d6-4039-916b-9dd219105149",
+                     "jsondocId": "c5dc0376-7a2b-4e05-b75a-7e3d86a99bc4",
                      "name": "lastName",
                      "format": "",
                      "description": "Last name of user to add",
@@ -7826,7 +7662,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "93f065bb-db85-4508-8b90-dc1632ba591d",
+                     "jsondocId": "4bb1c6dc-d454-44ec-a4ab-7cc4e7d39b7d",
                      "name": "metadata",
                      "format": "",
                      "description": "User metadata (optional)",
@@ -7835,7 +7671,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "dd1525b0-3cc5-4786-baf0-f00a409c4410",
+                     "jsondocId": "0a34090d-002b-413d-8249-4d2b71db72f5",
                      "name": "role",
                      "format": "",
                      "description": "User role USER / ADMIN (optional: default USER) ",
@@ -7844,7 +7680,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "37ead5c6-059a-4a25-b140-78c4cd4cb23b",
+                     "jsondocId": "1897769d-b600-452b-8cc1-1f44b26c4623",
                      "name": "newPassword",
                      "format": "",
                      "description": "Password of user to add",
@@ -7856,9 +7692,9 @@
                "verb": "POST",
                "description": "Create user",
                "methodName": "createUser",
-               "jsondocId": "25c542cf-bf64-476b-bed8-5cb0f8977988",
+               "jsondocId": "6bc60aa0-6c29-4942-9d80-71e993d9f220",
                "bodyobject": {
-                  "jsondocId": "f54c9718-03b6-4cef-b7f9-cbc762b92b3f",
+                  "jsondocId": "f6e45af9-531f-4685-a7ff-63db611bcb89",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -7868,7 +7704,7 @@
                "apierrors": [],
                "path": "/user/createUser",
                "response": {
-                  "jsondocId": "8e63abc0-0327-441a-a4c6-a881df1a8fda",
+                  "jsondocId": "91f73626-a647-477f-8bcd-6cdfc240dc96",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "user"
@@ -7881,7 +7717,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "ed69c279-728d-45d9-b7af-78f66d4df34f",
+                     "jsondocId": "8c5f6208-d143-41c7-af6a-0866dc982dc5",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -7890,7 +7726,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "be8f5fe0-f6fc-479a-b457-f4d38076dc99",
+                     "jsondocId": "1d7d2745-4021-48f3-963f-b32a52acde45",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -7899,7 +7735,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "dd14b036-c311-4f5e-b82f-da3f6d39b8f3",
+                     "jsondocId": "256f63ac-7410-4e45-8e44-68e658c2837a",
                      "name": "userId",
                      "format": "",
                      "description": "User ID to delete",
@@ -7908,7 +7744,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "bf0f0629-0530-484d-ac97-af5823db29bc",
+                     "jsondocId": "b731cf81-3c8b-4297-a548-dd94b83eaebf",
                      "name": "userToDelete",
                      "format": "",
                      "description": "Username (email) to inactivate",
@@ -7920,9 +7756,9 @@
                "verb": "POST",
                "description": "Inactivate user, removing all permsissions and setting flag",
                "methodName": "inactivateUser",
-               "jsondocId": "bff10aa2-a969-4dd3-95fd-f2cdb02f0514",
+               "jsondocId": "dcf69966-06be-4aa5-92ac-25386e622f23",
                "bodyobject": {
-                  "jsondocId": "3f23aa92-9159-4966-a403-2b30b5b86abf",
+                  "jsondocId": "af398c7c-bd94-4748-b458-8aa217b20432",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -7932,7 +7768,7 @@
                "apierrors": [],
                "path": "/user/inactivateUser",
                "response": {
-                  "jsondocId": "c0a6b463-0adb-406d-8b17-809b32992718",
+                  "jsondocId": "9e71b5ce-da25-4572-84a2-71d1de71c65f",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "user"
@@ -7945,7 +7781,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "56cce27e-6417-4fe5-97d5-1aba58f34ee5",
+                     "jsondocId": "67ed4aaa-1208-4ed6-b8aa-5948b9e7ea76",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -7954,7 +7790,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "5ccad7d9-e614-4786-b4bc-5ebe509c2961",
+                     "jsondocId": "1f8948bf-a967-402c-bb4b-977e26785459",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -7963,7 +7799,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e1a3232e-4e9f-41e1-b9e7-65f3b956a114",
+                     "jsondocId": "2e7545fb-ce54-4d92-9cb2-9ca49ef8cfe0",
                      "name": "userId",
                      "format": "",
                      "description": "User ID to delete",
@@ -7972,7 +7808,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "019b94de-aafe-4ef3-947d-6b81b1979dd9",
+                     "jsondocId": "c0fc78e2-29e4-42f3-91cd-a96306ffd9e1",
                      "name": "userToActivate",
                      "format": "",
                      "description": "Username (email) to inactivate",
@@ -7984,9 +7820,9 @@
                "verb": "POST",
                "description": "Activate user",
                "methodName": "activateUser",
-               "jsondocId": "27bc44d9-3bea-4d75-b21d-c2d70c56aab9",
+               "jsondocId": "fa441007-c23a-401b-83ff-140d88e85732",
                "bodyobject": {
-                  "jsondocId": "5524c5aa-8d0c-40df-969a-8ffba70f7be7",
+                  "jsondocId": "b19e4d5e-3ce8-4326-86c1-d6c2e89860f9",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -7996,7 +7832,7 @@
                "apierrors": [],
                "path": "/user/activateUser",
                "response": {
-                  "jsondocId": "f514eebe-7bfe-40b5-8eba-bedeeb2bb71f",
+                  "jsondocId": "1534508a-7caf-4fa9-a332-1f64da0b6024",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "user"
@@ -8009,7 +7845,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "2913f8d4-95cf-40aa-9a73-6878a1e58e66",
+                     "jsondocId": "4390fbed-068b-4164-ab67-19c0d7d45c5d",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -8018,7 +7854,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "60ae2f4d-5c0b-4531-bbf9-4ca3f224ed1d",
+                     "jsondocId": "809a22b9-b184-47c3-aa97-378baae9719c",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -8027,7 +7863,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "91e5d592-0a3b-41a7-8753-b21d5e89f792",
+                     "jsondocId": "9ae94cfb-9b26-41bc-9a7e-6d5834a62f21",
                      "name": "userId",
                      "format": "",
                      "description": "User ID to delete",
@@ -8036,7 +7872,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "e22bc346-3be4-46d5-ab76-42a967af57b0",
+                     "jsondocId": "13fede1b-94d4-46ed-a98f-e0fa30fe3301",
                      "name": "userToDelete",
                      "format": "",
                      "description": "Username (email) to delete",
@@ -8048,9 +7884,9 @@
                "verb": "POST",
                "description": "Delete user",
                "methodName": "deleteUser",
-               "jsondocId": "6bac3015-8981-480d-b15d-0435df124d7c",
+               "jsondocId": "fdb0c1b0-be38-4231-85b9-7a0530051557",
                "bodyobject": {
-                  "jsondocId": "23cc7ada-dea0-4506-8f81-bbd12ac422e4",
+                  "jsondocId": "39cc7f0b-9e0b-4f54-9724-e8ec5d5bc247",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -8060,7 +7896,7 @@
                "apierrors": [],
                "path": "/user/deleteUser",
                "response": {
-                  "jsondocId": "c24a9d4d-8ac7-4b5c-872a-439508c0d5ca",
+                  "jsondocId": "70a37eee-69f8-4bd0-aadb-162f68458702",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "user"
@@ -8073,7 +7909,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "69912f6d-418a-4e34-8801-a0a55d186cc5",
+                     "jsondocId": "a989c944-b2c5-4449-b29f-cd065a3d3975",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -8082,7 +7918,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "37d3d2c9-0e09-4004-8008-d26899cf53ef",
+                     "jsondocId": "45cdf024-889a-4678-acb0-36aac2070381",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -8091,7 +7927,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "59b8eef4-df52-4f3e-bf31-79491d82eb87",
+                     "jsondocId": "4cf5aecf-4885-4749-9651-981f4c3e8f04",
                      "name": "userId",
                      "format": "",
                      "description": "User ID to update",
@@ -8100,7 +7936,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "729bec70-a37b-438d-95c0-b3164a91071d",
+                     "jsondocId": "f6f0bf4e-3487-4153-81cf-d6081d3209d0",
                      "name": "email",
                      "format": "",
                      "description": "Email of the user to update",
@@ -8109,7 +7945,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "790e87c7-43dd-4a8c-ab30-6013ab2160e1",
+                     "jsondocId": "92b6c8a7-9f4a-43ec-a2fb-b4ca78da4e16",
                      "name": "firstName",
                      "format": "",
                      "description": "First name of user to update",
@@ -8118,7 +7954,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "4fac37ba-01bf-4e18-93f4-73a2312a182b",
+                     "jsondocId": "cbf10c54-70b7-4886-a39c-979213589518",
                      "name": "lastName",
                      "format": "",
                      "description": "Last name of user to update",
@@ -8127,7 +7963,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "c619f903-f3c7-461b-a040-bbe596f9f10f",
+                     "jsondocId": "26368cda-51d7-4749-bdca-c13988ce901e",
                      "name": "metadata",
                      "format": "",
                      "description": "User metadata (optional)",
@@ -8136,7 +7972,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1f7bd038-5041-4ac3-b564-2379f41bd2d4",
+                     "jsondocId": "078e67e0-60cc-4378-94a0-f09c4c636b6b",
                      "name": "newPassword",
                      "format": "",
                      "description": "Password of user to update",
@@ -8148,9 +7984,9 @@
                "verb": "POST",
                "description": "Update user",
                "methodName": "updateUser",
-               "jsondocId": "b0476d0f-fbf8-4fbe-8e6a-d791dff5e5aa",
+               "jsondocId": "bc3609ea-d372-4b8b-8c8e-045735f7fd4c",
                "bodyobject": {
-                  "jsondocId": "b95c2441-6842-4bfd-ace2-d6d22fe6465f",
+                  "jsondocId": "9773001e-d56f-493e-9dac-cbf0bb3eccf0",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -8160,7 +7996,7 @@
                "apierrors": [],
                "path": "/user/updateUser",
                "response": {
-                  "jsondocId": "f4afe682-30fb-48d9-8531-7d450d2fb0e5",
+                  "jsondocId": "94177589-c022-41fa-9bfd-459b7ca9f665",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "user"
@@ -8173,7 +8009,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "938b4ae9-4e31-4858-9bd3-061b1fe775d2",
+                     "jsondocId": "85d5cbf0-eb63-4e77-bcdb-e706ee6055e3",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -8182,7 +8018,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "61c842db-6356-432d-be2f-963a26de2c42",
+                     "jsondocId": "3bccf163-fad9-4cb1-9543-a9bd2456a458",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -8191,7 +8027,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "9f0ddd21-3cda-4bfd-b271-5e091e4bd979",
+                     "jsondocId": "259a3bfd-1250-4669-8008-6539bee5c9ef",
                      "name": "email",
                      "format": "",
                      "description": "Email of the user",
@@ -8203,9 +8039,9 @@
                "verb": "POST",
                "description": "Get creator metadata for user, returns creator userId as JSONObject",
                "methodName": "getUserCreator",
-               "jsondocId": "54a78f23-4560-4d7a-8ffe-66a2ca87eade",
+               "jsondocId": "4380b73c-95aa-49f2-9fb3-017ac46b5177",
                "bodyobject": {
-                  "jsondocId": "e243c497-8c12-4d81-8e8d-ccdbb1154cbb",
+                  "jsondocId": "ea0a3ca9-0c98-44c2-a657-a5c15206d25f",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -8215,7 +8051,125 @@
                "apierrors": [],
                "path": "/user/getUserCreator",
                "response": {
-                  "jsondocId": "30bc8709-d45d-42ee-8483-a3f4c0724874",
+                  "jsondocId": "c7208065-a4ab-4021-90a3-c35462111d4a",
+                  "mapValueObject": "",
+                  "mapKeyObject": "",
+                  "object": "user"
+               },
+               "produces": ["application/json"],
+               "consumes": ["application/json"]
+            },
+            {
+               "headers": [],
+               "pathparameters": [],
+               "queryparameters": [
+                  {
+                     "jsondocId": "29d901b9-646f-4264-b710-5243647d2879",
+                     "name": "username",
+                     "format": "",
+                     "description": "",
+                     "type": "email",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "f8862fd2-b825-45d2-92c3-c0775b63b3f5",
+                     "name": "password",
+                     "format": "",
+                     "description": "",
+                     "type": "password",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "fd413604-6a26-4b2f-8858-05d89f96b4f0",
+                     "name": "userId",
+                     "format": "",
+                     "description": "Optionally only user a specific userId as an integer database id or a username string",
+                     "type": "long / string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "387ca210-f291-4457-b2ac-fbebb95d3179",
+                     "name": "start",
+                     "format": "",
+                     "description": "(optional) Result start / offset",
+                     "type": "long / string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "e4124bb6-cd2e-4b52-b41f-47ac3aa4420e",
+                     "name": "length",
+                     "format": "",
+                     "description": "(optional) Result length",
+                     "type": "long / string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "eb1a240b-6c6f-4060-9976-9c821adc17d3",
+                     "name": "name",
+                     "format": "",
+                     "description": "(optional) Search name",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "9635ad22-9dc9-4671-97e6-7dbe1dc33de9",
+                     "name": "sortColumn",
+                     "format": "",
+                     "description": "(optional) Sort column, default 'name'",
+                     "type": "string",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "e000ed86-fd80-4042-8fcc-88dd8062b220",
+                     "name": "sortAscending",
+                     "format": "",
+                     "description": "(optional) Sort column is ascending if true (default false)",
+                     "type": "boolean",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "6b08cfc2-3aed-43b9-86d1-70ee4f4b9a96",
+                     "name": "omitEmptyOrganisms",
+                     "format": "",
+                     "description": "(optional) Omits empty organism permissions from return (default false)",
+                     "type": "boolean",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "6a57a0a6-95d2-4c44-a220-ddc821091d8b",
+                     "name": "showInactiveUsers",
+                     "format": "",
+                     "description": "(optional) Shows inactive users without permissions (default false)",
+                     "type": "boolean",
+                     "required": "true",
+                     "allowedvalues": []
+                  }
+               ],
+               "verb": "POST",
+               "description": "Load all users and their permissions",
+               "methodName": "loadUsers",
+               "jsondocId": "fc7021f0-2421-4897-806e-09e7b595e65f",
+               "bodyobject": {
+                  "jsondocId": "fd2b9a53-bbff-4abf-8bb8-5bb41231bd82",
+                  "mapValueObject": "",
+                  "mapKeyObject": "",
+                  "multiple": "Unknow",
+                  "map": "",
+                  "object": "user"
+               },
+               "apierrors": [],
+               "path": "/user/loadUsers",
+               "response": {
+                  "jsondocId": "6deb5149-0fd8-4f92-9f65-0d2ac380175f",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "user"
@@ -8228,7 +8182,7 @@
                "pathparameters": [],
                "queryparameters": [
                   {
-                     "jsondocId": "559bcf26-6035-4cd2-9438-f5e4bce15d12",
+                     "jsondocId": "e16c1d04-c4ce-4908-97ee-10c3c88047f9",
                      "name": "username",
                      "format": "",
                      "description": "",
@@ -8237,7 +8191,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "fc79c757-e6d0-48bb-918c-a87b13dad48a",
+                     "jsondocId": "ac4a2693-9c32-4a52-a592-44107850f587",
                      "name": "password",
                      "format": "",
                      "description": "",
@@ -8246,7 +8200,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "53469921-5b27-4e2e-9fa2-f2001daa72e6",
+                     "jsondocId": "9450c6a5-ac4c-4b1a-9c2f-8838fd24b65f",
                      "name": "userId",
                      "format": "",
                      "description": "User ID to modify permissions for",
@@ -8255,7 +8209,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "548fb98e-c226-4b50-b900-70b6c2cbd96a",
+                     "jsondocId": "23b0d387-d8bb-408e-8969-eea9ff815379",
                      "name": "user",
                      "format": "",
                      "description": "(Optional) user email of the user to modify permissions for if User ID is not provided",
@@ -8264,7 +8218,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "01616dbf-aba2-49e4-8dd0-749a9ebd2715",
+                     "jsondocId": "505b4042-570e-484c-813c-ecf0671deee1",
                      "name": "organism",
                      "format": "",
                      "description": "Name of organism to update",
@@ -8273,7 +8227,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "3ee6c4be-8310-422f-80dd-2d9a17302640",
+                     "jsondocId": "e3539d38-6884-483d-89e3-c38bb22568d6",
                      "name": "id",
                      "format": "",
                      "description": "Permission ID to update (can get from userId/organism instead)",
@@ -8282,7 +8236,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "1afc3f5b-731b-4f61-8fca-b5f7c5e71be9",
+                     "jsondocId": "4d792303-9186-4848-93f6-b5eac56853f0",
                      "name": "ADMINISTRATE",
                      "format": "",
                      "description": "Indicate if user has administrative and all lesser (including user/group) privileges for the organism",
@@ -8291,7 +8245,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "ea1558d4-be80-4372-ac4c-5653076e5ab4",
+                     "jsondocId": "146d7b58-3843-46bc-923c-e7f12ab8440a",
                      "name": "WRITE",
                      "format": "",
                      "description": "Indicate if user has write and all lesser privileges for the organism",
@@ -8300,7 +8254,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "2cb59f96-87ef-4f6a-a9c3-e2ad6fc9af69",
+                     "jsondocId": "1d20c27c-454e-449a-b32d-0ce60c7b17fe",
                      "name": "EXPORT",
                      "format": "",
                      "description": "Indicate if user has export and all lesser privileges for the organism",
@@ -8309,7 +8263,7 @@
                      "allowedvalues": []
                   },
                   {
-                     "jsondocId": "444e9197-83a1-4d93-b084-9f3873610d8a",
+                     "jsondocId": "0519c94c-e6b9-4500-8635-cea2c965ab1e",
                      "name": "READ",
                      "format": "",
                      "description": "Indicate if user has read and all lesser privileges for the organism",
@@ -8321,9 +8275,9 @@
                "verb": "POST",
                "description": "Update organism permissions",
                "methodName": "updateOrganismPermission",
-               "jsondocId": "d26b2893-0b88-40f7-a754-a4d944d78387",
+               "jsondocId": "82672e65-5cf4-4541-aac2-52bc657b5815",
                "bodyobject": {
-                  "jsondocId": "716017ee-ddce-47a5-bf62-64afbcb378fc",
+                  "jsondocId": "3382329d-65f0-48a9-abff-542a6a54b190",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "multiple": "Unknow",
@@ -8333,7 +8287,62 @@
                "apierrors": [],
                "path": "/user/updateOrganismPermission",
                "response": {
-                  "jsondocId": "2a883599-855d-41ad-8574-19b644d2c8f9",
+                  "jsondocId": "80ae4138-1753-4ea6-bbc2-a76e7c17b4e4",
+                  "mapValueObject": "",
+                  "mapKeyObject": "",
+                  "object": "user"
+               },
+               "produces": ["application/json"],
+               "consumes": ["application/json"]
+            },
+            {
+               "headers": [],
+               "pathparameters": [],
+               "queryparameters": [
+                  {
+                     "jsondocId": "129a124f-a876-4ed0-bf51-d0fa00f96506",
+                     "name": "username",
+                     "format": "",
+                     "description": "",
+                     "type": "email",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "0338e987-877d-4a68-9b38-8fc8dd8a9cb9",
+                     "name": "password",
+                     "format": "",
+                     "description": "",
+                     "type": "password",
+                     "required": "true",
+                     "allowedvalues": []
+                  },
+                  {
+                     "jsondocId": "14f81000-04a7-45fd-a31c-a9e49b7b0b79",
+                     "name": "userId",
+                     "format": "",
+                     "description": "User ID to fetch",
+                     "type": "long",
+                     "required": "true",
+                     "allowedvalues": []
+                  }
+               ],
+               "verb": "POST",
+               "description": "Get organism permissions for user, returns an array of permission objects",
+               "methodName": "getOrganismPermissionsForUser",
+               "jsondocId": "03d62ff8-2244-419d-a04d-d1fd0db4f604",
+               "bodyobject": {
+                  "jsondocId": "4cb3a2a9-8abc-4ea0-82d0-9de008638299",
+                  "mapValueObject": "",
+                  "mapKeyObject": "",
+                  "multiple": "Unknow",
+                  "map": "",
+                  "object": "user"
+               },
+               "apierrors": [],
+               "path": "/user/getOrganismPermissionsForUser",
+               "response": {
+                  "jsondocId": "7c85d85d-1b49-4236-b635-d751a2e91030",
                   "mapValueObject": "",
                   "mapKeyObject": "",
                   "object": "user"
@@ -8346,13 +8355,13 @@
          "description": "Methods for managing users"
       },
       {
-         "jsondocId": "41ab2b8d-df25-402b-82d0-ddd76628124e",
+         "jsondocId": "77246bb5-4b21-445b-876b-71bf3dd258df",
          "methods": [{
             "headers": [],
             "pathparameters": [],
             "queryparameters": [
                {
-                  "jsondocId": "0bf97b88-c554-428b-bf8d-82c8f006dc81",
+                  "jsondocId": "afc8dc4e-b35b-40a3-8923-8a7064823b4c",
                   "name": "organismString",
                   "format": "",
                   "description": "Organism common name or ID (required)",
@@ -8361,7 +8370,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "8037d12e-a389-4d17-86f0-02c96f44706b",
+                  "jsondocId": "537829b2-8aa0-4162-8fe0-114a02d166bd",
                   "name": "trackName",
                   "format": "",
                   "description": "Track name by label in trackList.json (required)",
@@ -8370,7 +8379,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "bcc78568-39e6-4f46-93c6-faf7a1a37a2f",
+                  "jsondocId": "313bfc4f-e37a-48be-b8be-97e35442faf7",
                   "name": "sequence",
                   "format": "",
                   "description": "Sequence name (required)",
@@ -8379,7 +8388,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "4d6523c7-0725-4adc-8432-8c5363171f29",
+                  "jsondocId": "830771b7-3146-47f2-929c-0db0cf380559",
                   "name": "fmin",
                   "format": "",
                   "description": "Minimum range (required)",
@@ -8388,7 +8397,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "6cde4788-a11d-4671-8c96-dbb53eaf8473",
+                  "jsondocId": "035ff9a1-dcba-42c2-816e-b432f075f37f",
                   "name": "fmax",
                   "format": "",
                   "description": "Maximum range (required)",
@@ -8397,7 +8406,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "2d12c823-acfd-45bc-8c1b-6e3473b4e7f5",
+                  "jsondocId": "7b1594d3-f23a-4017-a0b0-89c5fe4b415b",
                   "name": "type",
                   "format": "",
                   "description": ".json (required)",
@@ -8406,7 +8415,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "298b9757-330b-4109-8bec-6f8dbd272d54",
+                  "jsondocId": "fd87b1ec-de6a-4f68-ad36-874c05f39747",
                   "name": "includeGenotypes",
                   "format": "",
                   "description": "(default: false).  If true, will include genotypes associated with variants from VCF.",
@@ -8415,7 +8424,7 @@
                   "allowedvalues": []
                },
                {
-                  "jsondocId": "1e39b471-c57f-4b40-9ee4-ffaf34c0f59a",
+                  "jsondocId": "6809ef18-d379-49cf-8dba-2f2bd0145ce4",
                   "name": "ignoreCache",
                   "format": "",
                   "description": "(default: false).  Use cache for request, if available.",
@@ -8427,12 +8436,12 @@
             "verb": "GET",
             "description": "Get VCF track data for a given range as JSON",
             "methodName": "featuresByLocation",
-            "jsondocId": "0ea70e6a-810d-4797-9da8-12066a3e29bd",
+            "jsondocId": "d82410b5-f7c9-412a-a569-ad9bf65ecfcf",
             "bodyobject": null,
             "apierrors": [],
             "path": "/vcf/<organism_name>/<track_name>/<sequence_name>:<fmin>..<fmax>.<type>?includeGenotypes=<includeGenotypes>&ignoreCache=<ignoreCache>",
             "response": {
-               "jsondocId": "58d3a462-fb23-4d8c-9b05-ca03f7529ed9",
+               "jsondocId": "83cb5d20-c801-4e24-9ef5-7c9fcf2f5d9b",
                "mapValueObject": "",
                "mapKeyObject": "",
                "object": "vcf"
