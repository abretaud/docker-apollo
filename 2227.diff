--- a/grails-app/controllers/org/bbop/apollo/OrganismController.groovy	2019-10-02 10:38:25.013704565 +0200
+++ b/grails-app/controllers/org/bbop/apollo/OrganismController.groovy	2019-10-02 11:01:25.250756293 +0200
@@ -3,9 +3,7 @@
 import grails.converters.JSON
 import grails.transaction.NotTransactional
 import grails.transaction.Transactional
-import groovy.io.FileType
 import htsjdk.samtools.reference.FastaSequenceIndexCreator
-import org.apache.commons.io.FileUtils
 import org.bbop.apollo.gwt.shared.FeatureStringEnum
 import org.bbop.apollo.gwt.shared.GlobalPermissionEnum
 import org.bbop.apollo.gwt.shared.PermissionEnum
@@ -27,7 +25,6 @@
 import javax.servlet.http.HttpServletResponse
 import java.nio.file.FileSystems
 import java.nio.file.Path
-import java.util.zip.GZIPOutputStream

 import static org.springframework.http.HttpStatus.NOT_FOUND

@@ -1220,6 +1217,7 @@
             , @RestApiParam(name = "name", type = "string", paramType = RestApiParamType.QUERY, description = "a common name used for the organism")
             , @RestApiParam(name = "nonDefaultTranslationTable", type = "string", paramType = RestApiParamType.QUERY, description = "non-default translation table")
             , @RestApiParam(name = "metadata", type = "string", paramType = RestApiParamType.QUERY, description = "organism metadata")
+            , @RestApiParam(name = "organismData", type = "file", paramType = RestApiParamType.QUERY, description = "zip or tar.gz compressed data directory (if other options not used).  Blat data should include a .2bit suffix and be in a directory 'searchDatabaseData'")
     ])
     @Transactional
     def updateOrganismInfo() {
@@ -1230,32 +1228,45 @@
             Boolean madeObsolete
             if (organism) {
                 log.debug "Updating organism info ${organismJson as JSON}"
-                organism.commonName = organismJson.name
-                organism.blatdb = organismJson.blatdb ?: null
-                organism.species = organismJson.species ?: null
-                organism.genus = organismJson.genus ?: null
+                organism.commonName = organismJson.name ?: organism.commonName
+                organism.blatdb = organismJson.blatdb ?: organism.blatdb
+                organism.species = organismJson.species ?: organism.species
+                organism.genus = organismJson.genus ?: organism.genus
                 //if the organismJson.metadata is null, remain the old metadata
                 organism.metadata = organismJson.metadata ? organismJson.metadata.toString() : organism.metadata
-                organism.directory = organismJson.directory
+                organism.directory = organismJson.directory ?: organism.directory
                 organism.publicMode = organismJson.publicMode ?: false
                 madeObsolete = !organism.obsolete && organismJson.obsolete
                 organism.obsolete = organismJson.obsolete ?: false
-                organism.nonDefaultTranslationTable = organismJson.nonDefaultTranslationTable ?: null
-                if (checkOrganism(organism)) {
-                    if (madeObsolete) {
-                        // TODO: remove all organism permissions
-                        permissionService.removeAllPermissions(organism)
-                    }
-                    organism.save(flush: true, insert: false, failOnError: true)
-                } else {
-                    throw new Exception("Bad organism directory: " + organism.directory)
-                }
-
+                organism.nonDefaultTranslationTable = organismJson.nonDefaultTranslationTable ?: organism.nonDefaultTranslationTable
                 if (organism.genomeFasta) {
                     // update location of genome fasta
                     sequenceService.updateGenomeFasta(organism)
                 }

+        CommonsMultipartFile organismDataFile = request.getFile(FeatureStringEnum.ORGANISM_DATA.value)
+//        CommonsMultipartFile searchDatabaseDataFile = request.getFile(FeatureStringEnum.SEARCH_DATABASE_DATA.value)
+        if (organismDataFile ) {
+          File archiveFile = new File(organismDataFile.getOriginalFilename())
+          File organismDirectory = new File(organism.directory)
+          assert  organismDirectory.deleteDir()
+          assert organismDirectory.mkdir()
+          assert organismDirectory.setWritable(true)
+          fileService.decompress(archiveFile, organism.directory , null, false)
+        }
+        if (checkOrganism(organism)) {
+          if (madeObsolete) {
+            // TODO: remove all organism permissions
+            permissionService.removeAllPermissions(organism)
+          }
+          organism.save(flush: true, insert: false, failOnError: true)
+          sequenceService.loadRefSeqs(organism)
+//          preferenceService.setCurrentOrganism(permissionService.getCurrentUser(requestObject), organism, clientToken)
+        } else {
+          throw new Exception("Bad organism directory: " + organism.directory)
+        }
+
+
             } else {
                 throw new Exception('organism not found')
             }
