diff --git a/docs/web_services/examples/groovy/add_group.groovy b/docs/web_services/examples/groovy/add_group.groovy
new file mode 100755
index 000000000..32c4f98a7
--- /dev/null
+++ b/docs/web_services/examples/groovy/add_group.groovy
@@ -0,0 +1,83 @@
+#!/usr/bin/env groovy
+
+import groovyx.net.http.RESTClient
+import net.sf.json.JSONObject
+
+@Grab(group = 'org.json', module = 'json', version = '20140107')
+@Grab(group = 'org.codehaus.groovy.modules.http-builder', module = 'http-builder', version = '0.7.2')
+@Grab(group = 'org.apache.commons', module = 'commons-lang3', version = '3.0')
+
+String usageString = "\nUSAGE: add_group.groovy <options>\n" +
+        "Example:\n" +
+        "./add_group.groovy -name group1 -url http://localhost:8080/Apollo\n" +
+        "./add_group.groovy -name group1,group2,group3 -url http://localhost:8080/Apollo\n"
+
+def cli = new CliBuilder(usage: usageString)
+cli.setStopAtNonOption(true)
+cli.name('group name that may be a comma separated list', required: true, args: 1)
+cli.url('Apollo URL', required: true, args: 1)
+cli.adminusername('Admin username', required: false, args: 1)
+cli.adminpassword('Admin password', required: false, args: 1)
+cli.ignoressl('Use this flag to ignore SSL issues', required: false)
+OptionAccessor options
+
+
+def admin_username
+def admin_password
+
+try {
+    options = cli.parse(args)
+    if (options.url == null) {
+        println "NOTE: Requires URL\n" + usageString
+        return
+    }
+    if (options.name == null) {
+        println "NOTE: Requires a group name, organism and permissions as arguments\n" + usageString
+        return
+    }
+
+    def sysConsole = System.console()
+    if (!(admin_username = options?.adminusername)) {
+        admin_username = new String(sysConsole.readLine('Enter admin username: '))
+    }
+    if (!(admin_password = options?.adminpassword)) {
+        admin_password = new String(sysConsole.readPassword('Enter admin password: '))
+    }
+} catch (e) {
+    println(e)
+    return
+}
+
+JSONObject groupObject = new JSONObject()
+groupObject.name = options.name
+
+def s = options.url
+if (s.endsWith("/")) {
+    s = s.substring(0, s.length() - 1)
+}
+
+URL url = new URL(s)
+def client = new RESTClient(options.url)
+if (options.ignoressl) {
+    client.ignoreSSLIssues()
+}
+String path = "${url.path}/group/createGroup"
+
+println "Processing group: ${groupObject.name}"
+def userArgument = [
+        name    : groupObject.name,
+        username: admin_username,
+        password: admin_password
+]
+def response = client.post(
+        contentType: 'text/javascript',
+        path: path,
+        body: userArgument
+)
+if (response.status != 200) {
+    if (response.data.error != null) {
+        println "Error while ading group: ${userArgument.name}\n${response.data.error}"
+    }
+}
+println "added ${groupObject.name}"
+
diff --git a/docs/web_services/examples/groovy/delete_group.groovy b/docs/web_services/examples/groovy/delete_group.groovy
new file mode 100755
index 000000000..1a5355b97
--- /dev/null
+++ b/docs/web_services/examples/groovy/delete_group.groovy
@@ -0,0 +1,85 @@
+#!/usr/bin/env groovy
+
+import groovyx.net.http.RESTClient
+import net.sf.json.JSONObject
+
+@Grab(group = 'org.json', module = 'json', version = '20140107')
+@Grab(group = 'org.codehaus.groovy.modules.http-builder', module = 'http-builder', version = '0.7.2')
+@Grab(group = 'org.apache.commons', module = 'commons-lang3', version = '3.0')
+
+String usageString = "\nUSAGE: delete_group.groovy <options>\n" +
+        "Example:\n" +
+        "./delete_group.groovy -name group1 -url http://localhost:8080/Apollo\n" +
+        "./delete_group.groovy -name group1,group2,group3 -url http://localhost:8080/Apollo\n"
+
+def cli = new CliBuilder(usage: usageString)
+cli.setStopAtNonOption(true)
+cli.name('group name that may be a comma separated list', required: true , args: 1)
+cli.url('Apollo URL', required: true, args: 1)
+cli.adminusername('Admin username', required: false, args: 1)
+cli.adminpassword('Admin password', required: false, args: 1)
+cli.ignoressl('Use this flag to ignore SSL issues', required: false)
+OptionAccessor options
+
+
+def admin_username
+def admin_password
+
+try {
+    options = cli.parse(args)
+    if (options.url==null) {
+        println "NOTE: Requires URL\n" + usageString
+        return
+    }
+    if (options.name==null) {
+        println "NOTE: Requires a group name, organism and permissions as arguments\n" + usageString
+        return
+    }
+
+    def sysConsole = System.console()
+    if (!(admin_username = options?.adminusername)) {
+        admin_username = new String(sysConsole.readLine('Enter admin username: '))
+    }
+    if (!(admin_password = options?.adminpassword)) {
+        admin_password = new String(sysConsole.readPassword('Enter admin password: '))
+    }
+} catch (e) {
+    println(e)
+    return
+}
+
+JSONObject groupObject = new JSONObject()
+groupObject.name = options.name
+
+def s = options.url
+if (s.endsWith("/")) {
+    s = s.substring(0, s.length() - 1)
+}
+
+URL url = new URL(s)
+def client = new RESTClient(options.url)
+if (options.ignoressl) {
+    client.ignoreSSLIssues()
+}
+String path = "${url.path}/group/deleteGroup"
+
+println "Processing group: ${groupObject.name}"
+def userArgument = [
+        name    : groupObject.name,
+        username: admin_username,
+        password: admin_password
+]
+def response = client.post(
+        contentType: 'text/javascript',
+        path: path,
+        body: userArgument
+)
+if(response.status!=200){
+    if (response.data.error !=null ) {
+        println "Error while ading group: ${userArgument.name}\n${response.data.error}"
+    }
+}
+else{
+    println "Removed groups ${groupObject.name} successfully."
+}
+
diff --git a/grails-app/controllers/org/bbop/apollo/GroupController.groovy b/grails-app/controllers/org/bbop/apollo/GroupController.groovy
index 36b158b6b..ec41f426a 100644
--- a/grails-app/controllers/org/bbop/apollo/GroupController.groovy
+++ b/grails-app/controllers/org/bbop/apollo/GroupController.groovy
@@ -20,6 +20,7 @@ class GroupController {
 
     def permissionService
     def preferenceService
+    def groupService
 
     @RestApiMethod(description = "Get organism permissions for group", path = "/group/getOrganismPermissionsForGroup", verb = RestApiVerb.POST)
     @RestApiParams(params = [
@@ -171,7 +172,7 @@ class GroupController {
     @RestApiParams(params = [
             @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
             , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
-            , @RestApiParam(name = "name", type = "string", paramType = RestApiParamType.QUERY, description = "Group name to add")
+            , @RestApiParam(name = "name", type = "string", paramType = RestApiParamType.QUERY, description = "Group name to add, or a comma-delimited list of names")
     ]
     )
     @Transactional
@@ -186,27 +187,18 @@ class GroupController {
         // permissionService.currentUser is None when accessing by webservice
         // to support webservice, get current user from session or input object
         def currentUser = permissionService.getCurrentUser(dataObject)
-        UserGroup group = new UserGroup(
-                name: dataObject.name,
-                // add metadata from webservice
-                metadata: dataObject.metadata ? dataObject.metadata.toString() : null
-        )
-        group.save(flush: true)
-        // allow specify the metadata creator through webservice, if not specified, take current user as the creator
-        if (!group.getMetaData(FeatureStringEnum.CREATOR.value)) {
-            log.debug "creator does not exist, set current user as the creator"
-            group.addMetaData(FeatureStringEnum.CREATOR.value, currentUser.id.toString())
-        }
-        // assign group creator as group admin
-        def creatorId = group.getMetaData(FeatureStringEnum.CREATOR.value)
-        User creator = User.findById(creatorId)
-        group.addToAdmin(creator)
-        log.debug "Add metadata creator: ${group.getMetaData(FeatureStringEnum.CREATOR.value)}"
+        String[] names = dataObject.name.split(",")
+        log.info( "adding groups ${names as JSON}")
 
-        log.info "Added group ${group.name}"
-
-        render group as JSON
+        List<UserGroup> groups = groupService.createGroups(dataObject.metadata,currentUser,names)
+        println "usring add groups ${groups as JSON}"
 
+        if(groups.size()==1){
+            render groups[0] as JSON
+        }
+        else{
+            render groups as JSON
+        }
     }
 
     @RestApiMethod(description = "Delete a group", path = "/group/deleteGroup", verb = RestApiVerb.POST)
@@ -214,49 +206,41 @@ class GroupController {
             @RestApiParam(name = "username", type = "email", paramType = RestApiParamType.QUERY)
             , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
             , @RestApiParam(name = "id", type = "long", paramType = RestApiParamType.QUERY, description = "Group ID to remove (or specify the name)")
-            , @RestApiParam(name = "name", type = "string", paramType = RestApiParamType.QUERY, description = "Group name to remove")
+            , @RestApiParam(name = "name", type = "string", paramType = RestApiParamType.QUERY, description = "Group name or comma-delimited list of names to remove")
     ]
     )
     @Transactional
     def deleteGroup() {
         JSONObject dataObject = permissionService.handleInput(request, params)
-        UserGroup group = UserGroup.findById(dataObject.id)
-        if (!group) {
-            group = UserGroup.findByName(dataObject.name)
+
+        def currentUser = permissionService.getCurrentUser(dataObject)
+
+        List<UserGroup> groupList
+        if(dataObject.id){
+            List<Long> ids
+            if(dataObject.id instanceof Integer){
+                ids = [dataObject.id as Integer]
+            }
+            if(dataObject.id instanceof String){
+                ids = dataObject.id.split(',').collect() as Long
+            }
+            groupList = UserGroup.findAllByIdInList(ids)
         }
-        if (!group) {
-            def error = [error: "Group ${dataObject.name} not found"]
-            log.error(error.error)
-            render error as JSON
-            return
+        else
+        if(dataObject.name){
+            List<String> splitGroups = dataObject.name.split(",") as List<String>
+            println splitGroups
+            println splitGroups.size()
+            groupList = UserGroup.findAllByNameInList(splitGroups)
         }
-        String creatorMetaData = group.getMetaData(FeatureStringEnum.CREATOR.value)
-        // to support webservice, get current user from session or input object
-        def currentUser = permissionService.getCurrentUser(dataObject)
-        // only allow global admin or group creator, or group admin to delete the group
-        if (!permissionService.hasGlobalPermissions(dataObject, GlobalPermissionEnum.ADMIN) && !(creatorMetaData && currentUser.id.toString() == creatorMetaData) && !permissionService.isGroupAdmin(group, currentUser)) {
-            //render status: HttpStatus.UNAUTHORIZED.value()
-            def error = [error: 'not authorized to delete the group']
+        if (!groupList) {
+            def error = [error: "Group ${dataObject.name} not found"]
             log.error(error.error)
             render error as JSON
             return
         }
-        log.info "Removing group"
-
-        List<User> users = group.users as List
-        users.each { it ->
-            it.removeFromUserGroups(group)
-            it.save()
-        }
-
-        def groupOrganismPermissions = GroupOrganismPermission.findAllByGroup(group)
-        GroupOrganismPermission.deleteAll(groupOrganismPermissions)
-
-        log.info "Removing group ${group.name}"
-
-        group.save(flush: true)
-        group.delete(flush: true)
 
+        groupService.deleteGroups(dataObject,currentUser,groupList)
 
         render new JSONObject() as JSON
     }
@@ -403,51 +387,26 @@ class GroupController {
             , @RestApiParam(name = "password", type = "password", paramType = RestApiParamType.QUERY)
             , @RestApiParam(name = "groupId", type = "long", paramType = RestApiParamType.QUERY, description = "Group ID to alter membership of")
             , @RestApiParam(name = "users", type = "JSONArray", paramType = RestApiParamType.QUERY, description = "A JSON array of strings of emails of users the now belong to the group")
+            , @RestApiParam(name = "memberships", type = "JSONArray", paramType = RestApiParamType.QUERY, description = "Bulk memberships (instead of users and groupId) to update of the form: [ {groupId: <groupId>,users: [\"user1\", \"user2\", \"user3\"]}, {groupId:<another-groupId>, users: [\"user2\", \"user8\"]}]")
     ]
     )
     @Transactional
     def updateMembership() {
         JSONObject dataObject = permissionService.handleInput(request, params)
-        UserGroup groupInstance = UserGroup.findById(dataObject.groupId)
-        // to support webservice, get current user from session or input object
+
         def currentUser = permissionService.getCurrentUser(dataObject)
-        String creatorMetaData = groupInstance.getMetaData(FeatureStringEnum.CREATOR.value)
-        // allow global admin, group creator, and group admin to update the group membership
-        if (!permissionService.hasGlobalPermissions(dataObject, GlobalPermissionEnum.ADMIN) && !(creatorMetaData && currentUser.id.toString() == creatorMetaData) && !permissionService.isGroupAdmin(groupInstance, currentUser)) {
 
-            render status: HttpStatus.UNAUTHORIZED.value()
-            return
-        }
-        log.info "Trying to update user group membership"
+        if(dataObject.memberships) {
 
+            def memberships = dataObject.memberships
 
-        List<User> oldUsers = groupInstance.users as List
-        //List<String> usernames = dataObject.users
-        //Fixed bug on passing array through web services: cannot cast String to List
-        JSONArray arr = new JSONArray(dataObject.users)
-        List<String> usernames = new ArrayList<String>()
-        for (int i = 0; i < arr.length(); i++){
-            usernames.add(arr.getString(i))
-        }
-        List<User> newUsers = User.findAllByUsernameInList(usernames)
-
-        List<User> usersToAdd = newUsers - oldUsers
-        List<User> usersToRemove = oldUsers - newUsers
-        usersToAdd.each {
-            groupInstance.addToUsers(it)
-            it.addToUserGroups(groupInstance)
-            it.save()
+            memberships.each { membership ->
+                groupService.updateMembership(dataObject,currentUser,membership.groupId,membership.users)
+            }
         }
-
-        usersToRemove.each {
-            groupInstance.removeFromUsers(it)
-            it.removeFromUserGroups(groupInstance)
-            it.save()
+        else{
+            groupService.updateMembership(dataObject,currentUser,dataObject.groupId,dataObject.users)
         }
-
-        groupInstance.save(flush: true)
-
-        log.info "Updated group ${groupInstance.name} membership setting users ${newUsers.join(' ')}"
         loadGroups()
     }
 
diff --git a/grails-app/services/org/bbop/apollo/GroupService.groovy b/grails-app/services/org/bbop/apollo/GroupService.groovy
new file mode 100644
index 000000000..26df0b4a1
--- /dev/null
+++ b/grails-app/services/org/bbop/apollo/GroupService.groovy
@@ -0,0 +1,112 @@
+package org.bbop.apollo
+
+import grails.converters.JSON
+import grails.transaction.Transactional
+import org.bbop.apollo.gwt.shared.FeatureStringEnum
+import org.bbop.apollo.gwt.shared.GlobalPermissionEnum
+import org.codehaus.groovy.grails.web.json.JSONArray
+import org.codehaus.groovy.grails.web.json.JSONObject
+
+@Transactional
+class GroupService {
+
+    def permissionService
+
+    List<UserGroup> createGroups(String metadata,User currentUser,String[] names) {
+        List<UserGroup> groups = []
+        for(name in names){
+            UserGroup group = new UserGroup(
+                    name: name,
+                    // add metadata from webservice
+                    metadata: metadata ? metadata.toString() : null
+            )
+            group.save()
+            // allow specify the metadata creator through webservice, if not specified, take current user as the creator
+            if (!group.getMetaData(FeatureStringEnum.CREATOR.value)) {
+                log.debug "creator does not exist, set current user as the creator"
+                group.addMetaData(FeatureStringEnum.CREATOR.value, currentUser.id.toString())
+            }
+            // assign group creator as group admin
+            def creatorId = group.getMetaData(FeatureStringEnum.CREATOR.value)
+            User creator = User.findById(creatorId)
+            group.addToAdmin(creator)
+            log.debug "Add metadata creator: ${group.getMetaData(FeatureStringEnum.CREATOR.value)}"
+
+            log.info "Added group ${group.name}"
+            groups.add(group)
+        }
+        return groups
+    }
+
+    List<UserGroup> deleteGroups(JSONObject dataObject, User currentUser, List<UserGroup> groupList) {
+
+        log.info "Removing groups ${groupList as JSON}"
+        for(UserGroup group in groupList){
+            log.info "Removing group ${group.name}"
+            String creatorMetaData = group.getMetaData(FeatureStringEnum.CREATOR.value)
+            // to support webservice, get current user from session or input object
+            // only allow global admin or group creator, or group admin to delete the group
+            if (!permissionService.hasGlobalPermissions(dataObject, GlobalPermissionEnum.ADMIN) && !(creatorMetaData && currentUser.id.toString() == creatorMetaData) && !permissionService.isGroupAdmin(group, currentUser)) {
+                //render status: HttpStatus.UNAUTHORIZED.value()
+                def error = [error: 'not authorized to delete the group']
+                log.error(error.error)
+                throw new RuntimeException(error)
+//                render error as JSON
+            }
+
+            List<User> users = group.users as List
+            users.each { it ->
+                it.removeFromUserGroups(group)
+                it.save()
+            }
+
+            def groupOrganismPermissions = GroupOrganismPermission.findAllByGroup(group)
+            GroupOrganismPermission.deleteAll(groupOrganismPermissions)
+
+
+            group.save()
+            group.delete()
+            log.info "Removed group ${group.name}"
+        }
+
+    }
+
+    def updateMembership(JSONObject dataObject,User currentUser,Long groupId,JSONArray users){
+        UserGroup groupInstance = UserGroup.findById(groupId)
+        // to support webservice, get current user from session or input object
+        String creatorMetaData = groupInstance.getMetaData(FeatureStringEnum.CREATOR.value)
+        // allow global admin, group creator, and group admin to update the group membership
+        if (!permissionService.hasGlobalPermissions(dataObject, GlobalPermissionEnum.ADMIN) && !(creatorMetaData && currentUser.id.toString() == creatorMetaData) && !permissionService.isGroupAdmin(groupInstance, currentUser)) {
+            throw new AnnotationException("Unauthorized access of group ${groupInstance.name}")
+//
+//            render status: HttpStatus.UNAUTHORIZED.value()
+//            return
+        }
+        log.info "Trying to update user group membership"
+
+        List<User> oldUsers = groupInstance.users as List
+        JSONArray arr = new JSONArray(users)
+        List<String> usernames = new ArrayList<String>()
+        for (int i = 0; i < arr.length(); i++) {
+            usernames.add(arr.getString(i))
+        }
+        List<User> newUsers = User.findAllByUsernameInList(usernames)
+
+        List<User> usersToAdd = newUsers - oldUsers
+        List<User> usersToRemove = oldUsers - newUsers
+        usersToAdd.each {
+            groupInstance.addToUsers(it)
+            it.addToUserGroups(groupInstance)
+            it.save()
+        }
+
+        usersToRemove.each {
+            groupInstance.removeFromUsers(it)
+            it.removeFromUserGroups(groupInstance)
+            it.save()
+        }
+        groupInstance.save()
+        log.info "Updated group ${groupInstance.name} membership setting users ${newUsers.join(' ')}"
+
+    }
+}
diff --git a/src/gwt/org/bbop/apollo/gwt/client/GroupPanel.java b/src/gwt/org/bbop/apollo/gwt/client/GroupPanel.java
index 1fcaaba3e..3835ce302 100644
--- a/src/gwt/org/bbop/apollo/gwt/client/GroupPanel.java
+++ b/src/gwt/org/bbop/apollo/gwt/client/GroupPanel.java
@@ -59,7 +59,7 @@
 
     DataGrid.Resources tablecss = GWT.create(TableResources.TableCss.class);
     @UiField(provided = true)
-    DataGrid<GroupInfo> dataGrid = new DataGrid<GroupInfo>(10, tablecss);
+    DataGrid<GroupInfo> dataGrid = new DataGrid<GroupInfo>(25, tablecss);
     @UiField
     Button deleteButton;
     @UiField
@@ -73,7 +73,7 @@
     @UiField(provided = true)
     WebApolloSimplePager organismPager = new WebApolloSimplePager(WebApolloSimplePager.TextLocation.CENTER);
     @UiField(provided = true)
-    DataGrid<GroupOrganismPermissionInfo> organismPermissionsGrid = new DataGrid<>(4, tablecss);
+    DataGrid<GroupOrganismPermissionInfo> organismPermissionsGrid = new DataGrid<>(25, tablecss);
     @UiField
     TextBox createGroupField;
     @UiField
diff --git a/src/gwt/org/bbop/apollo/gwt/client/GroupPanel.ui.xml b/src/gwt/org/bbop/apollo/gwt/client/GroupPanel.ui.xml
index 39130d7a0..a689ce3c7 100644
--- a/src/gwt/org/bbop/apollo/gwt/client/GroupPanel.ui.xml
+++ b/src/gwt/org/bbop/apollo/gwt/client/GroupPanel.ui.xml
@@ -75,7 +75,7 @@
                 </gwt:center>
             </gwt:DockLayoutPanel>
         </gwt:center>
-        <gwt:south size="300">
+        <gwt:south size="200">
             <gwt:TabLayoutPanel barHeight="35" ui:field="userDetailTab" visible="false">
                 <gwt:tab>
                     <gwt:header>Details</gwt:header>
