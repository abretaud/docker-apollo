diff --git a/grails-app/services/org/bbop/apollo/FeatureService.groovy b/grails-app/services/org/bbop/apollo/FeatureService.groovy
index a3d906529..8bf42ac0f 100644
--- a/grails-app/services/org/bbop/apollo/FeatureService.groovy
+++ b/grails-app/services/org/bbop/apollo/FeatureService.groovy
@@ -1956,12 +1956,12 @@ public void setTranslationEnd(Transcript transcript, int translationEnd) {
     def flipStrand(Feature feature) {
 
         for (FeatureLocation featureLocation in feature.featureLocations) {
-            featureLocation.strand = featureLocation.strand > 0 ? -1 : 1
+            featureLocation.strand = featureLocation.strand == Strand.POSITIVE.value ? Strand.NEGATIVE.value : Strand.POSITIVE.value
             featureLocation.save()
         }
 
         for (Feature childFeature : feature?.parentFeatureRelationships?.childFeature) {
-            flipStrand(childFeature);
+            flipStrand(childFeature)
         }
 
         feature.save()
@@ -2080,11 +2080,17 @@ public void setTranslationEnd(Transcript transcript, int translationEnd) {
         List<Transcript> allOverlappingTranscripts = getTranscriptsWithOverlappingOrf(transcript)
         List<Transcript> allTranscriptsForCurrentGene = transcriptService.getTranscripts(transcriptService.getGene(transcript))
         List<Transcript> allTranscripts = (allOverlappingTranscripts + allTranscriptsForCurrentGene).unique()
-        List<Transcript> allSortedTranscripts = allTranscripts?.sort() { a, b -> a.featureLocation.fmin <=> b.featureLocation.fmin }
-        if (transcript.strand == Strand.POSITIVE.value) {
-            allSortedTranscripts = allTranscripts?.sort() { a, b -> a.featureLocation.fmin <=> b.featureLocation.fmin }
+        List<Transcript> allSortedTranscripts
+        // force null / 0 strand to be positive
+        // when getting the up-most strand, make sure to put matching transcript strands BEFORE unmatching strands
+        if (transcript.strand != Strand.NEGATIVE.value) {
+            allSortedTranscripts = allTranscripts?.sort() { a, b ->
+                a.strand <=> b.strand ?: a.featureLocation.fmin <=> b.featureLocation.fmin ?: a.name <=> b.name
+            }
         } else {
-            allSortedTranscripts = allTranscripts?.sort() { a, b -> b.featureLocation.fmax <=> a.featureLocation.fmax }
+            allSortedTranscripts = allTranscripts?.sort() { a, b ->
+                b.strand <=> a.strand ?: b.featureLocation.fmax <=> a.featureLocation.fmax ?: a.name <=> b.name
+            }
         }
         // In a normal scenario, all sorted transcripts should have the same parent indicating no changes to be made.
         // If there are transcripts that do overlap but do not have the same parent gene then these transcripts should
@@ -2120,7 +2126,7 @@ public void setTranslationEnd(Transcript transcript, int translationEnd) {
         transcriptsToUpdate.addAll(transcriptsToAssociate)
         transcriptsToUpdate.addAll(transcriptsToDissociate)
 
-        if (transcriptsToAssociate.size() > 0) {
+        if (transcriptsToAssociate) {
             Gene mergedGene = mergeGeneEntities(fivePrimeGene, genesToMerge.unique())
             for (Transcript eachTranscript in transcriptsToAssociate) {
                 Gene eachTranscriptParent = transcriptService.getGene(eachTranscript)
@@ -2141,7 +2147,7 @@ public void setTranslationEnd(Transcript transcript, int translationEnd) {
             }
         }
 
-        if (transcriptsToDissociate.size() > 0) {
+        if (transcriptsToDissociate) {
             Transcript firstTranscript = null
             for (Transcript eachTranscript in transcriptsToDissociate) {
                 if (firstTranscript == null) {
diff --git a/grails-app/services/org/bbop/apollo/RequestHandlingService.groovy b/grails-app/services/org/bbop/apollo/RequestHandlingService.groovy
index 9a3497af9..b4cac2223 100644
--- a/grails-app/services/org/bbop/apollo/RequestHandlingService.groovy
+++ b/grails-app/services/org/bbop/apollo/RequestHandlingService.groovy
@@ -5,15 +5,16 @@ import grails.transaction.Transactional
 import org.bbop.apollo.event.AnnotationEvent
 import org.bbop.apollo.gwt.shared.FeatureStringEnum
 import org.bbop.apollo.gwt.shared.PermissionEnum
+import org.bbop.apollo.history.FeatureOperation
 
 //import grails.compiler.GrailsCompileStatic
-import org.bbop.apollo.history.FeatureOperation
 import org.bbop.apollo.sequence.Strand
 import org.codehaus.groovy.grails.web.json.JSONArray
 import org.codehaus.groovy.grails.web.json.JSONException
 import org.codehaus.groovy.grails.web.json.JSONObject
 import org.grails.plugins.metrics.groovy.Timed
 import org.hibernate.FetchMode
+
 /**
  * This class is responsible for handling JSON requests from the AnnotationEditorController and routing
  * to the proper service classes.
@@ -68,8 +69,10 @@ class RequestHandlingService {
             Substitution.class.name
     ]
 
-    public static final List<String> viewableAnnotationList = viewableAnnotationFeatureList + viewableAnnotationTranscriptParentList
-    public static final List<String> viewableAnnotationTypesList = viewableAnnotationFeatureList + viewableAnnotationTranscriptList + viewableAnnotationTranscriptParentList
+    public static
+    final List<String> viewableAnnotationList = viewableAnnotationFeatureList + viewableAnnotationTranscriptParentList
+    public static
+    final List<String> viewableAnnotationTypesList = viewableAnnotationFeatureList + viewableAnnotationTranscriptList + viewableAnnotationTranscriptParentList
 
     private String underscoreToCamelCase(String underscore) {
         if (!underscore || underscore.isAllWhitespace()) {
@@ -91,7 +94,7 @@ class RequestHandlingService {
             String uniqueName = jsonFeature.get(FeatureStringEnum.UNIQUENAME.value)
             Feature feature = Feature.findByUniqueName(uniqueName)
             String symbolString = jsonFeature.getString(FeatureStringEnum.SYMBOL.value)
-            sequence =  sequence ?: feature.getFeatureLocation().getSequence()
+            sequence = sequence ?: feature.getFeatureLocation().getSequence()
             permissionService.checkPermissions(inputObject, sequence.organism, PermissionEnum.WRITE)
 
             feature.symbol = symbolString
@@ -123,7 +126,7 @@ class RequestHandlingService {
             String uniqueName = jsonFeature.get(FeatureStringEnum.UNIQUENAME.value)
             Feature feature = Feature.findByUniqueName(uniqueName)
             String descriptionString = jsonFeature.getString(FeatureStringEnum.DESCRIPTION.value)
-            sequence =  sequence ?: feature.getFeatureLocation().getSequence()
+            sequence = sequence ?: feature.getFeatureLocation().getSequence()
             permissionService.checkPermissions(inputObject, sequence.organism, PermissionEnum.WRITE)
 
 
@@ -510,13 +513,13 @@ class RequestHandlingService {
         Sequence sequence = permissionService.checkPermissions(inputObject, PermissionEnum.READ)
         if (sequenceName != sequence.name) {
             sequence = Sequence.findByNameAndOrganism(sequenceName, sequence.organism)
-            preferenceService.setCurrentSequence(permissionService.getCurrentUser(inputObject), sequence,inputObject.getString(FeatureStringEnum.CLIENT_TOKEN.value))
+            preferenceService.setCurrentSequence(permissionService.getCurrentUser(inputObject), sequence, inputObject.getString(FeatureStringEnum.CLIENT_TOKEN.value))
         }
         log.debug "getFeatures for organism -> ${sequence.organism.commonName} and ${sequence.name}"
 
         def features = Feature.createCriteria().listDistinct {
             featureLocations {
-                eq('sequence',sequence)
+                eq('sequence', sequence)
             }
             fetchMode 'owners', FetchMode.JOIN
             fetchMode 'featureLocations', FetchMode.JOIN
@@ -539,7 +542,7 @@ class RequestHandlingService {
             fetchMode 'parentFeatureRelationships.childFeature.featureProperties', FetchMode.JOIN
             fetchMode 'parentFeatureRelationships.childFeature.featureDBXrefs', FetchMode.JOIN
             fetchMode 'parentFeatureRelationships.childFeature.owners', FetchMode.JOIN
-            'in'('class', viewableAnnotationTranscriptList+viewableAnnotationFeatureList)
+            'in'('class', viewableAnnotationTranscriptList + viewableAnnotationFeatureList)
         }
 
 
@@ -550,7 +553,7 @@ class RequestHandlingService {
         }
 
         inputObject.put(AnnotationEditorController.REST_FEATURES, jsonFeatures)
-        log.debug "getFeatures ${System.currentTimeMillis()-start}ms"
+        log.debug "getFeatures ${System.currentTimeMillis() - start}ms"
         return inputObject
 
     }
@@ -657,7 +660,7 @@ class RequestHandlingService {
             if (!suppressHistory) {
                 def json = featureService.convertFeatureToJSON(transcript)
                 featureEventService.addNewFeatureEventWithUser(FeatureOperation.ADD_TRANSCRIPT, transcriptService.getGene(transcript).name, transcript.uniqueName, inputObject, json, permissionService.getCurrentUser(inputObject))
-                transcriptJSONList+=json
+                transcriptJSONList += json
             }
         }
 
@@ -698,13 +701,15 @@ class RequestHandlingService {
             JSONObject jsonCDSLocation = transcriptJSONObject.getJSONObject(FeatureStringEnum.LOCATION.value);
             featureService.setTranslationStart(transcript, jsonCDSLocation.getInt(FeatureStringEnum.FMIN.value), true)
         }
-        
+
         transcript.save()
-        
+
         def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript)
         if (transcriptsToUpdate.size() > 0) {
             JSONObject updateFeatureContainer = createJSONFeatureContainer()
-            transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+            transcriptsToUpdate.each {
+                updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+            }
             if (sequence) {
                 AnnotationEvent annotationEvent = new AnnotationEvent(
                         features: updateFeatureContainer,
@@ -714,7 +719,7 @@ class RequestHandlingService {
                 fireAnnotationEvent(annotationEvent)
             }
         }
-        
+
         Gene gene = transcriptService.getGene(transcript)
         JSONObject newJSONObject = featureService.convertFeatureToJSON(transcript, false)
         featureEventService.addNewFeatureEvent(setStart ? FeatureOperation.SET_TRANSLATION_START : FeatureOperation.UNSET_TRANSLATION_START, gene.name, transcript.uniqueName, inputObject, transcriptJSONObject, newJSONObject, permissionService.getCurrentUser(inputObject))
@@ -759,7 +764,9 @@ class RequestHandlingService {
         def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript)
         if (transcriptsToUpdate.size() > 0) {
             JSONObject updateFeatureContainer = createJSONFeatureContainer()
-            transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+            transcriptsToUpdate.each {
+                updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+            }
             if (sequence) {
                 AnnotationEvent annotationEvent = new AnnotationEvent(
                         features: updateFeatureContainer,
@@ -769,7 +776,7 @@ class RequestHandlingService {
                 fireAnnotationEvent(annotationEvent)
             }
         }
-        
+
         JSONObject newJSONObject = featureService.convertFeatureToJSON(transcript, false)
         featureEventService.addNewFeatureEvent(setEnd ? FeatureOperation.SET_TRANSLATION_END : FeatureOperation.UNSET_TRANSLATION_END, transcriptService.getGene(transcript).name, transcript.uniqueName, inputObject, transcriptJSONObject, newJSONObject, permissionService.getCurrentUser(inputObject))
         JSONObject featureContainer = createJSONFeatureContainer(newJSONObject);
@@ -803,7 +810,9 @@ class RequestHandlingService {
         def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript)
         if (transcriptsToUpdate.size() > 0) {
             JSONObject updateFeatureContainer = createJSONFeatureContainer()
-            transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+            transcriptsToUpdate.each {
+                updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+            }
             if (sequence) {
                 AnnotationEvent annotationEvent = new AnnotationEvent(
                         features: updateFeatureContainer,
@@ -859,7 +868,9 @@ class RequestHandlingService {
             def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript)
             if (transcriptsToUpdate.size() > 0) {
                 JSONObject updateFeatureContainer = createJSONFeatureContainer()
-                transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+                transcriptsToUpdate.each {
+                    updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+                }
                 if (sequence) {
                     AnnotationEvent annotationEvent = new AnnotationEvent(
                             features: updateFeatureContainer,
@@ -917,7 +928,9 @@ class RequestHandlingService {
             def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript)
             if (transcriptsToUpdate.size() > 0) {
                 JSONObject updateFeatureContainer = createJSONFeatureContainer()
-                transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+                transcriptsToUpdate.each {
+                    updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+                }
                 if (sequence) {
                     AnnotationEvent annotationEvent = new AnnotationEvent(
                             features: updateFeatureContainer,
@@ -927,7 +940,7 @@ class RequestHandlingService {
                     fireAnnotationEvent(annotationEvent)
                 }
             }
-            
+
             JSONObject newJsonObject = featureService.convertFeatureToJSON(transcript)
             transcriptArray.add(newJsonObject)
             featureEventService.addNewFeatureEvent(FeatureOperation.SET_EXON_BOUNDARIES, transcriptService.getGene(transcript).name, transcript.uniqueName, inputObject, oldJsonObject, newJsonObject, permissionService.getCurrentUser(inputObject))
@@ -961,7 +974,9 @@ class RequestHandlingService {
         def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript)
         if (transcriptsToUpdate.size() > 0) {
             JSONObject updateFeatureContainer = createJSONFeatureContainer()
-            transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+            transcriptsToUpdate.each {
+                updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+            }
             if (sequence) {
                 AnnotationEvent annotationEvent = new AnnotationEvent(
                         features: updateFeatureContainer,
@@ -971,7 +986,7 @@ class RequestHandlingService {
                 fireAnnotationEvent(annotationEvent)
             }
         }
-        
+
         JSONObject featureContainer = createJSONFeatureContainer(featureService.convertFeatureToJSON(transcript, false));
 
         if (sequence) {
@@ -1039,7 +1054,9 @@ class RequestHandlingService {
             def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript)
             if (transcriptsToUpdate.size() > 0) {
                 JSONObject updateFeatureContainer = createJSONFeatureContainer()
-                transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+                transcriptsToUpdate.each {
+                    updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+                }
                 if (sequence) {
                     AnnotationEvent annotationEvent = new AnnotationEvent(
                             features: updateFeatureContainer,
@@ -1138,7 +1155,7 @@ class RequestHandlingService {
         try {
             features.put(AnnotationEditorController.REST_OPERATION, event.getOperation().name());
             features.put(REST_SEQUENCE_ALTERNATION_EVENT, event.isSequenceAlterationEvent());
-            if(event.username){
+            if (event.username) {
                 features.put(FeatureStringEnum.USERNAME.value, event.username);
             }
             operations.put(features);
@@ -1239,7 +1256,7 @@ class RequestHandlingService {
             if (activeUser) {
                 featureService.setOwner(sequenceAlteration, activeUser)
             } else {
-                log.error("Unable to find valid user to set on transcript!" )
+                log.error("Unable to find valid user to set on transcript!")
             }
             sequenceAlteration.save()
 
@@ -1464,30 +1481,37 @@ class RequestHandlingService {
     @Timed
     def flipStrand(JSONObject inputObject) {
         Sequence sequence = permissionService.checkPermissions(inputObject, PermissionEnum.WRITE)
-        JSONObject featureContainer = createJSONFeatureContainer();
+        JSONObject featureContainer = createJSONFeatureContainer()
         JSONArray features = inputObject.getJSONArray(FeatureStringEnum.FEATURES.value)
         for (int i = 0; i < features.length(); ++i) {
-            JSONObject jsonFeature = features.getJSONObject(i);
+            JSONObject jsonFeature = features.getJSONObject(i)
             Feature feature = Feature.findByUniqueName(jsonFeature.getString(FeatureStringEnum.UNIQUENAME.value))
 
             if (feature instanceof Transcript) {
-                feature = transcriptService.flipTranscriptStrand((Transcript) feature);
+                feature = transcriptService.flipTranscriptStrand((Transcript) feature)
                 featureService.setLongestORF((Transcript) feature)
                 nonCanonicalSplitSiteService.findNonCanonicalAcceptorDonorSpliceSites((Transcript) feature)
-                featureEventService.addNewFeatureEventWithUser(FeatureOperation.FLIP_STRAND, transcriptService.getGene((Transcript) feature).name, feature.uniqueName, inputObject, featureService.convertFeatureToJSON((Transcript) feature), permissionService.getCurrentUser(inputObject))
                 def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(feature)
-                if (transcriptsToUpdate.size() > 0) {
-                    JSONObject updateFeatureContainer = createJSONFeatureContainer()
-                    transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
-                    if (sequence) {
-                        AnnotationEvent annotationEvent = new AnnotationEvent(
-                                features: updateFeatureContainer,
-                                sequence: sequence,
-                                operation: AnnotationEvent.Operation.UPDATE
-                        )
-                        fireAnnotationEvent(annotationEvent)
+                if (transcriptService.getGene((Transcript) feature)) {
+                    featureEventService.addNewFeatureEventWithUser(FeatureOperation.FLIP_STRAND, transcriptService.getGene((Transcript) feature).name, feature.uniqueName, inputObject, featureService.convertFeatureToJSON((Transcript) feature), permissionService.getCurrentUser(inputObject))
+                    if (transcriptsToUpdate.size()) {
+                        JSONObject updateFeatureContainer = createJSONFeatureContainer()
+                        transcriptsToUpdate.each {
+                            updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+                        }
+                        if (sequence) {
+                            AnnotationEvent annotationEvent = new AnnotationEvent(
+                                    features: updateFeatureContainer,
+                                    sequence: sequence,
+                                    operation: AnnotationEvent.Operation.UPDATE
+                            )
+                            fireAnnotationEvent(annotationEvent)
+                        }
                     }
                 }
+                else{
+                    log.error("Transcript failed to produce gene with moving to opposite strand: "+feature.name)
+                }
             } else {
                 feature = featureService.flipStrand(feature)
                 featureEventService.addNewFeatureEventWithUser(FeatureOperation.FLIP_STRAND, feature.name, feature.uniqueName, inputObject, featureService.convertFeatureToJSON(feature), permissionService.getCurrentUser(inputObject))
@@ -1526,7 +1550,9 @@ class RequestHandlingService {
         def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript1)
         if (transcriptsToUpdate.size() > 0) {
             JSONObject updateFeatureContainer = createJSONFeatureContainer()
-            transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+            transcriptsToUpdate.each {
+                updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+            }
             if (sequence) {
                 AnnotationEvent annotationEvent = new AnnotationEvent(
                         features: updateFeatureContainer,
@@ -1536,7 +1562,7 @@ class RequestHandlingService {
                 fireAnnotationEvent(annotationEvent)
             }
         }
-        
+
         JSONObject newJsonObject = featureService.convertFeatureToJSON(transcript1)
         JSONObject featureContainer = createJSONFeatureContainer(newJsonObject)
 
@@ -1576,7 +1602,9 @@ class RequestHandlingService {
         def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript)
         if (transcriptsToUpdate.size() > 0) {
             JSONObject updateFeatureContainer = createJSONFeatureContainer()
-            transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+            transcriptsToUpdate.each {
+                updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+            }
             if (sequence) {
                 AnnotationEvent annotationEvent = new AnnotationEvent(
                         features: updateFeatureContainer,
@@ -1620,14 +1648,16 @@ class RequestHandlingService {
         for (int i = 1; i < features.length(); ++i) {
             JSONObject jsonExon = features.getJSONObject(i)
             Exon exon = Exon.findByUniqueName(jsonExon.getString(FeatureStringEnum.UNIQUENAME.value));
-            checkOwnersDelete(exon,inputObject)
+            checkOwnersDelete(exon, inputObject)
 
             exonService.deleteExon(transcript, exon);
         }
         def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript)
         if (transcriptsToUpdate.size() > 0) {
             JSONObject updateFeatureContainer = createJSONFeatureContainer()
-            transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+            transcriptsToUpdate.each {
+                updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+            }
             if (sequence) {
                 AnnotationEvent annotationEvent = new AnnotationEvent(
                         features: updateFeatureContainer,
@@ -1637,7 +1667,7 @@ class RequestHandlingService {
                 fireAnnotationEvent(annotationEvent)
             }
         }
-        
+
         Feature topLevelFeature = featureService.getTopLevelFeature(transcript)
         JSONObject featureContainer = createJSONFeatureContainer(featureService.convertFeatureToJSON(topLevelFeature))
 
@@ -1679,7 +1709,7 @@ class RequestHandlingService {
                 // if jsonFeature is of type gene or pseudogene
                 JSONObject jsonGene = JSON.parse(jsonFeature.toString())
                 jsonGene.remove(FeatureStringEnum.CHILDREN.value)
-                if(jsonFeature.containsKey(FeatureStringEnum.CHILDREN.value)){
+                if (jsonFeature.containsKey(FeatureStringEnum.CHILDREN.value)) {
                     for (JSONObject transcriptJsonFeature in jsonFeature.getJSONArray(FeatureStringEnum.CHILDREN.value)) {
                         // look at its children JSON Array to get the features at the *RNA level
                         // adding jsonGene to each individual transcript
@@ -1694,8 +1724,7 @@ class RequestHandlingService {
                         returnObject.getJSONArray(FeatureStringEnum.FEATURES.value).put(jsonObject);
                     }
                 }
-            }
-            else {
+            } else {
                 // jsonFeature is of type transposable_element or repeat_region
                 Feature newFeature = featureService.addFeature(jsonFeature, sequence, user, suppressHistory, true)
                 JSONObject newFeatureJsonObject = featureService.convertFeatureToJSON(newFeature)
@@ -1760,7 +1789,7 @@ class RequestHandlingService {
                 uniqueName = feature.uniqueName
             }
 
-            checkOwnersDelete(feature,inputObject)
+            checkOwnersDelete(feature, inputObject)
 
             log.debug "feature found to delete ${feature?.name}"
             if (feature) {
@@ -1885,7 +1914,9 @@ class RequestHandlingService {
                     def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript)
                     if (transcriptsToUpdate.size() > 0) {
                         JSONObject updateFeatureContainer = createJSONFeatureContainer()
-                        transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+                        transcriptsToUpdate.each {
+                            updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+                        }
                         if (sequence) {
                             AnnotationEvent annotationEvent = new AnnotationEvent(
                                     features: updateFeatureContainer,
@@ -1903,7 +1934,7 @@ class RequestHandlingService {
                     featureOperation = FeatureOperation.DELETE_FEATURE
                     featureName = feature.name
                 }
-                
+
                 JSONObject newJsonObject = featureService.convertFeatureToJSON(feature)
                 featureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(newJsonObject);
 
@@ -1930,19 +1961,19 @@ class RequestHandlingService {
     }
 
     def checkOwnersDelete(Feature feature, JSONObject inputObject) {
-        if(configWrapperService.onlyOwnersDelete){
+        if (configWrapperService.onlyOwnersDelete) {
             def currentUser = permissionService.getCurrentUser(inputObject)
             def isAdmin = permissionService.isUserAdmin(currentUser)
             def owners = findOwners(feature)
-            if(!isAdmin && !(currentUser in owners)){
+            if (!isAdmin && !(currentUser in owners)) {
                 throw new AnnotationException("Only feature owner or admin may delete, change type, or revert annotation to an earlier state")
             }
         }
     }
 
     private findOwners(Feature feature) {
-        if(!feature) return null
-        if(feature.owners){
+        if (!feature) return null
+        if (feature.owners) {
             return feature.owners
         }
         return findOwners(featureRelationshipService.getParentForFeature(feature))
@@ -1990,7 +2021,9 @@ class RequestHandlingService {
         def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript)
         if (transcriptsToUpdate.size() > 0) {
             JSONObject updateFeatureContainer = createJSONFeatureContainer()
-            transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+            transcriptsToUpdate.each {
+                updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+            }
             if (sequence) {
                 AnnotationEvent annotationEvent = new AnnotationEvent(
                         features: updateFeatureContainer,
@@ -2051,7 +2084,7 @@ class RequestHandlingService {
         Gene updatedGene1 = transcriptService.getGene(transcript1)
         Gene updatedGene2 = transcriptService.getGene(transcript2)
         for (Transcript t : transcriptService.getTranscripts(updatedGene1)) {
-                updateContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(t));
+            updateContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(t));
         }
 
         if (updatedGene1.uniqueName != updatedGene2.uniqueName) {
@@ -2110,10 +2143,12 @@ class RequestHandlingService {
             throw new AnnotationException("You cannot merge transcripts on opposite strands");
         }
 
-        List<Transcript> sortedTranscripts = [ transcript1, transcript2 ].sort { a,b ->
-            a.fmin <=> b.fmin
+        List<Transcript> sortedTranscripts = [transcript1, transcript2].sort { a, b ->
+            a.fmin <=> b.fmin ?: a.fmax <=> b.fmax ?: a.name <=> b.name
+        }
+        if (transcript1.strand == Strand.NEGATIVE.value) {
+            sortedTranscripts.reverse(true)
         }
-        if (transcript1.strand == Strand.NEGATIVE.value) {sortedTranscripts.reverse(true)}
         transcript1 = sortedTranscripts.get(0)
         transcript2 = sortedTranscripts.get(1)
         Gene gene1 = transcriptService.getGene(transcript1)
@@ -2137,7 +2172,9 @@ class RequestHandlingService {
         def transcriptsToUpdate = featureService.handleDynamicIsoformOverlap(transcript1)
         if (transcriptsToUpdate.size() > 0) {
             JSONObject updateFeatureContainer = createJSONFeatureContainer()
-            transcriptsToUpdate.each { updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it)) }
+            transcriptsToUpdate.each {
+                updateFeatureContainer.getJSONArray(FeatureStringEnum.FEATURES.value).put(featureService.convertFeatureToJSON(it))
+            }
             if (sequence) {
                 AnnotationEvent annotationEvent = new AnnotationEvent(
                         features: updateFeatureContainer,
@@ -2268,13 +2305,13 @@ class RequestHandlingService {
         JSONObject featureContainer = createJSONFeatureContainer()
 
         def singletonFeatureTypes = [RepeatRegion.alternateCvTerm, TransposableElement.alternateCvTerm]
-        def rnaFeatureTypes = [MRNA.alternateCvTerm,MiRNA.alternateCvTerm,NcRNA.alternateCvTerm, RRNA.alternateCvTerm, SnRNA.alternateCvTerm, SnoRNA.alternateCvTerm, TRNA.alternateCvTerm, Transcript.alternateCvTerm]
+        def rnaFeatureTypes = [MRNA.alternateCvTerm, MiRNA.alternateCvTerm, NcRNA.alternateCvTerm, RRNA.alternateCvTerm, SnRNA.alternateCvTerm, SnoRNA.alternateCvTerm, TRNA.alternateCvTerm, Transcript.alternateCvTerm]
 
         for (int i = 0; i < features.length(); i++) {
             String type = features.get(i).type
             String uniqueName = features.get(i).uniquename
             Feature feature = Feature.findByUniqueName(uniqueName)
-            checkOwnersDelete(feature,inputObject)
+            checkOwnersDelete(feature, inputObject)
             FeatureEvent currentFeatureEvent = featureEventService.findCurrentFeatureEvent(feature.uniqueName).get(0)
             JSONObject currentFeatureJsonObject = featureService.convertFeatureToJSON(feature)
             JSONObject originalFeatureJsonObject = JSON.parse(currentFeatureEvent.newFeaturesJsonArray) as JSONObject
@@ -2282,11 +2319,9 @@ class RequestHandlingService {
 
             if (originalType == type) {
                 log.warn "Cannot change ${uniqueName} from ${originalType} -> ${type}. Nothing to do."
-            }
-            else if (originalType in singletonFeatureTypes && type in rnaFeatureTypes) {
+            } else if (originalType in singletonFeatureTypes && type in rnaFeatureTypes) {
                 log.error "Not enough information available to change ${uniqueName} from ${originalType} -> ${type}."
-            }
-            else {
+            } else {
                 log.info "Changing ${uniqueName} from ${originalType} to ${type}"
                 Feature newFeature = featureService.changeAnnotationType(inputObject, feature, sequence, user, type)
                 JSONObject newFeatureJsonObject = featureService.convertFeatureToJSON(newFeature)
diff --git a/grails-app/services/org/bbop/apollo/TranscriptService.groovy b/grails-app/services/org/bbop/apollo/TranscriptService.groovy
index 0f5bb317d..a69397f95 100644
--- a/grails-app/services/org/bbop/apollo/TranscriptService.groovy
+++ b/grails-app/services/org/bbop/apollo/TranscriptService.groovy
@@ -474,8 +474,14 @@ class TranscriptService {
     @Transactional
     Transcript flipTranscriptStrand(Transcript oldTranscript) {
         Gene oldGene = getGene(oldTranscript)
-        oldTranscript = featureService.flipStrand(oldTranscript)
-        oldTranscript.save()
+        if(oldGene.parentFeatureRelationships.size()==1){
+            oldGene = featureService.flipStrand(oldGene)
+            oldGene.save()
+        }
+        else{
+            oldTranscript = featureService.flipStrand(oldTranscript)
+            oldTranscript.save()
+        }
         nonCanonicalSplitSiteService.findNonCanonicalAcceptorDonorSpliceSites(oldTranscript)
         oldTranscript.save()
 
diff --git a/src/groovy/org/bbop/apollo/FeaturePositionComparator.groovy b/src/groovy/org/bbop/apollo/FeaturePositionComparator.groovy
index 105e2a774..18990f0a8 100644
--- a/src/groovy/org/bbop/apollo/FeaturePositionComparator.groovy
+++ b/src/groovy/org/bbop/apollo/FeaturePositionComparator.groovy
@@ -6,15 +6,15 @@ class FeaturePositionComparator<T extends Feature> implements  Comparator<T>{
 
     private boolean sortByStrand;
 
-    public FeaturePositionComparator() {
-        this(true);
+    FeaturePositionComparator() {
+        this(true)
     }
 
-    public FeaturePositionComparator(boolean sortByStrand) {
-        this.sortByStrand = sortByStrand;
+    FeaturePositionComparator(boolean sortByStrand) {
+        this.sortByStrand = sortByStrand
     }
 
-    public int compare(T feature1, T feature2) {
+    int compare(T feature1, T feature2) {
 
         if (feature1 == null || feature2 == null) {
 //            log.info("both features null");
@@ -26,19 +26,24 @@ class FeaturePositionComparator<T extends Feature> implements  Comparator<T>{
         if (featureLocation1.fmin < featureLocation2.fmin) {
             retVal = -1;
         }
-        else if (featureLocation1.getFmin() > featureLocation2.getFmin()) {
+        else if (featureLocation1.fmin > featureLocation2.fmin) {
             retVal = 1;
         }
-        else if (featureLocation1.getFmax() < featureLocation2.getFmax()) {
+        else if (featureLocation1.fmax < featureLocation2.fmax) {
             retVal = -1;
         }
-        else if (featureLocation1.getFmax() > featureLocation2.getFmax()) {
+        else if (featureLocation1.fmax > featureLocation2.fmax) {
             retVal = 1;
         }
         else if (featureLocation1.calculateLength() != featureLocation2.calculateLength()) {
             retVal = featureLocation1.calculateLength() < featureLocation2.calculateLength() ? -1 : 1;
         }
-        if (sortByStrand && featureLocation1.getStrand() == -1) {
+            // overlapping perfectly, use strand to force consistent results
+        else{
+            retVal = featureLocation1.strand - featureLocation2.strand
+        }
+
+        if (sortByStrand && featureLocation1.strand == -1) {
             retVal *= -1;
         }
         return retVal;
diff --git a/test/integration/org/bbop/apollo/RequestHandlingServiceIntegrationSpec.groovy b/test/integration/org/bbop/apollo/RequestHandlingServiceIntegrationSpec.groovy
index 0a0321d0a..40caf909c 100644
--- a/test/integration/org/bbop/apollo/RequestHandlingServiceIntegrationSpec.groovy
+++ b/test/integration/org/bbop/apollo/RequestHandlingServiceIntegrationSpec.groovy
@@ -7,7 +7,7 @@ import org.codehaus.groovy.grails.web.json.JSONArray
 import org.codehaus.groovy.grails.web.json.JSONObject
 import spock.lang.IgnoreRest
 
-class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
+class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec {
 
     def requestHandlingService
     def featureService
@@ -341,8 +341,13 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         for (int i = 0; i < 3; i++) {
             JSONObject codingObject = children.get(i)
             JSONObject locationObject = codingObject.getJSONObject(FeatureStringEnum.LOCATION.value)
+            assert locationObject.strand == -1
             assert locationObject != null
         }
+        assert MRNA.first().featureLocations.first().strand == -1
+        assert Gene.first().featureLocations.first().strand == -1
+        assert Exon.first().featureLocations.first().strand == -1
+        assert Exon.last().featureLocations.first().strand == -1
 
 
         when: "we flip the strand"
@@ -367,6 +372,10 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert NonCanonicalFivePrimeSpliceSite.count == 1
         assert NonCanonicalThreePrimeSpliceSite.count == 1
         assert childrenArray.size() == 5
+        assert MRNA.first().featureLocations.first().strand == 1
+        assert Gene.first().featureLocations.first().strand == 1
+        assert Exon.first().featureLocations.first().strand == 1
+        assert Exon.last().featureLocations.first().strand == 1
 
         when: "we flip it back the other way"
         returnedAfterExonObject = requestHandlingService.flipStrand(commandObject)
@@ -387,6 +396,172 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert CDS.count == 1
         assert NonCanonicalFivePrimeSpliceSite.count == 0
         assert NonCanonicalThreePrimeSpliceSite.count == 0
+        assert MRNA.first().featureLocations.first().strand == -1
+        assert Gene.first().featureLocations.first().strand == -1
+        assert Exon.first().featureLocations.first().strand == -1
+        assert Exon.last().featureLocations.first().strand == -1
+    }
+
+    void "flip strand on an existing transcript with two isoforms"() {
+
+        given: "a input JSON string"
+        String jsonString = "{ ${testCredentials} \"track\": \"Group1.10\", \"features\": [{\"location\":{\"fmin\":219994,\"fmax\":222245,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"mRNA\"},\"name\":\"GB40772-RA\",\"children\":[{\"location\":{\"fmin\":222109,\"fmax\":222245,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":219994,\"fmax\":220044,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":222081,\"fmax\":222245,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":219994,\"fmax\":222109,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"CDS\"}}]}], \"operation\": \"add_transcript\" }"
+        String commandString = "{ ${testCredentials} \"track\": \"Group1.10\", \"features\": [ { \"uniquename\": \"@TRANSCRIPT_NAME@\" } ], \"operation\": \"flip_strand\" }"
+
+        when: "we parse the string"
+        JSONObject jsonObject = JSON.parse(jsonString) as JSONObject
+
+        then: "we get a valid json object and no features"
+        assert Feature.count == 0
+
+        when: "we add the first transcript"
+        JSONObject returnObject1 = requestHandlingService.addTranscript(jsonObject)
+        JSONObject returnObject2 = requestHandlingService.addTranscript(jsonObject)
+
+        then: "we should get a transcript back"
+        assert returnObject1.getString('operation') == "ADD"
+        assert returnObject2.getString('operation') == "ADD"
+        JSONArray featuresArray1 = returnObject1.getJSONArray(FeatureStringEnum.FEATURES.value)
+        assert 1 == featuresArray1.size()
+        JSONObject mrna1Object = featuresArray1.getJSONObject(0)
+        JSONArray featuresArray2 = returnObject2.getJSONArray(FeatureStringEnum.FEATURES.value)
+        assert 1 == featuresArray2.size()
+        JSONObject mrna2Object = featuresArray2.getJSONObject(0)
+        assert Gene.count == 1
+        assert MRNA.count == 2
+        assert Exon.count == 4
+        assert CDS.count == 2
+        assert "GB40772-RA-00001" == mrna1Object.getString(FeatureStringEnum.NAME.value)
+        assert "GB40772-RA-00002" == mrna2Object.getString(FeatureStringEnum.NAME.value)
+
+
+        when: "we get the transcripts back"
+        MRNA mrna00001 = MRNA.findByName("GB40772-RA-00001")
+        MRNA mrna00002 = MRNA.findByName("GB40772-RA-00002")
+        Gene gene = Gene.first()
+        String gene1Name = gene.name
+        String transcript1UniqueName = mrna00001.uniqueName
+        JSONArray children = mrna1Object.getJSONArray(FeatureStringEnum.CHILDREN.value)
+        assert 3 == children.size()
+        for (int i = 0; i < 3; i++) {
+            JSONObject codingObject = children.get(i)
+            JSONObject locationObject = codingObject.getJSONObject(FeatureStringEnum.LOCATION.value)
+            assert locationObject.strand == -1
+            assert locationObject != null
+        }
+
+        then: "the strand should be correct"
+        assert mrna00001.featureLocations.first().strand == -1
+        assert mrna00002.featureLocations.first().strand == -1
+        assert gene.featureLocations.first().strand == -1
+        for (exon in Exon.all) {
+            assert exon.featureLocations.first().strand == -1
+        }
+
+
+        when: "we flip the strand for GB40772-RA-00001"
+        commandString = commandString.replaceAll("@TRANSCRIPT_NAME@", transcript1UniqueName)
+        JSONObject commandObject = JSON.parse(commandString) as JSONObject
+        JSONObject returnedAfterExonObject = requestHandlingService.flipStrand(commandObject)
+        Gene newGene = transcriptService.getGene(mrna00001)
+        CDS cds00001 = transcriptService.getCDS(mrna00001)
+        def exons00001 = transcriptService.getSortedExons(mrna00001,true)
+
+        Gene originalGene = transcriptService.getGene(mrna00002)
+        def exons00002 = transcriptService.getSortedExons(mrna00002, true)
+        CDS cds00002 = transcriptService.getCDS(mrna00002)
+
+
+        then: "we should see that we flipped the strand"
+        assert returnedAfterExonObject != null
+        log.debug Feature.count
+        assert Feature.count > 5
+        JSONArray returnFeaturesArray = returnedAfterExonObject.getJSONArray(FeatureStringEnum.FEATURES.value)
+        assert returnFeaturesArray.size() == 1
+        JSONObject mRNAObject00001 = returnFeaturesArray.get(0)
+        // transcript is named for new gene
+        // no need to rename the transcriptA
+
+
+        assert mRNAObject00001.getString(FeatureStringEnum.NAME.value) == "GB40772-RAa-00001"
+        JSONArray childrenArray = mRNAObject00001.getJSONArray(FeatureStringEnum.CHILDREN.value)
+        assert Gene.count == 2
+        assert MRNA.count == 2
+        // we are losing an exon somewhere!
+        assert Exon.count == 4
+        assert CDS.count == 2
+        assert NonCanonicalFivePrimeSpliceSite.count == 1
+        assert NonCanonicalThreePrimeSpliceSite.count == 1
+
+
+        // have to rename the new gene
+        assert mrna00001.featureLocations.first().strand == 1
+        assert mrna00001.name == 'GB40772-RAa-00001'
+        assert newGene.name == 'GB40772-RAa'
+        assert newGene.featureLocations.first().strand == 1
+        assert cds00001.featureLocations.first().strand == 1
+        for (exon in exons00001) {
+            assert exon.featureLocations.first().strand == 1
+        }
+
+        assert originalGene.featureLocations.first().strand == -1
+        // sae gene
+        assert originalGene.name == 'GB40772-RA'
+        assert mrna00002.featureLocations.first().strand == -1
+        // sae transcript
+        assert mrna00002.name == 'GB40772-RA-00002'
+        assert cds00002.featureLocations.first().strand == -1
+        for (exon in exons00002) {
+            assert exon.featureLocations.first().strand == -1
+        }
+
+        when: "we flip it back the other way"
+        returnedAfterExonObject = requestHandlingService.flipStrand(commandObject)
+
+        newGene = transcriptService.getGene(mrna00001)
+        cds00001 = transcriptService.getCDS(mrna00001)
+        exons00001 = transcriptService.getSortedExons(mrna00001,true)
+
+        originalGene = transcriptService.getGene(mrna00002)
+        exons00002 = transcriptService.getSortedExons(mrna00002,true)
+        cds00002 = transcriptService.getCDS(mrna00002)
+        childrenArray = mRNAObject00001.getJSONArray(FeatureStringEnum.CHILDREN.value)
+
+
+        then: "we should have no splice sites"
+        log.debug Feature.count
+        assert Feature.count == 4 + 2 + 2 + 1
+        assert returnFeaturesArray.size() == 1
+        assert mRNAObject00001.getString(FeatureStringEnum.NAME.value) == "GB40772-RAa-00001"
+        assert Gene.count == 1
+        assert MRNA.count == 2
+        // we are losing an exon somewhere!
+        assert Exon.count == 4
+        assert CDS.count == 2
+        assert NonCanonicalFivePrimeSpliceSite.count == 0
+        assert NonCanonicalThreePrimeSpliceSite.count == 0
+
+        assert newGene == originalGene
+
+        assert newGene.featureLocations.first().strand == -1
+        assert newGene.name == 'GB40772-RA'
+        assert mrna00001.featureLocations.first().strand == -1
+        assert mrna00001.name == 'GB40772-RA-00001'
+        assert cds00001.featureLocations.first().strand == -1
+        for (exon in exons00001) {
+            assert exon.featureLocations.first().strand == -1
+        }
+
+        assert originalGene.featureLocations.first().strand == -1
+        assert originalGene.name == 'GB40772-RA'
+        assert mrna00002.featureLocations.first().strand == -1
+        assert mrna00002.name == 'GB40772-RA-00002'
+        assert cds00002.featureLocations.first().strand == -1
+        for (exon in exons00002) {
+            assert exon.featureLocations.first().strand == -1
+        }
+
+
     }
 
     void "delete an entire transcript"() {
@@ -547,7 +722,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         }
 
         when: "we get the sorted exons"
-        List<Exon> sortedExons = transcriptService.getSortedExons(MRNA.first(),true)
+        List<Exon> sortedExons = transcriptService.getSortedExons(MRNA.first(), true)
 
         then: "there should be 2 and in the right order"
         assert sortedExons.size() == 2
@@ -565,7 +740,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         JSONArray returnFeaturesArray = returnedAfterExonObject.getJSONArray(FeatureStringEnum.FEATURES.value)
         JSONObject returnMRNA = returnFeaturesArray.getJSONObject(0)
         JSONArray returnedChildren = returnMRNA.getJSONArray(FeatureStringEnum.CHILDREN.value)
-        List<Exon> finalSortedExons = transcriptService.getSortedExons(MRNA.first(),true)
+        List<Exon> finalSortedExons = transcriptService.getSortedExons(MRNA.first(), true)
         Exon lastExon = finalSortedExons.get(2)
 
         then: "we should see that it is removed"
@@ -632,7 +807,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         }
 
         when: "we get the sorted exons"
-        List<Exon> sortedExons = transcriptService.getSortedExons(MRNA.first(),true)
+        List<Exon> sortedExons = transcriptService.getSortedExons(MRNA.first(), true)
 
         then: "there should be 2 and in the right order"
         assert sortedExons.size() == 2
@@ -770,6 +945,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         then: "this one should be long-gone"
         assert undisturbedMRNA != null
         assert bigMRNA != null
+        assert undisturbedMRNA.name == "GB40787-RAa-00001"
         assert undisturbedMRNA.featureLocation.fmax > undisturbedMRNA.featureLocation.fmin
         assert undisturbedMRNA.featureLocation.fmax - undisturbedMRNA.featureLocation.fmin > 0
         assert 0 == MRNA.countByName("GB40788-RA-00001")
@@ -865,7 +1041,6 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         when: "we delete 1 exon and things are great"
         JSONObject removeExonObject1 = JSON.parse(removeExonCommand.replace("@EXON1_UNIQUENAME@", exon1UniqueName)) as JSONObject
         JSONObject deletedObjectCommand = requestHandlingService.deleteFeature(removeExonObject1)
-        println "deleted object command ${deletedObjectCommand as JSON}"
 
         then: "we delete 2 exons and things are okay"
         def allFeatures = Feature.all
@@ -879,7 +1054,6 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         when: "we delete 2 exon and things are great"
         removeExonObject1 = JSON.parse(removeExonCommand2.replace("@EXON2_UNIQUENAME@", exon2UniqueName).replace("@EXON3_UNIQUENAME@", exon3UniqueName)) as JSONObject
         deletedObjectCommand = requestHandlingService.deleteFeature(removeExonObject1)
-        println "deleted object command ${deletedObjectCommand as JSON}"
         allFeatures = Feature.all
 
         then: "Deleting objects"
@@ -2084,7 +2258,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert cdsService.getStopCodonReadThrough(cds).size() == 1
 
         when: "we get the CDS and peptide sequence of the exon 2 and exon 3"
-        def exons = transcriptService.getSortedExons(mrna,false)
+        def exons = transcriptService.getSortedExons(mrna, false)
         String exon2CdsSequence = sequenceService.getSequenceForFeature(exons.get(1), FeatureStringEnum.TYPE_CDS.value)
         String exon3CdsSequence = sequenceService.getSequenceForFeature(exons.get(2), FeatureStringEnum.TYPE_CDS.value)
 
@@ -2105,7 +2279,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         String postiveStrandedTranscript = "{${testCredentials} \"track\":\"Group1.10\",\"features\":[{\"location\":{\"fmin\":1277947,\"fmax\":1278834,\"strand\":1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"mRNA\"},\"name\":\"GB40860-RA\",\"children\":[{\"location\":{\"fmin\":1277947,\"fmax\":1277953,\"strand\":1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1278346,\"fmax\":1278499,\"strand\":1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1278738,\"fmax\":1278834,\"strand\":1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1277947,\"fmax\":1278834,\"strand\":1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"CDS\"}}]}],\"operation\":\"add_transcript\"}"
         String postiveSequenceAlterationInsertion = "{ ${testCredentials} \"track\": \"Group1.10\", \"features\": [ { \"location\": { \"fmin\": 1278631, \"fmax\": 1278631, \"strand\": 1 }, \"type\": {\"name\": \"insertion\", \"cv\": { \"name\":\"sequence\" } }, \"residues\": \"ATCGATA\" } ], \"operation\": \"add_sequence_alteration\" }"
         String setExonBoundaryCommand = "{${testCredentials} \"track\":\"Group1.10\",\"features\":[{\"uniquename\":\"@EXON_UNIQUENAME@\",\"location\":{\"fmin\":1278294,\"fmax\":1278499}}],\"operation\":\"set_exon_boundaries\"}"
-        String setUpstreamSpliceAcceptorCommand ="{ ${testCredentials} \"track\": \"Group1.10\", \"features\": [ { \"uniquename\": \"@EXON_UNIQUENAME@\" } ], \"operation\": \"set_to_upstream_acceptor\"}"
+        String setUpstreamSpliceAcceptorCommand = "{ ${testCredentials} \"track\": \"Group1.10\", \"features\": [ { \"uniquename\": \"@EXON_UNIQUENAME@\" } ], \"operation\": \"set_to_upstream_acceptor\"}"
 
 //        String negativeStrandedTranscript = "{${testCredentials} \"track\":\"Group1.10\",\"features\":[{\"location\":{\"fmin\":1279597,\"fmax\":1282168,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"mRNA\"},\"name\":\"GB40718-RA\",\"children\":[{\"location\":{\"fmin\":1279597,\"fmax\":1279727,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1279801,\"fmax\":1280160,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1280402,\"fmax\":1280585,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1280671,\"fmax\":1280886,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1281086,\"fmax\":1281316,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1281385,\"fmax\":1281516,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1281603,\"fmax\":1281827,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1282152,\"fmax\":1282168,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1279597,\"fmax\":1282168,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"CDS\"}}]}],\"operation\":\"add_transcript\"}"
         String negativeStrandedTranscript = "{${testCredentials} \"track\":\"Group1.10\",\"features\":[{\"location\":{\"fmin\":1365530,\"fmax\":1367665,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"mRNA\"},\"name\":\"GB40713-RA\",\"children\":[{\"location\":{\"fmin\":1367417,\"fmax\":1367665,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1365530,\"fmax\":1366050,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1365530,\"fmax\":1366107,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1366199,\"fmax\":1366304,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1367171,\"fmax\":1367665,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"fmin\":1366050,\"fmax\":1367417,\"strand\":-1},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"CDS\"}}]}],\"operation\":\"add_transcript\"}"
@@ -2116,8 +2290,8 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         requestHandlingService.addTranscript(JSON.parse(postiveStrandedTranscript) as JSONObject)
         List<Exon> exonList = transcriptService.getSortedExons(MRNA.first(), true)
         String exonUniqueName = exonList.get(1).uniqueName
-        setExonBoundaryCommand = setExonBoundaryCommand.replace("@EXON_UNIQUENAME@",exonUniqueName)
-        setUpstreamSpliceAcceptorCommand = setUpstreamSpliceAcceptorCommand.replace("@EXON_UNIQUENAME@",exonUniqueName)
+        setExonBoundaryCommand = setExonBoundaryCommand.replace("@EXON_UNIQUENAME@", exonUniqueName)
+        setUpstreamSpliceAcceptorCommand = setUpstreamSpliceAcceptorCommand.replace("@EXON_UNIQUENAME@", exonUniqueName)
 
         then: "we see the added transcript"
         assert Gene.count == 1
@@ -2142,7 +2316,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert NonCanonicalThreePrimeSpliceSite.count == 0
         assert SequenceAlteration.count == 1
         assert Insertion.count == 1
-        assert MRNA.countByName("GB40860-RA-00001")==1
+        assert MRNA.countByName("GB40860-RA-00001") == 1
 
         when: "we set the exon boundary"
         requestHandlingService.setExonBoundaries(JSON.parse(setExonBoundaryCommand) as JSONObject)
@@ -2156,10 +2330,10 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert NonCanonicalThreePrimeSpliceSite.count == 1
         assert SequenceAlteration.count == 1
         assert Insertion.count == 1
-        assert MRNA.countByName("GB40860-RA-00001")==1
+        assert MRNA.countByName("GB40860-RA-00001") == 1
 
         when: "we set the upstream splice acceptor"
-        requestHandlingService.setAcceptor(JSON.parse(setUpstreamSpliceAcceptorCommand) as JSONObject,true)
+        requestHandlingService.setAcceptor(JSON.parse(setUpstreamSpliceAcceptorCommand) as JSONObject, true)
 
         then: "acceptor does not go to a canonical acceptor"
         assert Gene.count == 1
@@ -2170,17 +2344,17 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert NonCanonicalThreePrimeSpliceSite.count == 0
         assert SequenceAlteration.count == 1
         assert Insertion.count == 1
-        assert MRNA.countByName("GB40860-RA-00001")==1
+        assert MRNA.countByName("GB40860-RA-00001") == 1
 
         when: "we add the negative transcript"
         requestHandlingService.addTranscript(JSON.parse(negativeStrandedTranscript) as JSONObject)
 
         then: "assert we have one"
-        assert MRNA.countByName("GB40713-RA-00001")==1
+        assert MRNA.countByName("GB40713-RA-00001") == 1
         assert Gene.count == 2
         assert CDS.count == 2
         assert MRNA.count == 2
-        assert Exon.count == 3+3
+        assert Exon.count == 3 + 3
         assert NonCanonicalFivePrimeSpliceSite.count == 0
         assert NonCanonicalThreePrimeSpliceSite.count == 0
         assert SequenceAlteration.count == 1
@@ -2190,11 +2364,11 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         requestHandlingService.addSequenceAlteration(JSON.parse(negativeStrandedSequenceInsertion) as JSONObject)
 
         then: "we should only have the insertion exist"
-        assert MRNA.countByName("GB40713-RA-00001")==1
+        assert MRNA.countByName("GB40713-RA-00001") == 1
         assert Gene.count == 2
         assert CDS.count == 2
         assert MRNA.count == 2
-        assert Exon.count == 3+3
+        assert Exon.count == 3 + 3
         assert NonCanonicalFivePrimeSpliceSite.count == 0
         assert NonCanonicalThreePrimeSpliceSite.count == 0
         assert SequenceAlteration.count == 2
@@ -2202,7 +2376,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
     }
 
     void "when a setTranslationStart action is performed on a transcript, there should be a check of overlapping isoforms"() {
-        
+
         given: "Two transcripts having separate parent gene"
         String transcript1 = "{ ${testCredentials} \"features\":[{\"children\":[{\"location\":{\"strand\":-1,\"fmin\":958639,\"fmax\":959315},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":953072,\"fmax\":953075},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":949590,\"fmax\":950737},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":949590,\"fmax\":950830},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":951050,\"fmax\":951116},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":951349,\"fmax\":951703},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":952162,\"fmax\":952606},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":952865,\"fmax\":953075},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":958639,\"fmax\":959315},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":950737,\"fmax\":953072},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"CDS\"}}],\"name\":\"GB40735-RA\",\"location\":{\"strand\":-1,\"fmin\":949590,\"fmax\":959315},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"mRNA\"}}],\"track\":\"Group1.10\",\"operation\":\"add_transcript\"}"
         String setTranslationStartForTranscript1 = "{${testCredentials} \"features\":[{\"uniquename\":\"@UNIQUENAME@\",\"location\":{\"fmin\":959297}}],\"track\":\"Group1.10\",\"operation\":\"set_translation_start\"}"
@@ -2211,26 +2385,26 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
 
         when: "we add transcript1"
         JSONObject addTranscript1ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript1) as JSONObject).get("features")
-        
+
         then: "we should have 1 Gene and 1 MRNA"
         assert Gene.count == 1
         assert MRNA.count == 1
         String transcript1UniqueName = addTranscript1ReturnObject.uniquename
         CDS initialCDS = transcriptService.getCDS(MRNA.findByUniqueName(transcript1UniqueName))
         int initialCDSLength = initialCDS.featureLocation.fmax - initialCDS.featureLocation.fmin
-        
+
         when: "we set translation start for transcript1"
         setTranslationStartForTranscript1 = setTranslationStartForTranscript1.replace("@UNIQUENAME@", transcript1UniqueName)
-        JSONObject setTranslationStartTranscript1ReturnObject  = requestHandlingService.setTranslationStart(JSON.parse(setTranslationStartForTranscript1) as JSONObject).get("features")
-        
+        JSONObject setTranslationStartTranscript1ReturnObject = requestHandlingService.setTranslationStart(JSON.parse(setTranslationStartForTranscript1) as JSONObject).get("features")
+
         then: "we should see a difference in CDS length for transcript1"
         CDS alteredCDS = transcriptService.getCDS(MRNA.findByUniqueName(transcript1UniqueName))
         int alteredCDSLength = alteredCDS.featureLocation.fmax - alteredCDS.featureLocation.fmin
         assert initialCDSLength != alteredCDSLength
-        
+
         when: "we add transcript2"
         JSONObject addTranscript2ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript2) as JSONObject).get("features")
-        
+
         then: "we should have 2 Genes and 2 MRNAs"
         assert Gene.count == 2
         assert MRNA.count == 2
@@ -2238,31 +2412,31 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         String transcript2UniqueName = addTranscript2ReturnObject.uniquename
         CDS initialCDS2 = transcriptService.getCDS(MRNA.findByUniqueName(transcript2UniqueName))
         int initialCDSLength2 = initialCDS2.featureLocation.fmax - initialCDS2.featureLocation.fmin
-        
+
         when: "we set translation start for transcript2"
         setTranslationStartForTranscript2 = setTranslationStartForTranscript2.replace("@UNIQUENAME@", transcript2UniqueName)
         JSONObject setTranslationStartTranscript2ReturnObject = requestHandlingService.setTranslationStart(JSON.parse(setTranslationStartForTranscript2) as JSONObject).get("features")
-        
+
         then: "we should see a difference in CDS length for transcript2"
         String transcript2ModifiedName = setTranslationStartTranscript2ReturnObject.name
         CDS alteredCDS2 = transcriptService.getCDS(MRNA.findByUniqueName(transcript2UniqueName))
         int alteredCDSLength2 = alteredCDS2.fmax - alteredCDS2.fmin
         assert initialCDSLength2 != alteredCDSLength2
-        
+
         then: "isoform overlap check should have occured, thus transcript1 and transcript2 shares the same parent"
         Gene transcript1Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript1UniqueName))
         Gene transcript2Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript2UniqueName))
         assert transcript1Gene.uniqueName == transcript2Gene.uniqueName
-        
+
         then: "Name for transcript2 should have changed, in light of the new CDS overlap"
         assert transcript2Name != transcript2ModifiedName
-        
+
         then: "the previous gene of transcript2 doesn't exist as it is deleted when it has no connected child features"
         Gene.count == 1
-    }   
-    
+    }
+
     void "when a setTranslationEnd action is performed on a transcript, there should be a check for overlapping isoforms"() {
-        
+
         given: "two transcripts having separate parent gene"
         String transcript1 = "{${testCredentials} \"features\":[{\"children\":[{\"location\":{\"strand\":1,\"fmin\":592678,\"fmax\":592731},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":1,\"fmin\":593507,\"fmax\":594164},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":1,\"fmin\":588729,\"fmax\":588910},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":1,\"fmin\":592526,\"fmax\":592731},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":1,\"fmin\":593507,\"fmax\":594164},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":1,\"fmin\":588729,\"fmax\":592678},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"CDS\"}}],\"name\":\"GB40820-RA\",\"location\":{\"strand\":1,\"fmin\":588729,\"fmax\":594164},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"mRNA\"}}],\"track\":\"Group1.10\",\"operation\":\"add_transcript\"}"
         String setTranslationStartForTranscript1 = "{${testCredentials} \"features\":[{\"uniquename\":\"@UNIQUENAME@\",\"location\":{\"fmin\":593550}}],\"track\":\"Group1.10\",\"operation\":\"set_translation_start\"}"
@@ -2274,28 +2448,28 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
 
         when: "we add transcript1"
         JSONObject addTranscript1ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript1) as JSONObject).get("features")
-        
+
         then: "we should have 1 Gene and 1 MRNA"
         assert Gene.count == 1
         assert MRNA.count == 1
         String transcript1UniqueName = addTranscript1ReturnObject.uniquename
         CDS initialCDS = transcriptService.getCDS(MRNA.findByUniqueName(transcript1UniqueName))
         int initialCDSLength = initialCDS.featureLocation.fmax - initialCDS.featureLocation.fmin
-        
+
         when: "we set translation start and end for transcript1"
         setTranslationStartForTranscript1 = setTranslationStartForTranscript1.replace("@UNIQUENAME@", transcript1UniqueName)
         setTranslationEndForTranscript1 = setTranslationEndForTranscript1.replace("@UNIQUENAME@", transcript1UniqueName)
         requestHandlingService.setTranslationStart(JSON.parse(setTranslationStartForTranscript1) as JSONObject)
         requestHandlingService.setTranslationEnd(JSON.parse(setTranslationEndForTranscript1) as JSONObject)
-        
+
         then: "we should see a difference in CDS length for transcript 1"
         CDS alteredCDS = transcriptService.getCDS(MRNA.findByUniqueName(transcript1UniqueName))
         int alteredCDSLength = alteredCDS.featureLocation.fmax - alteredCDS.featureLocation.fmin
         assert initialCDSLength != alteredCDSLength
-        
+
         when: "we add transcript2"
         JSONObject addTranscript2ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript2) as JSONObject).get("features")
-        
+
         then: "we should have 2 Genes and 2 MRNAs"
         assert Gene.count == 2
         assert MRNA.count == 2
@@ -2303,22 +2477,22 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         String transcript2UniqueName = addTranscript2ReturnObject.uniquename
         CDS transcript2InitialCDS = transcriptService.getCDS(MRNA.findByUniqueName(transcript2UniqueName))
         int transcript2InitialCDSLength = transcript2InitialCDS.featureLocation.fmax - transcript2InitialCDS.featureLocation.fmin
-        
+
         when: "we set translation start and end for transcript2"
         setTranslationStartForTranscript2 = setTranslationStartForTranscript2.replace("@UNIQUENAME@", transcript2UniqueName)
         setTranslationEndForTranscript2 = setTranslationEndForTranscript2.replace("@UNIQUENAME@", transcript2UniqueName)
         requestHandlingService.setTranslationStart(JSON.parse(setTranslationStartForTranscript2) as JSONObject)
         JSONObject setTranslationEndTranscript2ReturnObject = requestHandlingService.setTranslationEnd(JSON.parse(setTranslationEndForTranscript2) as JSONObject).get("features")
-        
+
         then: "isoform overlap check should have occured, thus transcript1 and transcript2 now share the same parent gene"
         String transcript2ModifiedName = setTranslationEndTranscript2ReturnObject.name
         Gene transcript1Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript1UniqueName))
         Gene transcript2Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript2UniqueName))
         assert transcript1Gene.uniqueName == transcript2Gene.uniqueName
-        
+
         then: "Name for transcript2 should have changed, in light of the new CDS overlap"
         assert transcript2Name != transcript2ModifiedName
-        
+
         then: "the previous gene of transcript2 doesn't exist as it is deleted when it has no connected child features"
         Gene.count == 1
     }
@@ -2333,22 +2507,22 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
 
         when: "we add transcript1"
         JSONObject addTranscript1ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript1) as JSONObject).get("features")
-        
+
         then: "we should have 1 Gene and 1 MRNA"
         assert Gene.count == 1
         assert MRNA.count == 1
         String transcript1Name = addTranscript1ReturnObject.name
         String transcript1UniqueName = addTranscript1ReturnObject.uniquename
-        
+
         when: "we add transcript2"
         JSONObject addTranscript2ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript2) as JSONObject).get("features")
-        
+
         then: "we should have 1 Gene and 2 MRNA"
         assert Gene.count == 1
         assert MRNA.count == 2
         String transcript2Name = addTranscript2ReturnObject.name
         String transcript2UniqueName = addTranscript2ReturnObject.uniquename
-        
+
 //        when: "we set exon boundary of transcript2"
 //        Exon exon = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript2UniqueName))[0]
 //        setExonBoundary1ForTranscript2 = setExonBoundary1ForTranscript2.replace("@UNIQUENAME@", exon.uniqueName)
@@ -2367,108 +2541,108 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
 //        assert sameBaseName
 
         when: "we set exon boundary of transcript2"
-        Exon exon = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript2UniqueName),true)[0]
+        Exon exon = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript2UniqueName), true)[0]
         setExonBoundary2ForTranscript2 = setExonBoundary2ForTranscript2.replace("@UNIQUENAME@", exon.uniqueName)
         JSONObject setExonBoundary2ForTranscript2ReturnObject = requestHandlingService.setExonBoundaries(JSON.parse(setExonBoundary2ForTranscript2) as JSONObject).get("features")
         String modifiedTranscript2Name = setExonBoundary2ForTranscript2ReturnObject.name
         String modifiedTranscript2UniqueName = setExonBoundary2ForTranscript2ReturnObject.uniquename
-        
+
         then: "transcript2 should NOT be an isoform of transcript1"
         Gene updatedTranscript1Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript1UniqueName))
         Gene updatedTranscript2Gene = transcriptService.getGene(MRNA.findByUniqueName(modifiedTranscript2UniqueName))
         assert updatedTranscript1Gene.uniqueName != updatedTranscript2Gene.uniqueName
     }
-    
+
     void "when a flipStrand action is performed on a transcript, there should be a check for overlapping isoforms"() {
-        
+
         given: "A transcript"
         String transcript = "{${testCredentials} \"features\":[{\"children\":[{\"location\":{\"strand\":1,\"fmin\":403882,\"fmax\":404044},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":1,\"fmin\":405031,\"fmax\":405154},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":1,\"fmin\":403882,\"fmax\":405154},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"CDS\"}}],\"name\":\"GB40812-RA\",\"location\":{\"strand\":1,\"fmin\":403882,\"fmax\":405154},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"mRNA\"}}],\"track\":\"Group1.10\",\"operation\":\"add_transcript\"}"
         String flipStrandForTranscript = "{${testCredentials} \"features\":[{\"uniquename\":\"@UNIQUENAME@\"}],\"track\":\"Group1.10\",\"operation\":\"flip_strand\"}"
 
         when: "we add the transcript"
         JSONObject addTranscript1ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript) as JSONObject).get("features")
-        
+
         then: "we have 1 Gene and 1 MRNA"
         assert Gene.count == 1
         assert MRNA.count == 1
         String transcript1Name = addTranscript1ReturnObject.name
         String transcript1UniqueName = addTranscript1ReturnObject.uniquename
-        
+
         when: "we move the transcript to oppposite strand"
         String flipStrandForTranscript1 = flipStrandForTranscript.replace("@UNIQUENAME@", transcript1UniqueName)
         JSONObject flipStrandForTranscript1ReturnObject = requestHandlingService.flipStrand(JSON.parse(flipStrandForTranscript1) as JSONObject).get("features")
-        
+
         then: "the transcript should be on the negative strand"
         String flippedTranscript1UniqueName = flipStrandForTranscript1ReturnObject.uniquename
         assert MRNA.findByUniqueName(flippedTranscript1UniqueName).strand == Strand.NEGATIVE.value
-        
+
         when: "we add the same transcript again"
         JSONObject addTranscript2ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript) as JSONObject).get("features")
-        
+
         then: "we have 2 Genes and 2 MRNA"
         assert Gene.count == 2
         assert MRNA.count == 2
         String transcript2Name = addTranscript2ReturnObject.name
         String transcript2UniqueName = addTranscript2ReturnObject.uniquename
-        
+
         when: "we move transcript2 to the opposite strand"
         String flipStrandForTranscript2 = flipStrandForTranscript.replace("@UNIQUENAME@", transcript2UniqueName)
         JSONObject flipStrandForTranscript2ReturnObject = requestHandlingService.flipStrand(JSON.parse(flipStrandForTranscript2)).get("features")
-        
+
         then: "the transcript should be on the negative strand"
         String flippedTranscript2UniqueName = flipStrandForTranscript2ReturnObject.uniquename
         assert MRNA.findByUniqueName(flippedTranscript2UniqueName).strand == Strand.NEGATIVE.value
-        
+
         then: "transcript2 is now an isoform of transcript1"
         Gene transcript1Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript1UniqueName))
         Gene transcript2Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript2UniqueName))
         assert transcript1Gene.uniqueName == transcript2Gene.uniqueName
     }
-    
+
     void "when a mergeExons action is performed on a transcript, there should be a check for overlapping isoforms"() {
-        
+
         given: "3 transcripts that overlap but aren't isoforms of each other"
         String transcript = "{${testCredentials} \"features\":[{\"children\":[{\"location\":{\"strand\":1,\"fmin\":729928,\"fmax\":730010},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":1,\"fmin\":730296,\"fmax\":730304},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":1,\"fmin\":729928,\"fmax\":730304},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"CDS\"}}],\"name\":\"GB40827-RA\",\"location\":{\"strand\":1,\"fmin\":729928,\"fmax\":730304},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"mRNA\"}}],\"track\":\"Group1.10\",\"operation\":\"add_transcript\"}"
         String mergeExons = "{${testCredentials} \"features\":[{\"uniquename\":\"@UNIQUENAME1@\"},{\"uniquename\":\"@UNIQUENAME2@\"}],\"track\":\"Group1.10\",\"operation\":\"merge_exons\"}"
 
         when: "we add transcript1"
         JSONObject addTranscript1ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript) as JSONObject).get("features")
-        
+
         then: "we should have 1 Gene and 1 MRNA"
         assert Gene.count == 1
         assert MRNA.count == 1
         assert Exon.count == 2
         String transcript1UniqueName = addTranscript1ReturnObject.uniquename
-        
+
         when: "we merge exon 1 with exon2 of transcript1"
-        String exon1UniqueName = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript1UniqueName),true)[0].uniqueName
-        String exon2UniqueName = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript1UniqueName),true)[1].uniqueName
+        String exon1UniqueName = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript1UniqueName), true)[0].uniqueName
+        String exon2UniqueName = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript1UniqueName), true)[1].uniqueName
         String mergeExonsForTranscript1 = mergeExons.replace("@UNIQUENAME1@", exon1UniqueName).replace("@UNIQUENAME2@", exon2UniqueName)
         JSONObject mergeExonsForTranscript1ReturnObject = requestHandlingService.mergeExons(JSON.parse(mergeExonsForTranscript1) as JSONObject)
-        
+
         then: "we have a transcript that has only 1 exon"
-        assert transcriptService.getSortedExons(MRNA.findByUniqueName(transcript1UniqueName),true).size() == 1
-        
+        assert transcriptService.getSortedExons(MRNA.findByUniqueName(transcript1UniqueName), true).size() == 1
+
         when: "now we add transcript2"
         JSONObject addTranscript2ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript) as JSONObject).get("features")
-        
+
         then: "we should have 2 Genes and 2 MRNAs"
         assert Gene.count == 2
         assert MRNA.count == 2
         assert Exon.count == 3
         String transcript2UniqueName = addTranscript2ReturnObject.uniquename
-        
+
         then: "even though transcript2 is the same as transcript1 (before merge), they are not considered as isoforms of each other"
         Gene transcript1Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript1UniqueName))
         Gene transcript2Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript2UniqueName))
         assert transcript1Gene.uniqueName != transcript2Gene.uniqueName
-        
+
         when: "we merge exon 1 with exon2 of transcript2"
-        exon1UniqueName = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript2UniqueName),true)[0].uniqueName
-        exon2UniqueName = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript2UniqueName),true)[1].uniqueName
+        exon1UniqueName = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript2UniqueName), true)[0].uniqueName
+        exon2UniqueName = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript2UniqueName), true)[1].uniqueName
         String mergeExonsForTranscript2 = mergeExons.replace("@UNIQUENAME1@", exon1UniqueName).replace("@UNIQUENAME2@", exon2UniqueName)
         JSONObject mergeExonsForTranscript2ReturnObject = requestHandlingService.mergeExons(JSON.parse(mergeExonsForTranscript2) as JSONObject).get("features")
-        
+
         then: "transcript2 should be an isoform of transcript1"
         Gene updatedTranscript2Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript2UniqueName))
         assert transcript1Gene.uniqueName == updatedTranscript2Gene.uniqueName
@@ -2476,9 +2650,9 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert MRNA.count == 2
         assert MRNA.count == 2
     }
-    
+
     void "when a deleteFeature action is performed on a transcript, there should be a check for overlapping isoforms"() {
-        
+
         given: "two transcripts that are isoforms of each other"
         String transcript1 = "{${testCredentials} \"features\":[{\"children\":[{\"location\":{\"strand\":-1,\"fmin\":787455,\"fmax\":787740},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":871534,\"fmax\":871600},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":871708,\"fmax\":871861},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":873893,\"fmax\":874091},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":874214,\"fmax\":874252},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":874336,\"fmax\":874787},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":874910,\"fmax\":875076},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":787455,\"fmax\":788349},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":789768,\"fmax\":790242},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":791007,\"fmax\":792220},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":793652,\"fmax\":793876},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":806935,\"fmax\":807266},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":828378,\"fmax\":829272},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":847144,\"fmax\":847365},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":859150,\"fmax\":859261},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":871519,\"fmax\":871600},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":871708,\"fmax\":871861},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":873893,\"fmax\":874091},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":874214,\"fmax\":874252},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":874336,\"fmax\":874787},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":874910,\"fmax\":875076},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":787740,\"fmax\":871534},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"CDS\"}}],\"name\":\"au8.g325.t1\",\"location\":{\"strand\":-1,\"fmin\":787455,\"fmax\":875076},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"mRNA\"}}],\"track\":\"Group1.10\",\"operation\":\"add_transcript\"}"
         String transcript2 = "{${testCredentials} \"features\":[{\"children\":[{\"location\":{\"strand\":-1,\"fmin\":845782,\"fmax\":845798},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":847144,\"fmax\":847278},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"exon\"}},{\"location\":{\"strand\":-1,\"fmin\":845782,\"fmax\":847278},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"CDS\"}}],\"name\":\"GB40739-RA\",\"location\":{\"strand\":-1,\"fmin\":845782,\"fmax\":847278},\"type\":{\"cv\":{\"name\":\"sequence\"},\"name\":\"mRNA\"}}],\"track\":\"Group1.10\",\"operation\":\"add_transcript\"}"
@@ -2487,7 +2661,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         when: "we add transcript1 and transcript2"
         JSONObject addTranscript1ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript1) as JSONObject).get("features")
         JSONObject addTranscript2ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript2) as JSONObject).get("features")
-        
+
         then: "we have 1 Gene and 2 MRNAs"
         assert Gene.count == 1
         assert MRNA.count == 2
@@ -2495,10 +2669,10 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         String transcript2UniqueName = addTranscript2ReturnObject.uniquename
 
         when: "we delete the first exon of transcript2"
-        Exon firstExonOfTranscript2 = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript2UniqueName),true)[0]
+        Exon firstExonOfTranscript2 = transcriptService.getSortedExons(MRNA.findByUniqueName(transcript2UniqueName), true)[0]
         String deleteExonOfTranscript2 = deleteExon.replace("@UNIQUENAME@", firstExonOfTranscript2.uniqueName)
         JSONObject deleteExonOfTranscript2ReturnObject = requestHandlingService.deleteFeature(JSON.parse(deleteExonOfTranscript2) as JSONObject).get("features")
-        
+
         then: "transcript1 and transcript2 are no longer isoforms of each other"
         Gene transcript1Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript1UniqueName))
         Gene transcript2Gene = transcriptService.getGene(MRNA.findByUniqueName(transcript2UniqueName))
@@ -2506,7 +2680,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert Gene.count == 2
         assert MRNA.count == 2
     }
-    
+
     void "when two transcripts become isoforms of each others, the properties of their respective parent gene should be preserved in the merged gene"() {
 
         given: "Two transcripts that overlap but are not isoforms of each other"
@@ -2526,7 +2700,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         JSONObject addTranscript1ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript1) as JSONObject).get("features")
         JSONObject addTranscript2ReturnObject = requestHandlingService.addTranscript(JSON.parse(transcript2) as JSONObject).get("features")
 
-        then:"we should see 2 Genes and 2 MRNAs"
+        then: "we should see 2 Genes and 2 MRNAs"
         assert Gene.count == 2
         assert MRNA.count == 2
         String transcript1UniqueName = addTranscript1ReturnObject.uniquename
@@ -2542,7 +2716,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         String addPublicationForTranscript1 = addPublicationOperation.replace("@UNIQUENAME@", initialGeneForTranscript1.uniqueName).replace("@PUBMED_ACCESSION@", "8379243")
         String addGeneOntologyForTranscript1 = addGeneOntologyOperation.replace("@UNIQUENAME@", initialGeneForTranscript1.uniqueName).replace("@GO_ACCESSION@", "GO:1902009")
         String addCommentForTranscript1 = addCommentOperation.replace("@UNIQUENAME@", initialGeneForTranscript1.uniqueName).replace("@COMMENT", "This gene is a test gene and created solely for the purpose of this test")
-        
+
         requestHandlingService.addNonPrimaryDbxrefs(JSON.parse(addDbxref1ForTranscript1) as JSONObject)
         requestHandlingService.addNonPrimaryDbxrefs(JSON.parse(addDbxref2ForTranscript1) as JSONObject)
         requestHandlingService.addNonReservedProperties(JSON.parse(addAttribute1ForTranscript1) as JSONObject)
@@ -2550,11 +2724,11 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         requestHandlingService.addNonPrimaryDbxrefs(JSON.parse(addPublicationForTranscript1) as JSONObject)
         requestHandlingService.addNonPrimaryDbxrefs(JSON.parse(addGeneOntologyForTranscript1) as JSONObject)
         requestHandlingService.addComments(JSON.parse(addCommentForTranscript1) as JSONObject)
-        
+
         then: "we should have 3 FeatureProperty entities and 4 DBXref entities"
         assert FeatureProperty.count == 3
         assert DBXref.count == 4
-        
+
         when: "we add properties to transcript2"
         String addDbxref1ForTranscript2 = addDbxrefOperation.replace("@UNIQUENAME@", initialGeneForTranscript2.uniqueName).replace("@XREF_DB@", "NCBI").replace("@XREF_ACCESSION@", "83924623")
         String addDbxref2ForTranscript2 = addDbxrefOperation.replace("@UNIQUENAME@", initialGeneForTranscript2.uniqueName).replace("@XREF_DB@", "Ensembl").replace("@XREF_ACCESSION@", "ENSG000000000112")
@@ -2571,7 +2745,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         requestHandlingService.addNonPrimaryDbxrefs(JSON.parse(addPublicationForTranscript2) as JSONObject)
         requestHandlingService.addNonPrimaryDbxrefs(JSON.parse(addGeneOntologyForTranscript2) as JSONObject)
         requestHandlingService.addComments(JSON.parse(addCommentForTranscript2) as JSONObject)
-        
+
         then: "we should have 6 FeatureProperty entities and 8 DBXref entities"
         assert FeatureProperty.count == 6
         assert DBXref.count == 8
@@ -2581,11 +2755,11 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         def fpInitialGeneForTranscript2 = initialGeneForTranscript2.getFeatureProperties()
         def combinedxRefs = (xRefInitialGeneForTranscript1 + xRefInitialGeneForTranscript2).sort()
         def combinedFeatureProperties = (fpInitialGeneForTranscript1 + fpInitialGeneForTranscript2).sort()
-        
+
         when: "we set exon boundary of transcript2"
         setTranslationStartForTranscript2 = setTranslationStartForTranscript2.replace("@UNIQUENAME@", transcript2UniqueName)
         requestHandlingService.setTranslationStart(JSON.parse(setTranslationStartForTranscript2) as JSONObject)
-        
+
         then: "transcript1 and transcript2 should be isoforms of each other and they should have the same parent gene"
         assert Gene.count == 1
         assert MRNA.count == 2
@@ -2594,7 +2768,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         Gene finalGeneForTranscript1 = transcriptService.getGene(MRNA.findByUniqueName(transcript1UniqueName))
         Gene finalGeneForTranscript2 = transcriptService.getGene(MRNA.findByUniqueName(transcript2UniqueName))
         assert finalGeneForTranscript1.uniqueName == finalGeneForTranscript2.uniqueName
-        
+
         then: "all properties of the parent gene for transcript2, before setTranslationStart, should now be properties of current shared gene"
         def xRefForMergedGene = finalGeneForTranscript1.getFeatureDBXrefs()
         def fpForMergedGene = finalGeneForTranscript1.getFeatureProperties()
@@ -2619,10 +2793,10 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert Exon.count == 4
 
         when: "we split a transcript"
-        def mrnas = MRNA.all.sort{ a,b -> a.name <=> b.name }
+        def mrnas = MRNA.all.sort { a, b -> a.name <=> b.name }
         Transcript transcript1 = mrnas[0]
         Transcript transcript2 = mrnas[1]
-        ArrayList<Exon> exonList = transcriptService.getSortedExons(transcript2,false)
+        ArrayList<Exon> exonList = transcriptService.getSortedExons(transcript2, false)
         String exon1UniqueName = exonList.get(0).uniqueName
         String exon2UniqueName = exonList.get(1).uniqueName
 
@@ -2636,7 +2810,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert CDS.count == 3
 
         when: "we merge the sub transcripts"
-        mrnas = MRNA.all.sort{ a,b -> a.name <=> b.name }
+        mrnas = MRNA.all.sort { a, b -> a.name <=> b.name }
         transcript1 = mrnas[0]
         transcript2 = mrnas[1]
         Transcript transcript3 = mrnas[2]
@@ -2670,7 +2844,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         when: "we split the transcript"
         Transcript transcript1 = MRNA.all[0]
         Transcript transcript2 = MRNA.all[1]
-        ArrayList<Exon> exonList = transcriptService.getSortedExons(transcript2,false)
+        ArrayList<Exon> exonList = transcriptService.getSortedExons(transcript2, false)
         String exon1UniqueName = exonList.get(0).uniqueName
         String exon2UniqueName = exonList.get(1).uniqueName
 
@@ -2731,7 +2905,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         when: "we split the transcript"
         Transcript transcript1 = MRNA.all[0]
         Transcript transcript2 = MRNA.all[1]
-        ArrayList<Exon> exonList = transcriptService.getSortedExons(transcript2,false)
+        ArrayList<Exon> exonList = transcriptService.getSortedExons(transcript2, false)
         String exon1UniqueName = exonList.get(0).uniqueName
         String exon2UniqueName = exonList.get(1).uniqueName
 
@@ -2803,7 +2977,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert Gene.count == 2
         assert MRNA.count == 3
 
-        def genes = Gene.all.sort{ a,b -> a.name <=> b.name }
+        def genes = Gene.all.sort { a, b -> a.name <=> b.name }
         assert transcriptService.getTranscripts(genes[0]).size() == 2
         assert transcriptService.getTranscripts(genes[1]).size() == 1
 
@@ -2823,7 +2997,6 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert transcriptService.getTranscripts(genes[1]).size() == 2
 
 
-
     }
 
     void "when we merge two transcript where transcript1 is not the 5' most transcript, isoform overlap should be applied consistently"() {
@@ -2858,7 +3031,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         assert Gene.count == 2
         assert MRNA.count == 3
 
-        List<Gene> geneList = Gene.all.sort {a,b ->
+        List<Gene> geneList = Gene.all.sort { a, b ->
             a.fmin <=> b.fmin
         }
         assert transcriptService.getTranscripts(geneList.get(0)).size() == 1
@@ -3037,8 +3210,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         parentGene.featureProperties.each { fp ->
             if (fp instanceof Comment) {
                 assert fp.value == "This is a test gene"
-            }
-            else {
+            } else {
                 String key = fp.tag + ":" + fp.value
                 assert expectedFeaturePropertiesForGene.indexOf(key) != -1
                 expectedFeaturePropertiesForGene.remove(key)
@@ -3058,8 +3230,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         transcript.featureProperties.each { fp ->
             if (fp instanceof Comment) {
                 assert fp.value == "This is a test isoform"
-            }
-            else {
+            } else {
                 String key = fp.tag + ":" + fp.value
                 assert expectedFeaturePropertiesForTranscript.indexOf(key) != -1
                 expectedFeaturePropertiesForTranscript.remove(key)
@@ -3089,8 +3260,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         repeatRegionFeature.featureProperties.each { fp ->
             if (fp instanceof Comment) {
                 assert fp.value == "This is a test isoform"
-            }
-            else {
+            } else {
                 String key = fp.tag + ":" + fp.value
                 assert expectedFeaturePropertiesForRepeatRegion.indexOf(key) != -1
                 expectedFeaturePropertiesForRepeatRegion.remove(key)
@@ -3155,9 +3325,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
 
         then: "we should see the transcript, its gene and gene metadata, as provided by the JSON"
         Transcript transcript = Transcript.all.get(0)
-        println "Transcript: ${transcript}"
         Gene gene = transcriptService.getGene(transcript)
-        println "Gene: ${gene}"
 
         assert gene.name == "GB40861-RA"
         assert gene.symbol == "PSGN1"
@@ -3260,8 +3428,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
             if (dbxref.getJSONObject(FeatureStringEnum.DB.value).name == "PMID") {
                 assert dbxref.accession == "7304214"
                 seenDbxrefs.add("PMID:" + dbxref.accession)
-            }
-            else if (dbxref.getJSONObject(FeatureStringEnum.DB.value).name == "NCBI") {
+            } else if (dbxref.getJSONObject(FeatureStringEnum.DB.value).name == "NCBI") {
                 assert dbxref.accession == "98127312"
                 seenDbxrefs.add("NCBI:" + dbxref.accession)
             }
@@ -3272,17 +3439,14 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
             if (prop.name == "score") {
                 assert prop.value == "2362.3466"
                 seenProps.add("score:" + prop.value)
-            }
-            else if (prop.name == "type") {
+            } else if (prop.name == "type") {
                 assert prop.value == "protein coding gene"
                 seenProps.add("type:" + prop.value)
-            }
-            else if (prop.name == "comment") {
+            } else if (prop.name == "comment") {
                 if (prop.value.contains('test')) {
                     assert prop.value == "PCG1 is a gene for test purposes"
                     seenProps.add("comment:" + prop.value)
-                }
-                else {
+                } else {
                     assert prop.value == "PCG1 is a protein coding gene"
                     seenProps.add("comment:" + prop.value)
                 }
@@ -3301,8 +3465,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
                 if (dbxref.getJSONObject(FeatureStringEnum.DB.value).name == "PMID") {
                     assert dbxref.accession == "8723042"
                     seenDbxrefs.add("PMID:" + dbxref.accession)
-                }
-                else if (dbxref.getJSONObject(FeatureStringEnum.DB.value).name == "NCBI") {
+                } else if (dbxref.getJSONObject(FeatureStringEnum.DB.value).name == "NCBI") {
                     assert dbxref.accession == "XM_1239124.2"
                     seenDbxrefs.add("NCBI:" + dbxref.accession)
                 }
@@ -3313,17 +3476,14 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
                 if (prop.name == "score") {
                     assert prop.value == "1234.8532"
                     seenProps.add("score:" + prop.value)
-                }
-                else if (prop.name == "type") {
+                } else if (prop.name == "type") {
                     assert prop.value == "protein coding isoform"
                     seenProps.add("type:" + prop.value)
-                }
-                else if (prop.name == "comment") {
+                } else if (prop.name == "comment") {
                     if (prop.value.contains('test')) {
                         assert prop.value == "PCG1-2A is an isoform for test purposes"
                         seenProps.add("comment:" + prop.value)
-                    }
-                    else {
+                    } else {
                         assert prop.value == "PCG1-2A is a protein coding isoform"
                         seenProps.add("comment:" + prop.value)
                     }
@@ -3363,14 +3523,12 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
                                 expectedDbxrefForGene.remove(it)
                             }
                             assert expectedDbxrefForGene.size() == 0
-                        }
-                        else if (attributeKey == "Note") {
+                        } else if (attributeKey == "Note") {
                             valueList.each {
                                 expectedNoteForGene.remove(it)
                             }
                             assert expectedNoteForGene.size() == 0
-                        }
-                        else {
+                        } else {
                             assert attributeKey != "comment"
                             if (expectedPropertiesForGene.contains(attributeKey + "=" + attributeValue)) {
                                 expectedPropertiesForGene.remove(attributeKey + "=" + attributeValue)
@@ -3378,8 +3536,7 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
                         }
                     }
                     assert expectedPropertiesForGene.size() == 0
-                }
-                else if (type == "mRNA") {
+                } else if (type == "mRNA") {
                     gffAttributes.each { attribute ->
                         def (attributeKey, attributeValue) = attribute.split("=")
                         def valueList = attributeValue.split(",")
@@ -3388,14 +3545,12 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
                                 expectedDbxrefForTranscript.remove(it)
                             }
                             assert expectedDbxrefForTranscript.size() == 0
-                        }
-                        else if (attributeKey == "Note") {
+                        } else if (attributeKey == "Note") {
                             valueList.each {
                                 expectedNoteForTranscript.remove(it)
                             }
                             assert expectedNoteForTranscript.size() == 0
-                        }
-                        else {
+                        } else {
                             assert attributeKey != "comment"
                             if (expectedPropertiesForTranscript.contains(attributeKey + "=" + attributeValue)) {
                                 expectedPropertiesForTranscript.remove(attributeKey + "=" + attributeValue)
@@ -3520,16 +3675,13 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
         then: "we should get a JSON representation of the features"
         JSONArray outputJsonArray = JSON.parse(process.text) as JSONArray
         for (int i = 0; i < outputJsonArray.size(); i++) {
-            println outputJsonArray.getJSONObject(i).toString()
             if (outputJsonArray.getJSONObject(i).has("addFeature")) {
                 String inputString = "{${testCredentials} \"track\": \"${sequence.name}\", \"operation\": \"add_feature\", \"features\": " + outputJsonArray.getJSONObject(i).getJSONArray("addFeature").toString() + "}"
                 requestHandlingService.addFeature(JSON.parse(inputString) as JSONObject)
-            }
-            else if (outputJsonArray.getJSONObject(i).has("addTranscript")) {
+            } else if (outputJsonArray.getJSONObject(i).has("addTranscript")) {
                 String inputString = "{${testCredentials} \"track\": \"${sequence.name}\", \"operation\": \"add_transcript\", \"features\": " + outputJsonArray.getJSONObject(i).getJSONArray("addTranscript").toString() + "}"
                 requestHandlingService.addTranscript(JSON.parse(inputString) as JSONObject)
-            }
-            else if (outputJsonArray.getJSONObject(i).has("addSequenceAlteration")) {
+            } else if (outputJsonArray.getJSONObject(i).has("addSequenceAlteration")) {
                 String inputString = "{${testCredentials} \"track\": \"${sequence.name}\", \"operation\": \"add_sequence_alteration\", \"features\": " + outputJsonArray.getJSONObject(i).getJSONArray("addSequenceAlteration").toString() + "}"
                 requestHandlingService.addSequenceAlteration(JSON.parse(inputString) as JSONObject)
             }
@@ -3581,7 +3733,6 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
 
         when: "we add the same transcript again"
         JSONObject returnObject = requestHandlingService.addTranscript(JSON.parse(addTranscriptString) as JSONObject)
-        println returnObject.toString()
         String transcript2UniqueName = returnObject.getJSONArray(FeatureStringEnum.FEATURES.value).getJSONObject(0).get(FeatureStringEnum.UNIQUENAME.value)
 
         then: "due to the presence of an overlapping sequence alteration, the transcript's CDS should be recalculated automatically"
@@ -3608,8 +3759,6 @@ class RequestHandlingServiceIntegrationSpec extends AbstractIntegrationSpec{
 
         String transcript1UniqueName = addTranscript1ReturnOject.getJSONArray(FeatureStringEnum.FEATURES.value).getJSONObject(0).get(FeatureStringEnum.UNIQUENAME.value)
         String transcript2UniqueName = addTranscript2ReturnOject.getJSONArray(FeatureStringEnum.FEATURES.value).getJSONObject(0).get(FeatureStringEnum.UNIQUENAME.value)
-        println transcript1UniqueName
-        println transcript2UniqueName
 
         then: "we see the transcripts"
         assert Transcript.count == 2
